// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ResourceInfoAdminState.
const (
	ResourceInfoAdminStateLOCKED       ResourceInfoAdminState = "LOCKED"
	ResourceInfoAdminStateSHUTTINGDOWN ResourceInfoAdminState = "SHUTTING_DOWN"
	ResourceInfoAdminStateUNKNOWN      ResourceInfoAdminState = "UNKNOWN"
	ResourceInfoAdminStateUNLOCKED     ResourceInfoAdminState = "UNLOCKED"
)

// Defines values for ResourceInfoOperationalState.
const (
	ResourceInfoOperationalStateDISABLED ResourceInfoOperationalState = "DISABLED"
	ResourceInfoOperationalStateENABLED  ResourceInfoOperationalState = "ENABLED"
	ResourceInfoOperationalStateUNKNOWN  ResourceInfoOperationalState = "UNKNOWN"
)

// Defines values for ResourceInfoPowerState.
const (
	OFF ResourceInfoPowerState = "OFF"
	ON  ResourceInfoPowerState = "ON"
)

// Defines values for ResourceInfoUsageState.
const (
	ACTIVE  ResourceInfoUsageState = "ACTIVE"
	BUSY    ResourceInfoUsageState = "BUSY"
	IDLE    ResourceInfoUsageState = "IDLE"
	UNKNOWN ResourceInfoUsageState = "UNKNOWN"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// ProcessorInfo Information about a processor
type ProcessorInfo struct {
	// Architecture The processor architecture
	Architecture *string `json:"architecture,omitempty"`

	// Cores The total number of physical cores
	Cores *int `json:"cores,omitempty"`

	// Manufacturer The manufacturer of the processor
	Manufacturer *string `json:"manufacturer,omitempty"`

	// Model The manufacturer's processor model name
	Model *string `json:"model,omitempty"`
}

// ResourceInfo Information about a resource.
type ResourceInfo struct {
	// AdminState The administrative state of the resource
	AdminState ResourceInfoAdminState `json:"adminState"`

	// Description Human readable description of the resource.
	Description string `json:"description"`

	// GlobalAssetId Identifier or serial number of the resource, if available.
	GlobalAssetId *string `json:"globalAssetId,omitempty"`

	// Groups Keywords denoting groups a resource belongs to.
	Groups *[]string `json:"groups,omitempty"`

	// Labels Optional labels applied to this resource
	Labels *map[string]string `json:"labels,omitempty"`

	// Memory The total physical memory in MiB
	Memory int `json:"memory"`

	// Model The vendor model name of the resource
	Model string `json:"model"`

	// Name Short name for the resource.
	Name string `json:"name"`

	// OperationalState The operational state of the resource
	OperationalState ResourceInfoOperationalState `json:"operationalState"`

	// PartNumber The vendor part number of the resource
	PartNumber string `json:"partNumber"`

	// PowerState The power state of the resource
	PowerState *ResourceInfoPowerState `json:"powerState,omitempty"`
	Processors []ProcessorInfo         `json:"processors"`

	// ResourceId Identifier for the Resource.
	ResourceId     string `json:"resourceId"`
	ResourcePoolId string `json:"resourcePoolId"`

	// SerialNumber The vendor serial number of the resource
	SerialNumber string `json:"serialNumber"`

	// Tags Keywords describing or classifying the resource instance
	Tags       *[]string              `json:"tags,omitempty"`
	UsageState ResourceInfoUsageState `json:"usageState"`

	// Vendor Vendor or manufacturer name
	Vendor string `json:"vendor"`
}

// ResourceInfoAdminState The administrative state of the resource
type ResourceInfoAdminState string

// ResourceInfoOperationalState The operational state of the resource
type ResourceInfoOperationalState string

// ResourceInfoPowerState The power state of the resource
type ResourceInfoPowerState string

// ResourceInfoUsageState defines model for ResourceInfo.UsageState.
type ResourceInfoUsageState string

// ResourcePoolInfo Information about a resource pool.
type ResourcePoolInfo struct {
	// Description Human readable description of the resource pool.
	Description string `json:"description"`

	// Name Human readable name of the resource pool.
	Name string `json:"name"`

	// ResourcePoolId Identifier for the Resource Pool in the hardware manager instance.
	ResourcePoolId string `json:"resourcePoolId"`

	// SiteId Identifier for the location of the resource pool.
	SiteId *string `json:"siteId,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllVersions request
	GetAllVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMinorVersions request
	GetMinorVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourcePools request
	GetResourcePools(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourcePool request
	GetResourcePool(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourcePoolResources request
	GetResourcePoolResources(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResources request
	GetResources(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, hwMgrId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMinorVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMinorVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourcePools(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcePoolsRequest(c.Server, hwMgrId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourcePool(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcePoolRequest(c.Server, hwMgrId, resourcePoolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourcePoolResources(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcePoolResourcesRequest(c.Server, hwMgrId, resourcePoolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResources(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcesRequest(c.Server, hwMgrId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, hwMgrId string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, hwMgrId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllVersionsRequest generates requests for GetAllVersions
func NewGetAllVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/api_versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMinorVersionsRequest generates requests for GetMinorVersions
func NewGetMinorVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/v1/api_versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourcePoolsRequest generates requests for GetResourcePools
func NewGetResourcePoolsRequest(server string, hwMgrId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hwMgrId", runtime.ParamLocationPath, hwMgrId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/v1/manager/%s/resourcePools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourcePoolRequest generates requests for GetResourcePool
func NewGetResourcePoolRequest(server string, hwMgrId string, resourcePoolId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hwMgrId", runtime.ParamLocationPath, hwMgrId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourcePoolId", runtime.ParamLocationPath, resourcePoolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/v1/manager/%s/resourcePools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourcePoolResourcesRequest generates requests for GetResourcePoolResources
func NewGetResourcePoolResourcesRequest(server string, hwMgrId string, resourcePoolId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hwMgrId", runtime.ParamLocationPath, hwMgrId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourcePoolId", runtime.ParamLocationPath, resourcePoolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/v1/manager/%s/resourcePools/%s/resources", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourcesRequest generates requests for GetResources
func NewGetResourcesRequest(server string, hwMgrId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hwMgrId", runtime.ParamLocationPath, hwMgrId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/v1/manager/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, hwMgrId string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hwMgrId", runtime.ParamLocationPath, hwMgrId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/inventory/v1/manager/%s/resources/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllVersionsWithResponse request
	GetAllVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllVersionsResponse, error)

	// GetMinorVersionsWithResponse request
	GetMinorVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinorVersionsResponse, error)

	// GetResourcePoolsWithResponse request
	GetResourcePoolsWithResponse(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*GetResourcePoolsResponse, error)

	// GetResourcePoolWithResponse request
	GetResourcePoolWithResponse(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*GetResourcePoolResponse, error)

	// GetResourcePoolResourcesWithResponse request
	GetResourcePoolResourcesWithResponse(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*GetResourcePoolResourcesResponse, error)

	// GetResourcesWithResponse request
	GetResourcesWithResponse(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*GetResourcesResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, hwMgrId string, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)
}

type GetAllVersionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *APIVersions
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAllVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMinorVersionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *APIVersions
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetMinorVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMinorVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcePoolsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]ResourcePoolInfo
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
	ApplicationProblemJSON503 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetResourcePoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcePoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcePoolResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResourcePoolInfo
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetResourcePoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcePoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcePoolResourcesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]ResourceInfo
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetResourcePoolResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcePoolResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]ResourceInfo
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
	ApplicationProblemJSON503 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResourceInfo
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllVersionsWithResponse request returning *GetAllVersionsResponse
func (c *ClientWithResponses) GetAllVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllVersionsResponse, error) {
	rsp, err := c.GetAllVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllVersionsResponse(rsp)
}

// GetMinorVersionsWithResponse request returning *GetMinorVersionsResponse
func (c *ClientWithResponses) GetMinorVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinorVersionsResponse, error) {
	rsp, err := c.GetMinorVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMinorVersionsResponse(rsp)
}

// GetResourcePoolsWithResponse request returning *GetResourcePoolsResponse
func (c *ClientWithResponses) GetResourcePoolsWithResponse(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*GetResourcePoolsResponse, error) {
	rsp, err := c.GetResourcePools(ctx, hwMgrId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcePoolsResponse(rsp)
}

// GetResourcePoolWithResponse request returning *GetResourcePoolResponse
func (c *ClientWithResponses) GetResourcePoolWithResponse(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*GetResourcePoolResponse, error) {
	rsp, err := c.GetResourcePool(ctx, hwMgrId, resourcePoolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcePoolResponse(rsp)
}

// GetResourcePoolResourcesWithResponse request returning *GetResourcePoolResourcesResponse
func (c *ClientWithResponses) GetResourcePoolResourcesWithResponse(ctx context.Context, hwMgrId string, resourcePoolId string, reqEditors ...RequestEditorFn) (*GetResourcePoolResourcesResponse, error) {
	rsp, err := c.GetResourcePoolResources(ctx, hwMgrId, resourcePoolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcePoolResourcesResponse(rsp)
}

// GetResourcesWithResponse request returning *GetResourcesResponse
func (c *ClientWithResponses) GetResourcesWithResponse(ctx context.Context, hwMgrId string, reqEditors ...RequestEditorFn) (*GetResourcesResponse, error) {
	rsp, err := c.GetResources(ctx, hwMgrId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcesResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, hwMgrId string, resourceId string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, hwMgrId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// ParseGetAllVersionsResponse parses an HTTP response from a GetAllVersionsWithResponse call
func ParseGetAllVersionsResponse(rsp *http.Response) (*GetAllVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetMinorVersionsResponse parses an HTTP response from a GetMinorVersionsWithResponse call
func ParseGetMinorVersionsResponse(rsp *http.Response) (*GetMinorVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMinorVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetResourcePoolsResponse parses an HTTP response from a GetResourcePoolsWithResponse call
func ParseGetResourcePoolsResponse(rsp *http.Response) (*GetResourcePoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcePoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourcePoolInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetResourcePoolResponse parses an HTTP response from a GetResourcePoolWithResponse call
func ParseGetResourcePoolResponse(rsp *http.Response) (*GetResourcePoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcePoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourcePoolInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetResourcePoolResourcesResponse parses an HTTP response from a GetResourcePoolResourcesWithResponse call
func ParseGetResourcePoolResourcesResponse(rsp *http.Response) (*GetResourcePoolResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcePoolResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetResourcesResponse parses an HTTP response from a GetResourcesWithResponse call
func ParseGetResourcesResponse(rsp *http.Response) (*GetResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1v8LAAD//2DMGTLJLwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
