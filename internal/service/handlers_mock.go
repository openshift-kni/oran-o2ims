// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go
//
// Generated by this command:
//
//	mockgen -source=handlers.go -package=service -destination=handlers_mock.go
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockListHandler is a mock of ListHandler interface.
type MockListHandler struct {
	ctrl     *gomock.Controller
	recorder *MockListHandlerMockRecorder
}

// MockListHandlerMockRecorder is the mock recorder for MockListHandler.
type MockListHandlerMockRecorder struct {
	mock *MockListHandler
}

// NewMockListHandler creates a new mock instance.
func NewMockListHandler(ctrl *gomock.Controller) *MockListHandler {
	mock := &MockListHandler{ctrl: ctrl}
	mock.recorder = &MockListHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListHandler) EXPECT() *MockListHandlerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockListHandler) List(ctx context.Context, request *ListRequest) (*ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockListHandlerMockRecorder) List(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockListHandler)(nil).List), ctx, request)
}

// MockGetHandler is a mock of GetHandler interface.
type MockGetHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGetHandlerMockRecorder
}

// MockGetHandlerMockRecorder is the mock recorder for MockGetHandler.
type MockGetHandlerMockRecorder struct {
	mock *MockGetHandler
}

// NewMockGetHandler creates a new mock instance.
func NewMockGetHandler(ctrl *gomock.Controller) *MockGetHandler {
	mock := &MockGetHandler{ctrl: ctrl}
	mock.recorder = &MockGetHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetHandler) EXPECT() *MockGetHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetHandler) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetHandlerMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetHandler)(nil).Get), ctx, request)
}

// MockAddHandler is a mock of AddHandler interface.
type MockAddHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAddHandlerMockRecorder
}

// MockAddHandlerMockRecorder is the mock recorder for MockAddHandler.
type MockAddHandlerMockRecorder struct {
	mock *MockAddHandler
}

// NewMockAddHandler creates a new mock instance.
func NewMockAddHandler(ctrl *gomock.Controller) *MockAddHandler {
	mock := &MockAddHandler{ctrl: ctrl}
	mock.recorder = &MockAddHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddHandler) EXPECT() *MockAddHandlerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAddHandler) Add(ctx context.Context, request *AddRequest) (*AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, request)
	ret0, _ := ret[0].(*AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAddHandlerMockRecorder) Add(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddHandler)(nil).Add), ctx, request)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHandler) Add(ctx context.Context, request *AddRequest) (*AddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, request)
	ret0, _ := ret[0].(*AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockHandlerMockRecorder) Add(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHandler)(nil).Add), ctx, request)
}

// Get mocks base method.
func (m *MockHandler) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHandlerMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHandler)(nil).Get), ctx, request)
}

// List mocks base method.
func (m *MockHandler) List(ctx context.Context, request *ListRequest) (*ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHandlerMockRecorder) List(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHandler)(nil).List), ctx, request)
}
