// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go
//
// Generated by this command:
//
//	mockgen -source=handlers.go -package=service -destination=handlers_mock.go
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCollectionHandler is a mock of CollectionHandler interface.
type MockCollectionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionHandlerMockRecorder
}

// MockCollectionHandlerMockRecorder is the mock recorder for MockCollectionHandler.
type MockCollectionHandlerMockRecorder struct {
	mock *MockCollectionHandler
}

// NewMockCollectionHandler creates a new mock instance.
func NewMockCollectionHandler(ctrl *gomock.Controller) *MockCollectionHandler {
	mock := &MockCollectionHandler{ctrl: ctrl}
	mock.recorder = &MockCollectionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionHandler) EXPECT() *MockCollectionHandlerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCollectionHandler) List(ctx context.Context, request *ListRequest) (*ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCollectionHandlerMockRecorder) List(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCollectionHandler)(nil).List), ctx, request)
}

// MockObjectHandler is a mock of ObjectHandler interface.
type MockObjectHandler struct {
	ctrl     *gomock.Controller
	recorder *MockObjectHandlerMockRecorder
}

// MockObjectHandlerMockRecorder is the mock recorder for MockObjectHandler.
type MockObjectHandlerMockRecorder struct {
	mock *MockObjectHandler
}

// NewMockObjectHandler creates a new mock instance.
func NewMockObjectHandler(ctrl *gomock.Controller) *MockObjectHandler {
	mock := &MockObjectHandler{ctrl: ctrl}
	mock.recorder = &MockObjectHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectHandler) EXPECT() *MockObjectHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockObjectHandler) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockObjectHandlerMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectHandler)(nil).Get), ctx, request)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHandler) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHandlerMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHandler)(nil).Get), ctx, request)
}

// List mocks base method.
func (m *MockHandler) List(ctx context.Context, request *ListRequest) (*ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockHandlerMockRecorder) List(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHandler)(nil).List), ctx, request)
}
