// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// ExcludeFields defines model for excludeFields.
type ExcludeFields = string

// Fields defines model for fields.
type Fields = string

// Filter defines model for filter.
type Filter = string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
