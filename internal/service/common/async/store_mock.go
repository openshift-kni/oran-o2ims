// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source=store.go -destination=store_mock.go -package=async
//
// Package async is a generated GoMock package.
package async

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockAsyncEventHandler is a mock of AsyncEventHandler interface.
type MockAsyncEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncEventHandlerMockRecorder
}

// MockAsyncEventHandlerMockRecorder is the mock recorder for MockAsyncEventHandler.
type MockAsyncEventHandlerMockRecorder struct {
	mock *MockAsyncEventHandler
}

// NewMockAsyncEventHandler creates a new mock instance.
func NewMockAsyncEventHandler(ctrl *gomock.Controller) *MockAsyncEventHandler {
	mock := &MockAsyncEventHandler{ctrl: ctrl}
	mock.recorder = &MockAsyncEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncEventHandler) EXPECT() *MockAsyncEventHandlerMockRecorder {
	return m.recorder
}

// HandleAsyncEvent mocks base method.
func (m *MockAsyncEventHandler) HandleAsyncEvent(ctx context.Context, obj any, eventType AsyncEventType) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAsyncEvent", ctx, obj, eventType)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleAsyncEvent indicates an expected call of HandleAsyncEvent.
func (mr *MockAsyncEventHandlerMockRecorder) HandleAsyncEvent(ctx, obj, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAsyncEvent", reflect.TypeOf((*MockAsyncEventHandler)(nil).HandleAsyncEvent), ctx, obj, eventType)
}

// HandleSyncComplete mocks base method.
func (m *MockAsyncEventHandler) HandleSyncComplete(ctx context.Context, objectType runtime.Object, keys []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncComplete", ctx, objectType, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncComplete indicates an expected call of HandleSyncComplete.
func (mr *MockAsyncEventHandlerMockRecorder) HandleSyncComplete(ctx, objectType, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncComplete", reflect.TypeOf((*MockAsyncEventHandler)(nil).HandleSyncComplete), ctx, objectType, keys)
}
