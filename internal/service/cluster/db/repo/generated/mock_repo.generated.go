// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go
//
// Generated by this command:
//
//	mockgen -source=repository_interface.go -destination=generated/mock_repo.generated.go -package=generated
//
// Package generated is a generated GoMock package.
package generated

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/openshift-kni/oran-o2ims/internal/service/cluster/db/models"
	models0 "github.com/openshift-kni/oran-o2ims/internal/service/common/db/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateDataChangeEvent mocks base method.
func (m *MockRepositoryInterface) CreateDataChangeEvent(arg0 context.Context, arg1 *models0.DataChangeEvent) (*models0.DataChangeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataChangeEvent", arg0, arg1)
	ret0, _ := ret[0].(*models0.DataChangeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataChangeEvent indicates an expected call of CreateDataChangeEvent.
func (mr *MockRepositoryInterfaceMockRecorder) CreateDataChangeEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataChangeEvent", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateDataChangeEvent), arg0, arg1)
}

// CreateDataSource mocks base method.
func (m *MockRepositoryInterface) CreateDataSource(arg0 context.Context, arg1 *models0.DataSource) (*models0.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSource", arg0, arg1)
	ret0, _ := ret[0].(*models0.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSource indicates an expected call of CreateDataSource.
func (mr *MockRepositoryInterfaceMockRecorder) CreateDataSource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSource", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateDataSource), arg0, arg1)
}

// CreateSubscription mocks base method.
func (m *MockRepositoryInterface) CreateSubscription(arg0 context.Context, arg1 *models0.Subscription) (*models0.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*models0.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockRepositoryInterfaceMockRecorder) CreateSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateSubscription), arg0, arg1)
}

// DeleteAlarmDefinitionsNotIn mocks base method.
func (m *MockRepositoryInterface) DeleteAlarmDefinitionsNotIn(arg0 context.Context, arg1 []any, arg2 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlarmDefinitionsNotIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlarmDefinitionsNotIn indicates an expected call of DeleteAlarmDefinitionsNotIn.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteAlarmDefinitionsNotIn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmDefinitionsNotIn", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteAlarmDefinitionsNotIn), arg0, arg1, arg2)
}

// DeleteDataChangeEvent mocks base method.
func (m *MockRepositoryInterface) DeleteDataChangeEvent(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataChangeEvent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataChangeEvent indicates an expected call of DeleteDataChangeEvent.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteDataChangeEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataChangeEvent", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteDataChangeEvent), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockRepositoryInterface) DeleteSubscription(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteSubscription), arg0, arg1)
}

// FindStaleAlarmDictionaries mocks base method.
func (m *MockRepositoryInterface) FindStaleAlarmDictionaries(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]models.AlarmDictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStaleAlarmDictionaries", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.AlarmDictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStaleAlarmDictionaries indicates an expected call of FindStaleAlarmDictionaries.
func (mr *MockRepositoryInterfaceMockRecorder) FindStaleAlarmDictionaries(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStaleAlarmDictionaries", reflect.TypeOf((*MockRepositoryInterface)(nil).FindStaleAlarmDictionaries), arg0, arg1, arg2)
}

// GetAlarmDefinitionsByAlarmDictionaryID mocks base method.
func (m *MockRepositoryInterface) GetAlarmDefinitionsByAlarmDictionaryID(arg0 context.Context, arg1 uuid.UUID) ([]models.AlarmDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmDefinitionsByAlarmDictionaryID", arg0, arg1)
	ret0, _ := ret[0].([]models.AlarmDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmDefinitionsByAlarmDictionaryID indicates an expected call of GetAlarmDefinitionsByAlarmDictionaryID.
func (mr *MockRepositoryInterfaceMockRecorder) GetAlarmDefinitionsByAlarmDictionaryID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmDefinitionsByAlarmDictionaryID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAlarmDefinitionsByAlarmDictionaryID), arg0, arg1)
}

// GetAlarmDictionaries mocks base method.
func (m *MockRepositoryInterface) GetAlarmDictionaries(arg0 context.Context) ([]models.AlarmDictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmDictionaries", arg0)
	ret0, _ := ret[0].([]models.AlarmDictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmDictionaries indicates an expected call of GetAlarmDictionaries.
func (mr *MockRepositoryInterfaceMockRecorder) GetAlarmDictionaries(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmDictionaries", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAlarmDictionaries), arg0)
}

// GetAlarmDictionary mocks base method.
func (m *MockRepositoryInterface) GetAlarmDictionary(arg0 context.Context, arg1 uuid.UUID) (*models.AlarmDictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmDictionary", arg0, arg1)
	ret0, _ := ret[0].(*models.AlarmDictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmDictionary indicates an expected call of GetAlarmDictionary.
func (mr *MockRepositoryInterfaceMockRecorder) GetAlarmDictionary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmDictionary", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAlarmDictionary), arg0, arg1)
}

// GetClusterResource mocks base method.
func (m *MockRepositoryInterface) GetClusterResource(arg0 context.Context, arg1 uuid.UUID) (*models.ClusterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterResource", arg0, arg1)
	ret0, _ := ret[0].(*models.ClusterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterResource indicates an expected call of GetClusterResource.
func (mr *MockRepositoryInterfaceMockRecorder) GetClusterResource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterResource", reflect.TypeOf((*MockRepositoryInterface)(nil).GetClusterResource), arg0, arg1)
}

// GetClusterResourceType mocks base method.
func (m *MockRepositoryInterface) GetClusterResourceType(arg0 context.Context, arg1 uuid.UUID) (*models.ClusterResourceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterResourceType", arg0, arg1)
	ret0, _ := ret[0].(*models.ClusterResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterResourceType indicates an expected call of GetClusterResourceType.
func (mr *MockRepositoryInterfaceMockRecorder) GetClusterResourceType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterResourceType", reflect.TypeOf((*MockRepositoryInterface)(nil).GetClusterResourceType), arg0, arg1)
}

// GetClusterResourceTypes mocks base method.
func (m *MockRepositoryInterface) GetClusterResourceTypes(arg0 context.Context) ([]models.ClusterResourceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterResourceTypes", arg0)
	ret0, _ := ret[0].([]models.ClusterResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterResourceTypes indicates an expected call of GetClusterResourceTypes.
func (mr *MockRepositoryInterfaceMockRecorder) GetClusterResourceTypes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterResourceTypes", reflect.TypeOf((*MockRepositoryInterface)(nil).GetClusterResourceTypes), arg0)
}

// GetClusterResources mocks base method.
func (m *MockRepositoryInterface) GetClusterResources(arg0 context.Context) ([]models.ClusterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterResources", arg0)
	ret0, _ := ret[0].([]models.ClusterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterResources indicates an expected call of GetClusterResources.
func (mr *MockRepositoryInterfaceMockRecorder) GetClusterResources(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterResources", reflect.TypeOf((*MockRepositoryInterface)(nil).GetClusterResources), arg0)
}

// GetClusterResourcesNotIn mocks base method.
func (m *MockRepositoryInterface) GetClusterResourcesNotIn(arg0 context.Context, arg1 []any) ([]models.ClusterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterResourcesNotIn", arg0, arg1)
	ret0, _ := ret[0].([]models.ClusterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterResourcesNotIn indicates an expected call of GetClusterResourcesNotIn.
func (mr *MockRepositoryInterfaceMockRecorder) GetClusterResourcesNotIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterResourcesNotIn", reflect.TypeOf((*MockRepositoryInterface)(nil).GetClusterResourcesNotIn), arg0, arg1)
}

// GetDataChangeEvents mocks base method.
func (m *MockRepositoryInterface) GetDataChangeEvents(arg0 context.Context) ([]models0.DataChangeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataChangeEvents", arg0)
	ret0, _ := ret[0].([]models0.DataChangeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataChangeEvents indicates an expected call of GetDataChangeEvents.
func (mr *MockRepositoryInterfaceMockRecorder) GetDataChangeEvents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataChangeEvents", reflect.TypeOf((*MockRepositoryInterface)(nil).GetDataChangeEvents), arg0)
}

// GetDataSourceByName mocks base method.
func (m *MockRepositoryInterface) GetDataSourceByName(arg0 context.Context, arg1 string) (*models0.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceByName", arg0, arg1)
	ret0, _ := ret[0].(*models0.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceByName indicates an expected call of GetDataSourceByName.
func (mr *MockRepositoryInterfaceMockRecorder) GetDataSourceByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceByName", reflect.TypeOf((*MockRepositoryInterface)(nil).GetDataSourceByName), arg0, arg1)
}

// GetNodeCluster mocks base method.
func (m *MockRepositoryInterface) GetNodeCluster(arg0 context.Context, arg1 uuid.UUID) (*models.NodeCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeCluster", arg0, arg1)
	ret0, _ := ret[0].(*models.NodeCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeCluster indicates an expected call of GetNodeCluster.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeCluster", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeCluster), arg0, arg1)
}

// GetNodeClusterByName mocks base method.
func (m *MockRepositoryInterface) GetNodeClusterByName(arg0 context.Context, arg1 string) (*models.NodeCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClusterByName", arg0, arg1)
	ret0, _ := ret[0].(*models.NodeCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusterByName indicates an expected call of GetNodeClusterByName.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusterByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusterByName", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusterByName), arg0, arg1)
}

// GetNodeClusterResourceIDs mocks base method.
func (m *MockRepositoryInterface) GetNodeClusterResourceIDs(arg0 context.Context, arg1 ...any) ([]models.ClusterResourceIDs, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeClusterResourceIDs", varargs...)
	ret0, _ := ret[0].([]models.ClusterResourceIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusterResourceIDs indicates an expected call of GetNodeClusterResourceIDs.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusterResourceIDs(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusterResourceIDs", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusterResourceIDs), varargs...)
}

// GetNodeClusterResources mocks base method.
func (m *MockRepositoryInterface) GetNodeClusterResources(arg0 context.Context, arg1 uuid.UUID) ([]models.ClusterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClusterResources", arg0, arg1)
	ret0, _ := ret[0].([]models.ClusterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusterResources indicates an expected call of GetNodeClusterResources.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusterResources(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusterResources", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusterResources), arg0, arg1)
}

// GetNodeClusterType mocks base method.
func (m *MockRepositoryInterface) GetNodeClusterType(arg0 context.Context, arg1 uuid.UUID) (*models.NodeClusterType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClusterType", arg0, arg1)
	ret0, _ := ret[0].(*models.NodeClusterType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusterType indicates an expected call of GetNodeClusterType.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusterType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusterType", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusterType), arg0, arg1)
}

// GetNodeClusterTypeAlarmDictionary mocks base method.
func (m *MockRepositoryInterface) GetNodeClusterTypeAlarmDictionary(arg0 context.Context, arg1 uuid.UUID) ([]models.AlarmDictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClusterTypeAlarmDictionary", arg0, arg1)
	ret0, _ := ret[0].([]models.AlarmDictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusterTypeAlarmDictionary indicates an expected call of GetNodeClusterTypeAlarmDictionary.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusterTypeAlarmDictionary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusterTypeAlarmDictionary", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusterTypeAlarmDictionary), arg0, arg1)
}

// GetNodeClusterTypes mocks base method.
func (m *MockRepositoryInterface) GetNodeClusterTypes(arg0 context.Context) ([]models.NodeClusterType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClusterTypes", arg0)
	ret0, _ := ret[0].([]models.NodeClusterType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusterTypes indicates an expected call of GetNodeClusterTypes.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusterTypes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusterTypes", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusterTypes), arg0)
}

// GetNodeClusters mocks base method.
func (m *MockRepositoryInterface) GetNodeClusters(arg0 context.Context) ([]models.NodeCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClusters", arg0)
	ret0, _ := ret[0].([]models.NodeCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClusters indicates an expected call of GetNodeClusters.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClusters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClusters", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClusters), arg0)
}

// GetNodeClustersNotIn mocks base method.
func (m *MockRepositoryInterface) GetNodeClustersNotIn(arg0 context.Context, arg1 []any) ([]models.NodeCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeClustersNotIn", arg0, arg1)
	ret0, _ := ret[0].([]models.NodeCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeClustersNotIn indicates an expected call of GetNodeClustersNotIn.
func (mr *MockRepositoryInterfaceMockRecorder) GetNodeClustersNotIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeClustersNotIn", reflect.TypeOf((*MockRepositoryInterface)(nil).GetNodeClustersNotIn), arg0, arg1)
}

// GetSubscription mocks base method.
func (m *MockRepositoryInterface) GetSubscription(arg0 context.Context, arg1 uuid.UUID) (*models0.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0, arg1)
	ret0, _ := ret[0].(*models0.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockRepositoryInterfaceMockRecorder) GetSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockRepositoryInterface)(nil).GetSubscription), arg0, arg1)
}

// GetSubscriptions mocks base method.
func (m *MockRepositoryInterface) GetSubscriptions(arg0 context.Context) ([]models0.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", arg0)
	ret0, _ := ret[0].([]models0.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockRepositoryInterfaceMockRecorder) GetSubscriptions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockRepositoryInterface)(nil).GetSubscriptions), arg0)
}

// SetNodeClusterID mocks base method.
func (m *MockRepositoryInterface) SetNodeClusterID(arg0 context.Context, arg1 string, arg2 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeClusterID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNodeClusterID indicates an expected call of SetNodeClusterID.
func (mr *MockRepositoryInterfaceMockRecorder) SetNodeClusterID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeClusterID", reflect.TypeOf((*MockRepositoryInterface)(nil).SetNodeClusterID), arg0, arg1, arg2)
}

// UpdateDataSource mocks base method.
func (m *MockRepositoryInterface) UpdateDataSource(arg0 context.Context, arg1 *models0.DataSource) (*models0.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSource", arg0, arg1)
	ret0, _ := ret[0].(*models0.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSource indicates an expected call of UpdateDataSource.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateDataSource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSource", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateDataSource), arg0, arg1)
}

// UpdateSubscription mocks base method.
func (m *MockRepositoryInterface) UpdateSubscription(arg0 context.Context, arg1 *models0.Subscription) (*models0.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*models0.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateSubscription), arg0, arg1)
}

// UpsertAlarmDefinitions mocks base method.
func (m *MockRepositoryInterface) UpsertAlarmDefinitions(arg0 context.Context, arg1 []models.AlarmDefinition) ([]models.AlarmDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAlarmDefinitions", arg0, arg1)
	ret0, _ := ret[0].([]models.AlarmDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAlarmDefinitions indicates an expected call of UpsertAlarmDefinitions.
func (mr *MockRepositoryInterfaceMockRecorder) UpsertAlarmDefinitions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlarmDefinitions", reflect.TypeOf((*MockRepositoryInterface)(nil).UpsertAlarmDefinitions), arg0, arg1)
}
