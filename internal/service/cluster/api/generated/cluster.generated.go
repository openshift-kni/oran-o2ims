//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for ClusterChangeNotificationNotificationEventType.
const (
	N0 ClusterChangeNotificationNotificationEventType = 0
	N1 ClusterChangeNotificationNotificationEventType = 1
	N2 ClusterChangeNotificationNotificationEventType = 2
)

// ClusterChangeNotification Information about an inventory change notification
type ClusterChangeNotification struct {
	// ConsumerSubscriptionId The value provided by the consumer in the subscription
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// NotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
	NotificationEventType ClusterChangeNotificationNotificationEventType `json:"notificationEventType"`

	// NotificationId A unique identifier to represent this notification event
	NotificationId openapi_types.UUID `json:"notificationId"`

	// ObjectRef The URL to the object. This is not required if the notificationEventType is 2 (DELETE). It will point to
	// one of the following data types defined in clause 3.2.6 and the reference will match the type of objects
	// supplied in priorObjectState and/or postObjectState.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PostObjectState This is required if the notificationEventType is 0 (CREATE) or 1 (MODIFY) and is one of the following data
	// types defined in clause 3.2.6 and will match the type of object in priorObjectState and/or the type
	// referred to in objectRef.
	PostObjectState *map[string]interface{} `json:"postObjectState,omitempty"`

	// PriorObjectState This is required if the notificationEventType is 1 (MODIFY) or 2 (DELETE) and is one of the following
	// data types defined in clause 3.2.6 and will match the type of object in postObjectState and/or the type
	// referred to in objectRef.
	PriorObjectState *map[string]interface{} `json:"priorObjectState,omitempty"`
}

// ClusterChangeNotificationNotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
type ClusterChangeNotificationNotificationEventType int

// ClusterResource Information about a Cluster Resource
type ClusterResource struct {
	// ArtifactResourceIds Identifiers for the artifact(s) which this resource is based on.
	ArtifactResourceIds *[]openapi_types.UUID `json:"artifactResourceIds,omitempty"`

	// ClusterResourceId Unique identifier for the ClusterResource instance
	ClusterResourceId openapi_types.UUID `json:"clusterResourceId"`

	// ClusterResourceTypeId Identifier for the ClusterResourceType for this resource.
	ClusterResourceTypeId openapi_types.UUID `json:"clusterResourceTypeId"`

	// Description Human readable description of the cluster resource.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Cluster Resource.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// MemberOf list of other ClusterResources which are linked together.
	MemberOf *[]string `json:"memberOf,omitempty"`

	// Name Name of the cluster resource
	Name string `json:"name"`

	// ResourceId Identifier for the inventory resource which this resource is mapped to
	ResourceId openapi_types.UUID `json:"resourceId"`
}

// ClusterResourceType Information about a Cluster Resource Type
type ClusterResourceType struct {
	// ClusterResourceTypeId Unique identifier for the ClusterResourceType instance
	ClusterResourceTypeId openapi_types.UUID `json:"clusterResourceTypeId"`

	// Description Human readable description of the Cluster Resource Type.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Cluster Resource Type.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the Cluster Resource Type
	Name string `json:"name"`
}

// NodeCluster Information about a Node Cluster
type NodeCluster struct {
	// ArtifactResourceId Identifier for the template artifact which this NodeCluster is based on.
	ArtifactResourceId openapi_types.UUID `json:"artifactResourceId"`

	// ClientNodeClusterId Unique identifier for the NodeCluster instance assigned by the consumer who requested its creation
	ClientNodeClusterId openapi_types.UUID `json:"clientNodeClusterId"`

	// ClusterDistributionDescription Human readable text identifying the method of distribution of ClusterResources over OCloud Sites.
	ClusterDistributionDescription string `json:"clusterDistributionDescription"`

	// ClusterResourceGroups Optional list node groups that comprise the cluster resources which compose the NodeCluster
	ClusterResourceGroups *[]openapi_types.UUID `json:"clusterResourceGroups,omitempty"`

	// ClusterResourceIds The list of cluster resource identifiers that are used to construct this NodeCluster.
	ClusterResourceIds []openapi_types.UUID `json:"clusterResourceIds"`

	// Description Human readable description of the NodeCluster.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the NodeCluster.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the NodeCluster.
	Name string `json:"name"`

	// NodeClusterId Unique identifier for the NodeClusterType instance
	NodeClusterId openapi_types.UUID `json:"nodeClusterId"`

	// NodeClusterTypeId Identifier for the NodeClusterType that this NodeCluster is.
	NodeClusterTypeId openapi_types.UUID `json:"nodeClusterTypeId"`
}

// NodeClusterType Information about a Node Cluster Type
type NodeClusterType struct {
	// Description Human readable description of the Node Cluster Type.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Node Cluster Type.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the Node Cluster Type
	Name string `json:"name"`

	// NodeClusterTypeId Unique identifier for the NodeClusterType instance
	NodeClusterTypeId openapi_types.UUID `json:"nodeClusterTypeId"`
}

// Subscription Information about an inventory subscription.
type Subscription struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the
	// InventoryEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionId Identifier for the Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionId *openapi_types.UUID `json:"subscriptionId,omitempty"`
}

// ClusterResourceId defines model for clusterResourceId.
type ClusterResourceId = openapi_types.UUID

// ClusterResourceTypeId defines model for clusterResourceTypeId.
type ClusterResourceTypeId = openapi_types.UUID

// NodeClusterId defines model for nodeClusterId.
type NodeClusterId = openapi_types.UUID

// NodeClusterTypeId defines model for nodeClusterTypeId.
type NodeClusterTypeId = openapi_types.UUID

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = openapi_types.UUID

// GetAlarmDictionariesParams defines parameters for GetAlarmDictionaries.
type GetAlarmDictionariesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetClusterResourceTypesParams defines parameters for GetClusterResourceTypes.
type GetClusterResourceTypesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetClusterResourcesParams defines parameters for GetClusterResources.
type GetClusterResourcesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetNodeClusterTypesParams defines parameters for GetNodeClusterTypes.
type GetNodeClusterTypesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetNodeClustersParams defines parameters for GetNodeClusters.
type GetNodeClustersParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetSubscriptionParams defines parameters for GetSubscription.
type GetSubscriptionParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureCluster/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get alarm dictionaries
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries)
	GetAlarmDictionaries(w http.ResponseWriter, r *http.Request, params GetAlarmDictionariesParams)
	// Get an alarm dictionary
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries/{alarmDictionaryId})
	GetAlarmDictionary(w http.ResponseWriter, r *http.Request, alarmDictionaryId externalRef0.AlarmDictionaryId)
	// Get minor API versions
	// (GET /o2ims-infrastructureCluster/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get cluster resource types
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes)
	GetClusterResourceTypes(w http.ResponseWriter, r *http.Request, params GetClusterResourceTypesParams)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId})
	GetClusterResourceType(w http.ResponseWriter, r *http.Request, clusterResourceTypeId ClusterResourceTypeId)
	// Get cluster resources
	// (GET /o2ims-infrastructureCluster/v1/clusterResources)
	GetClusterResources(w http.ResponseWriter, r *http.Request, params GetClusterResourcesParams)
	// Get a cluster resource
	// (GET /o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId})
	GetClusterResource(w http.ResponseWriter, r *http.Request, clusterResourceId ClusterResourceId)
	// Get node cluster types
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes)
	GetNodeClusterTypes(w http.ResponseWriter, r *http.Request, params GetNodeClusterTypesParams)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId})
	GetNodeClusterType(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId)
	// Get an alarm dictionary for a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}/alarmDictionary)
	GetNodeClusterTypeAlarmDictionary(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId)
	// Get node clusters
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters)
	GetNodeClusters(w http.ResponseWriter, r *http.Request, params GetNodeClustersParams)
	// Get a node cluster
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId})
	GetNodeCluster(w http.ResponseWriter, r *http.Request, nodeClusterId NodeClusterId)
	// Get subscriptions
	// (GET /o2ims-infrastructureCluster/v1/subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create subscriptions
	// (POST /o2ims-infrastructureCluster/v1/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete subscription
	// (DELETE /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
	// Get subscription
	// (GET /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId, params GetSubscriptionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarmDictionaries operation middleware
func (siw *ServerInterfaceWrapper) GetAlarmDictionaries(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmDictionariesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarmDictionaries(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarmDictionary operation middleware
func (siw *ServerInterfaceWrapper) GetAlarmDictionary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmDictionaryId" -------------
	var alarmDictionaryId externalRef0.AlarmDictionaryId

	err = runtime.BindStyledParameterWithOptions("simple", "alarmDictionaryId", r.PathValue("alarmDictionaryId"), &alarmDictionaryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmDictionaryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarmDictionary(w, r, alarmDictionaryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResourceTypes operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterResourceTypesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResourceType operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "clusterResourceTypeId" -------------
	var clusterResourceTypeId ClusterResourceTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterResourceTypeId", r.PathValue("clusterResourceTypeId"), &clusterResourceTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterResourceTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceType(w, r, clusterResourceTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResources operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterResourcesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResources(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResource operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "clusterResourceId" -------------
	var clusterResourceId ClusterResourceId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterResourceId", r.PathValue("clusterResourceId"), &clusterResourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterResourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResource(w, r, clusterResourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterTypes operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeClusterTypesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterType operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterTypeId" -------------
	var nodeClusterTypeId NodeClusterTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterTypeId", r.PathValue("nodeClusterTypeId"), &nodeClusterTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterType(w, r, nodeClusterTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterTypeAlarmDictionary operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterTypeAlarmDictionary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterTypeId" -------------
	var nodeClusterTypeId NodeClusterTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterTypeId", r.PathValue("nodeClusterTypeId"), &nodeClusterTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterTypeAlarmDictionary(w, r, nodeClusterTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusters operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusters(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeClustersParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeCluster operation middleware
func (siw *ServerInterfaceWrapper) GetNodeCluster(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterId" -------------
	var nodeClusterId NodeClusterId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterId", r.PathValue("nodeClusterId"), &nodeClusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeCluster(w, r, nodeClusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/alarmDictionaries", wrapper.GetAlarmDictionaries)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/alarmDictionaries/{alarmDictionaryId}", wrapper.GetAlarmDictionary)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResourceTypes", wrapper.GetClusterResourceTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId}", wrapper.GetClusterResourceType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResources", wrapper.GetClusterResources)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId}", wrapper.GetClusterResource)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes", wrapper.GetNodeClusterTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}", wrapper.GetNodeClusterType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}/alarmDictionary", wrapper.GetNodeClusterTypeAlarmDictionary)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusters", wrapper.GetNodeClusters)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId}", wrapper.GetNodeCluster)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId}", wrapper.GetSubscription)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionariesRequestObject struct {
	Params GetAlarmDictionariesParams
}

type GetAlarmDictionariesResponseObject interface {
	VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error
}

type GetAlarmDictionaries200JSONResponse []externalRef0.AlarmDictionary

func (response GetAlarmDictionaries200JSONResponse) VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionaries400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionaries400ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionaries500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionaries500ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionaryRequestObject struct {
	AlarmDictionaryId externalRef0.AlarmDictionaryId `json:"alarmDictionaryId"`
}

type GetAlarmDictionaryResponseObject interface {
	VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error
}

type GetAlarmDictionary200JSONResponse externalRef0.AlarmDictionary

func (response GetAlarmDictionary200JSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionary400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionary400ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionary404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionary404ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionary500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionary500ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypesRequestObject struct {
	Params GetClusterResourceTypesParams
}

type GetClusterResourceTypesResponseObject interface {
	VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error
}

type GetClusterResourceTypes200JSONResponse []ClusterResourceType

func (response GetClusterResourceTypes200JSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceTypes400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceTypes500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypeRequestObject struct {
	ClusterResourceTypeId ClusterResourceTypeId `json:"clusterResourceTypeId"`
}

type GetClusterResourceTypeResponseObject interface {
	VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error
}

type GetClusterResourceType200JSONResponse ClusterResourceType

func (response GetClusterResourceType200JSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType404ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourcesRequestObject struct {
	Params GetClusterResourcesParams
}

type GetClusterResourcesResponseObject interface {
	VisitGetClusterResourcesResponse(w http.ResponseWriter) error
}

type GetClusterResources200JSONResponse []ClusterResource

func (response GetClusterResources200JSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResources400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResources400ApplicationProblemPlusJSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResources500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResources500ApplicationProblemPlusJSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceRequestObject struct {
	ClusterResourceId ClusterResourceId `json:"clusterResourceId"`
}

type GetClusterResourceResponseObject interface {
	VisitGetClusterResourceResponse(w http.ResponseWriter) error
}

type GetClusterResource200JSONResponse ClusterResource

func (response GetClusterResource200JSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource404ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypesRequestObject struct {
	Params GetNodeClusterTypesParams
}

type GetNodeClusterTypesResponseObject interface {
	VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error
}

type GetNodeClusterTypes200JSONResponse []NodeClusterType

func (response GetNodeClusterTypes200JSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypes400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypes500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeRequestObject struct {
	NodeClusterTypeId NodeClusterTypeId `json:"nodeClusterTypeId"`
}

type GetNodeClusterTypeResponseObject interface {
	VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error
}

type GetNodeClusterType200JSONResponse NodeClusterType

func (response GetNodeClusterType200JSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionaryRequestObject struct {
	NodeClusterTypeId NodeClusterTypeId `json:"nodeClusterTypeId"`
}

type GetNodeClusterTypeAlarmDictionaryResponseObject interface {
	VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error
}

type GetNodeClusterTypeAlarmDictionary200JSONResponse externalRef0.AlarmDictionary

func (response GetNodeClusterTypeAlarmDictionary200JSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionary400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypeAlarmDictionary400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionary404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypeAlarmDictionary404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionary500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypeAlarmDictionary500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClustersRequestObject struct {
	Params GetNodeClustersParams
}

type GetNodeClustersResponseObject interface {
	VisitGetNodeClustersResponse(w http.ResponseWriter) error
}

type GetNodeClusters200JSONResponse []NodeCluster

func (response GetNodeClusters200JSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusters400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusters400ApplicationProblemPlusJSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusters500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusters500ApplicationProblemPlusJSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterRequestObject struct {
	NodeClusterId NodeClusterId `json:"nodeClusterId"`
}

type GetNodeClusterResponseObject interface {
	VisitGetNodeClusterResponse(w http.ResponseWriter) error
}

type GetNodeCluster200JSONResponse NodeCluster

func (response GetNodeCluster200JSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse Subscription

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
	Params         GetSubscriptionParams
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse Subscription

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureCluster/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get alarm dictionaries
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries)
	GetAlarmDictionaries(ctx context.Context, request GetAlarmDictionariesRequestObject) (GetAlarmDictionariesResponseObject, error)
	// Get an alarm dictionary
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries/{alarmDictionaryId})
	GetAlarmDictionary(ctx context.Context, request GetAlarmDictionaryRequestObject) (GetAlarmDictionaryResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureCluster/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get cluster resource types
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes)
	GetClusterResourceTypes(ctx context.Context, request GetClusterResourceTypesRequestObject) (GetClusterResourceTypesResponseObject, error)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId})
	GetClusterResourceType(ctx context.Context, request GetClusterResourceTypeRequestObject) (GetClusterResourceTypeResponseObject, error)
	// Get cluster resources
	// (GET /o2ims-infrastructureCluster/v1/clusterResources)
	GetClusterResources(ctx context.Context, request GetClusterResourcesRequestObject) (GetClusterResourcesResponseObject, error)
	// Get a cluster resource
	// (GET /o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId})
	GetClusterResource(ctx context.Context, request GetClusterResourceRequestObject) (GetClusterResourceResponseObject, error)
	// Get node cluster types
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes)
	GetNodeClusterTypes(ctx context.Context, request GetNodeClusterTypesRequestObject) (GetNodeClusterTypesResponseObject, error)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId})
	GetNodeClusterType(ctx context.Context, request GetNodeClusterTypeRequestObject) (GetNodeClusterTypeResponseObject, error)
	// Get an alarm dictionary for a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}/alarmDictionary)
	GetNodeClusterTypeAlarmDictionary(ctx context.Context, request GetNodeClusterTypeAlarmDictionaryRequestObject) (GetNodeClusterTypeAlarmDictionaryResponseObject, error)
	// Get node clusters
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters)
	GetNodeClusters(ctx context.Context, request GetNodeClustersRequestObject) (GetNodeClustersResponseObject, error)
	// Get a node cluster
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId})
	GetNodeCluster(ctx context.Context, request GetNodeClusterRequestObject) (GetNodeClusterResponseObject, error)
	// Get subscriptions
	// (GET /o2ims-infrastructureCluster/v1/subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create subscriptions
	// (POST /o2ims-infrastructureCluster/v1/subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete subscription
	// (DELETE /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Get subscription
	// (GET /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarmDictionaries operation middleware
func (sh *strictHandler) GetAlarmDictionaries(w http.ResponseWriter, r *http.Request, params GetAlarmDictionariesParams) {
	var request GetAlarmDictionariesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarmDictionaries(ctx, request.(GetAlarmDictionariesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarmDictionaries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmDictionariesResponseObject); ok {
		if err := validResponse.VisitGetAlarmDictionariesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarmDictionary operation middleware
func (sh *strictHandler) GetAlarmDictionary(w http.ResponseWriter, r *http.Request, alarmDictionaryId externalRef0.AlarmDictionaryId) {
	var request GetAlarmDictionaryRequestObject

	request.AlarmDictionaryId = alarmDictionaryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarmDictionary(ctx, request.(GetAlarmDictionaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarmDictionary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmDictionaryResponseObject); ok {
		if err := validResponse.VisitGetAlarmDictionaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceTypes operation middleware
func (sh *strictHandler) GetClusterResourceTypes(w http.ResponseWriter, r *http.Request, params GetClusterResourceTypesParams) {
	var request GetClusterResourceTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceTypes(ctx, request.(GetClusterResourceTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceTypesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceType operation middleware
func (sh *strictHandler) GetClusterResourceType(w http.ResponseWriter, r *http.Request, clusterResourceTypeId ClusterResourceTypeId) {
	var request GetClusterResourceTypeRequestObject

	request.ClusterResourceTypeId = clusterResourceTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceType(ctx, request.(GetClusterResourceTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceTypeResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResources operation middleware
func (sh *strictHandler) GetClusterResources(w http.ResponseWriter, r *http.Request, params GetClusterResourcesParams) {
	var request GetClusterResourcesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResources(ctx, request.(GetClusterResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourcesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResource operation middleware
func (sh *strictHandler) GetClusterResource(w http.ResponseWriter, r *http.Request, clusterResourceId ClusterResourceId) {
	var request GetClusterResourceRequestObject

	request.ClusterResourceId = clusterResourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResource(ctx, request.(GetClusterResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterTypes operation middleware
func (sh *strictHandler) GetNodeClusterTypes(w http.ResponseWriter, r *http.Request, params GetNodeClusterTypesParams) {
	var request GetNodeClusterTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterTypes(ctx, request.(GetNodeClusterTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypesResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterType operation middleware
func (sh *strictHandler) GetNodeClusterType(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId) {
	var request GetNodeClusterTypeRequestObject

	request.NodeClusterTypeId = nodeClusterTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterType(ctx, request.(GetNodeClusterTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypeResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterTypeAlarmDictionary operation middleware
func (sh *strictHandler) GetNodeClusterTypeAlarmDictionary(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId) {
	var request GetNodeClusterTypeAlarmDictionaryRequestObject

	request.NodeClusterTypeId = nodeClusterTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterTypeAlarmDictionary(ctx, request.(GetNodeClusterTypeAlarmDictionaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterTypeAlarmDictionary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypeAlarmDictionaryResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypeAlarmDictionaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusters operation middleware
func (sh *strictHandler) GetNodeClusters(w http.ResponseWriter, r *http.Request, params GetNodeClustersParams) {
	var request GetNodeClustersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusters(ctx, request.(GetNodeClustersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClustersResponseObject); ok {
		if err := validResponse.VisitGetNodeClustersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeCluster operation middleware
func (sh *strictHandler) GetNodeCluster(w http.ResponseWriter, r *http.Request, nodeClusterId NodeClusterId) {
	var request GetNodeClusterRequestObject

	request.NodeClusterId = nodeClusterId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeCluster(ctx, request.(GetNodeClusterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeCluster")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	var request DeleteSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId, params GetSubscriptionParams) {
	var request GetSubscriptionRequestObject

	request.SubscriptionId = subscriptionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Pf9/AAAA//+nUGuNRYUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
