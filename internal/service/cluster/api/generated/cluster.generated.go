//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for ClusterChangeNotificationNotificationEventType.
const (
	N0 ClusterChangeNotificationNotificationEventType = 0
	N1 ClusterChangeNotificationNotificationEventType = 1
	N2 ClusterChangeNotificationNotificationEventType = 2
)

// ClusterChangeNotification Information about an inventory change notification
type ClusterChangeNotification struct {
	// ConsumerSubscriptionId The value provided by the consumer in the subscription
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// NotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
	NotificationEventType ClusterChangeNotificationNotificationEventType `json:"notificationEventType"`

	// NotificationId A unique identifier to represent this notification event
	NotificationId openapi_types.UUID `json:"notificationId"`

	// ObjectRef The URL to the object. This is not required if the notificationEventType is 2 (DELETE). It will point to
	// one of the following data types defined in clause 3.2.6 and the reference will match the type of objects
	// supplied in priorObjectState and/or postObjectState.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PostObjectState This is required if the notificationEventType is 0 (CREATE) or 1 (MODIFY) and is one of the following data
	// types defined in clause 3.2.6 and will match the type of object in priorObjectState and/or the type
	// referred to in objectRef.
	PostObjectState *map[string]interface{} `json:"postObjectState,omitempty"`

	// PriorObjectState This is required if the notificationEventType is 1 (MODIFY) or 2 (DELETE) and is one of the following
	// data types defined in clause 3.2.6 and will match the type of object in postObjectState and/or the type
	// referred to in objectRef.
	PriorObjectState *map[string]interface{} `json:"priorObjectState,omitempty"`
}

// ClusterChangeNotificationNotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
type ClusterChangeNotificationNotificationEventType int

// ClusterResource Information about a Cluster Resource
type ClusterResource struct {
	// ArtifactResourceIds Identifiers for the artifact(s) which this resource is based on.
	ArtifactResourceIds *[]openapi_types.UUID `json:"artifactResourceIds,omitempty"`

	// ClusterResourceId Unique identifier for the ClusterResource instance
	ClusterResourceId openapi_types.UUID `json:"clusterResourceId"`

	// ClusterResourceTypeId Identifier for the ClusterResourceType for this resource.
	ClusterResourceTypeId openapi_types.UUID `json:"clusterResourceTypeId"`

	// Description Human readable description of the cluster resource.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Cluster Resource.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// MemberOf list of other ClusterResources which are linked together.
	MemberOf *[]string `json:"memberOf,omitempty"`

	// Name Name of the cluster resource
	Name string `json:"name"`

	// ResourceId Identifier for the inventory resource which this resource is mapped to
	ResourceId openapi_types.UUID `json:"resourceId"`
}

// ClusterResourceType Information about a Cluster Resource Type
type ClusterResourceType struct {
	// ClusterResourceTypeId Unique identifier for the ClusterResourceType instance
	ClusterResourceTypeId openapi_types.UUID `json:"clusterResourceTypeId"`

	// Description Human readable description of the Cluster Resource Type.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Cluster Resource Type.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the Cluster Resource Type
	Name string `json:"name"`
}

// NodeCluster Information about a Node Cluster
type NodeCluster struct {
	// ArtifactResourceId Identifier for the template artifact which this NodeCluster is based on.
	ArtifactResourceId openapi_types.UUID `json:"artifactResourceId"`

	// ClientNodeClusterId Unique identifier for the NodeCluster instance assigned by the consumer who requested its creation
	ClientNodeClusterId openapi_types.UUID `json:"clientNodeClusterId"`

	// ClusterDistributionDescription Human readable text identifying the method of distribution of ClusterResources over OCloud Sites.
	ClusterDistributionDescription string `json:"clusterDistributionDescription"`

	// ClusterResourceGroups Optional list node groups that comprise the cluster resources which compose the NodeCluster
	ClusterResourceGroups *[]openapi_types.UUID `json:"clusterResourceGroups,omitempty"`

	// ClusterResourceIds The list of cluster resource identifiers that are used to construct this NodeCluster.
	ClusterResourceIds []openapi_types.UUID `json:"clusterResourceIds"`

	// Description Human readable description of the NodeCluster.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the NodeCluster.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the NodeCluster.
	Name string `json:"name"`

	// NodeClusterId Unique identifier for the NodeClusterType instance
	NodeClusterId openapi_types.UUID `json:"nodeClusterId"`

	// NodeClusterTypeId Identifier for the NodeClusterType that this NodeCluster is.
	NodeClusterTypeId openapi_types.UUID `json:"nodeClusterTypeId"`
}

// NodeClusterType Information about a Node Cluster Type
type NodeClusterType struct {
	// Description Human readable description of the Node Cluster Type.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Node Cluster Type.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the Node Cluster Type
	Name string `json:"name"`

	// NodeClusterTypeId Unique identifier for the NodeClusterType instance
	NodeClusterTypeId openapi_types.UUID `json:"nodeClusterTypeId"`
}

// Subscription Information about an inventory subscription.
type Subscription struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the
	// InventoryEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionId Identifier for the Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionId *openapi_types.UUID `json:"subscriptionId,omitempty"`
}

// ClusterResourceId defines model for clusterResourceId.
type ClusterResourceId = openapi_types.UUID

// ClusterResourceTypeId defines model for clusterResourceTypeId.
type ClusterResourceTypeId = openapi_types.UUID

// NodeClusterId defines model for nodeClusterId.
type NodeClusterId = openapi_types.UUID

// NodeClusterTypeId defines model for nodeClusterTypeId.
type NodeClusterTypeId = openapi_types.UUID

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = openapi_types.UUID

// GetAlarmDictionariesParams defines parameters for GetAlarmDictionaries.
type GetAlarmDictionariesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetClusterResourceTypesParams defines parameters for GetClusterResourceTypes.
type GetClusterResourceTypesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetClusterResourcesParams defines parameters for GetClusterResources.
type GetClusterResourcesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetNodeClusterTypesParams defines parameters for GetNodeClusterTypes.
type GetNodeClusterTypesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetNodeClustersParams defines parameters for GetNodeClusters.
type GetNodeClustersParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureCluster/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get alarm dictionaries
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries)
	GetAlarmDictionaries(w http.ResponseWriter, r *http.Request, params GetAlarmDictionariesParams)
	// Get an alarm dictionary
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries/{alarmDictionaryId})
	GetAlarmDictionary(w http.ResponseWriter, r *http.Request, alarmDictionaryId externalRef0.AlarmDictionaryId)
	// Get minor API versions
	// (GET /o2ims-infrastructureCluster/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get cluster resource types
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes)
	GetClusterResourceTypes(w http.ResponseWriter, r *http.Request, params GetClusterResourceTypesParams)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId})
	GetClusterResourceType(w http.ResponseWriter, r *http.Request, clusterResourceTypeId ClusterResourceTypeId)
	// Get cluster resources
	// (GET /o2ims-infrastructureCluster/v1/clusterResources)
	GetClusterResources(w http.ResponseWriter, r *http.Request, params GetClusterResourcesParams)
	// Get a cluster resource
	// (GET /o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId})
	GetClusterResource(w http.ResponseWriter, r *http.Request, clusterResourceId ClusterResourceId)
	// Get node cluster types
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes)
	GetNodeClusterTypes(w http.ResponseWriter, r *http.Request, params GetNodeClusterTypesParams)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId})
	GetNodeClusterType(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId)
	// Get an alarm dictionary for a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}/alarmDictionary)
	GetNodeClusterTypeAlarmDictionary(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId)
	// Get node clusters
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters)
	GetNodeClusters(w http.ResponseWriter, r *http.Request, params GetNodeClustersParams)
	// Get a node cluster
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId})
	GetNodeCluster(w http.ResponseWriter, r *http.Request, nodeClusterId NodeClusterId)
	// Get subscriptions
	// (GET /o2ims-infrastructureCluster/v1/subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create subscriptions
	// (POST /o2ims-infrastructureCluster/v1/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete subscription
	// (DELETE /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
	// Get subscription
	// (GET /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarmDictionaries operation middleware
func (siw *ServerInterfaceWrapper) GetAlarmDictionaries(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmDictionariesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarmDictionaries(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarmDictionary operation middleware
func (siw *ServerInterfaceWrapper) GetAlarmDictionary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmDictionaryId" -------------
	var alarmDictionaryId externalRef0.AlarmDictionaryId

	err = runtime.BindStyledParameterWithOptions("simple", "alarmDictionaryId", r.PathValue("alarmDictionaryId"), &alarmDictionaryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmDictionaryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarmDictionary(w, r, alarmDictionaryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResourceTypes operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterResourceTypesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResourceType operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "clusterResourceTypeId" -------------
	var clusterResourceTypeId ClusterResourceTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterResourceTypeId", r.PathValue("clusterResourceTypeId"), &clusterResourceTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterResourceTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceType(w, r, clusterResourceTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResources operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterResourcesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResources(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResource operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "clusterResourceId" -------------
	var clusterResourceId ClusterResourceId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterResourceId", r.PathValue("clusterResourceId"), &clusterResourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterResourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResource(w, r, clusterResourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterTypes operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeClusterTypesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterType operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterTypeId" -------------
	var nodeClusterTypeId NodeClusterTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterTypeId", r.PathValue("nodeClusterTypeId"), &nodeClusterTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterType(w, r, nodeClusterTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterTypeAlarmDictionary operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterTypeAlarmDictionary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterTypeId" -------------
	var nodeClusterTypeId NodeClusterTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterTypeId", r.PathValue("nodeClusterTypeId"), &nodeClusterTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterTypeAlarmDictionary(w, r, nodeClusterTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusters operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusters(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeClustersParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeCluster operation middleware
func (siw *ServerInterfaceWrapper) GetNodeCluster(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterId" -------------
	var nodeClusterId NodeClusterId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterId", r.PathValue("nodeClusterId"), &nodeClusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeCluster(w, r, nodeClusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/alarmDictionaries", wrapper.GetAlarmDictionaries)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/alarmDictionaries/{alarmDictionaryId}", wrapper.GetAlarmDictionary)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResourceTypes", wrapper.GetClusterResourceTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId}", wrapper.GetClusterResourceType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResources", wrapper.GetClusterResources)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId}", wrapper.GetClusterResource)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes", wrapper.GetNodeClusterTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}", wrapper.GetNodeClusterType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}/alarmDictionary", wrapper.GetNodeClusterTypeAlarmDictionary)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusters", wrapper.GetNodeClusters)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId}", wrapper.GetNodeCluster)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId}", wrapper.GetSubscription)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionariesRequestObject struct {
	Params GetAlarmDictionariesParams
}

type GetAlarmDictionariesResponseObject interface {
	VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error
}

type GetAlarmDictionaries200JSONResponse []externalRef0.AlarmDictionary

func (response GetAlarmDictionaries200JSONResponse) VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionaries400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionaries400ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionaries500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionaries500ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionaryRequestObject struct {
	AlarmDictionaryId externalRef0.AlarmDictionaryId `json:"alarmDictionaryId"`
}

type GetAlarmDictionaryResponseObject interface {
	VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error
}

type GetAlarmDictionary200JSONResponse externalRef0.AlarmDictionary

func (response GetAlarmDictionary200JSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionary400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionary400ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionary404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionary404ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmDictionary500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarmDictionary500ApplicationProblemPlusJSONResponse) VisitGetAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypesRequestObject struct {
	Params GetClusterResourceTypesParams
}

type GetClusterResourceTypesResponseObject interface {
	VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error
}

type GetClusterResourceTypes200JSONResponse []ClusterResourceType

func (response GetClusterResourceTypes200JSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceTypes400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceTypes500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypeRequestObject struct {
	ClusterResourceTypeId ClusterResourceTypeId `json:"clusterResourceTypeId"`
}

type GetClusterResourceTypeResponseObject interface {
	VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error
}

type GetClusterResourceType200JSONResponse ClusterResourceType

func (response GetClusterResourceType200JSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType404ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourcesRequestObject struct {
	Params GetClusterResourcesParams
}

type GetClusterResourcesResponseObject interface {
	VisitGetClusterResourcesResponse(w http.ResponseWriter) error
}

type GetClusterResources200JSONResponse []ClusterResource

func (response GetClusterResources200JSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResources400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResources400ApplicationProblemPlusJSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResources500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResources500ApplicationProblemPlusJSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceRequestObject struct {
	ClusterResourceId ClusterResourceId `json:"clusterResourceId"`
}

type GetClusterResourceResponseObject interface {
	VisitGetClusterResourceResponse(w http.ResponseWriter) error
}

type GetClusterResource200JSONResponse ClusterResource

func (response GetClusterResource200JSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource404ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypesRequestObject struct {
	Params GetNodeClusterTypesParams
}

type GetNodeClusterTypesResponseObject interface {
	VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error
}

type GetNodeClusterTypes200JSONResponse []NodeClusterType

func (response GetNodeClusterTypes200JSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypes400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypes500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeRequestObject struct {
	NodeClusterTypeId NodeClusterTypeId `json:"nodeClusterTypeId"`
}

type GetNodeClusterTypeResponseObject interface {
	VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error
}

type GetNodeClusterType200JSONResponse NodeClusterType

func (response GetNodeClusterType200JSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionaryRequestObject struct {
	NodeClusterTypeId NodeClusterTypeId `json:"nodeClusterTypeId"`
}

type GetNodeClusterTypeAlarmDictionaryResponseObject interface {
	VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error
}

type GetNodeClusterTypeAlarmDictionary200JSONResponse externalRef0.AlarmDictionary

func (response GetNodeClusterTypeAlarmDictionary200JSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionary400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypeAlarmDictionary400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionary404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypeAlarmDictionary404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeAlarmDictionary500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypeAlarmDictionary500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeAlarmDictionaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClustersRequestObject struct {
	Params GetNodeClustersParams
}

type GetNodeClustersResponseObject interface {
	VisitGetNodeClustersResponse(w http.ResponseWriter) error
}

type GetNodeClusters200JSONResponse []NodeCluster

func (response GetNodeClusters200JSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusters400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusters400ApplicationProblemPlusJSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusters500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusters500ApplicationProblemPlusJSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterRequestObject struct {
	NodeClusterId NodeClusterId `json:"nodeClusterId"`
}

type GetNodeClusterResponseObject interface {
	VisitGetNodeClusterResponse(w http.ResponseWriter) error
}

type GetNodeCluster200JSONResponse NodeCluster

func (response GetNodeCluster200JSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse Subscription

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse Subscription

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureCluster/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get alarm dictionaries
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries)
	GetAlarmDictionaries(ctx context.Context, request GetAlarmDictionariesRequestObject) (GetAlarmDictionariesResponseObject, error)
	// Get an alarm dictionary
	// (GET /o2ims-infrastructureCluster/v1/alarmDictionaries/{alarmDictionaryId})
	GetAlarmDictionary(ctx context.Context, request GetAlarmDictionaryRequestObject) (GetAlarmDictionaryResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureCluster/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get cluster resource types
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes)
	GetClusterResourceTypes(ctx context.Context, request GetClusterResourceTypesRequestObject) (GetClusterResourceTypesResponseObject, error)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId})
	GetClusterResourceType(ctx context.Context, request GetClusterResourceTypeRequestObject) (GetClusterResourceTypeResponseObject, error)
	// Get cluster resources
	// (GET /o2ims-infrastructureCluster/v1/clusterResources)
	GetClusterResources(ctx context.Context, request GetClusterResourcesRequestObject) (GetClusterResourcesResponseObject, error)
	// Get a cluster resource
	// (GET /o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId})
	GetClusterResource(ctx context.Context, request GetClusterResourceRequestObject) (GetClusterResourceResponseObject, error)
	// Get node cluster types
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes)
	GetNodeClusterTypes(ctx context.Context, request GetNodeClusterTypesRequestObject) (GetNodeClusterTypesResponseObject, error)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId})
	GetNodeClusterType(ctx context.Context, request GetNodeClusterTypeRequestObject) (GetNodeClusterTypeResponseObject, error)
	// Get an alarm dictionary for a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}/alarmDictionary)
	GetNodeClusterTypeAlarmDictionary(ctx context.Context, request GetNodeClusterTypeAlarmDictionaryRequestObject) (GetNodeClusterTypeAlarmDictionaryResponseObject, error)
	// Get node clusters
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters)
	GetNodeClusters(ctx context.Context, request GetNodeClustersRequestObject) (GetNodeClustersResponseObject, error)
	// Get a node cluster
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId})
	GetNodeCluster(ctx context.Context, request GetNodeClusterRequestObject) (GetNodeClusterResponseObject, error)
	// Get subscriptions
	// (GET /o2ims-infrastructureCluster/v1/subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create subscriptions
	// (POST /o2ims-infrastructureCluster/v1/subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete subscription
	// (DELETE /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Get subscription
	// (GET /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarmDictionaries operation middleware
func (sh *strictHandler) GetAlarmDictionaries(w http.ResponseWriter, r *http.Request, params GetAlarmDictionariesParams) {
	var request GetAlarmDictionariesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarmDictionaries(ctx, request.(GetAlarmDictionariesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarmDictionaries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmDictionariesResponseObject); ok {
		if err := validResponse.VisitGetAlarmDictionariesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarmDictionary operation middleware
func (sh *strictHandler) GetAlarmDictionary(w http.ResponseWriter, r *http.Request, alarmDictionaryId externalRef0.AlarmDictionaryId) {
	var request GetAlarmDictionaryRequestObject

	request.AlarmDictionaryId = alarmDictionaryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarmDictionary(ctx, request.(GetAlarmDictionaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarmDictionary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmDictionaryResponseObject); ok {
		if err := validResponse.VisitGetAlarmDictionaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceTypes operation middleware
func (sh *strictHandler) GetClusterResourceTypes(w http.ResponseWriter, r *http.Request, params GetClusterResourceTypesParams) {
	var request GetClusterResourceTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceTypes(ctx, request.(GetClusterResourceTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceTypesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceType operation middleware
func (sh *strictHandler) GetClusterResourceType(w http.ResponseWriter, r *http.Request, clusterResourceTypeId ClusterResourceTypeId) {
	var request GetClusterResourceTypeRequestObject

	request.ClusterResourceTypeId = clusterResourceTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceType(ctx, request.(GetClusterResourceTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceTypeResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResources operation middleware
func (sh *strictHandler) GetClusterResources(w http.ResponseWriter, r *http.Request, params GetClusterResourcesParams) {
	var request GetClusterResourcesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResources(ctx, request.(GetClusterResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourcesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResource operation middleware
func (sh *strictHandler) GetClusterResource(w http.ResponseWriter, r *http.Request, clusterResourceId ClusterResourceId) {
	var request GetClusterResourceRequestObject

	request.ClusterResourceId = clusterResourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResource(ctx, request.(GetClusterResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterTypes operation middleware
func (sh *strictHandler) GetNodeClusterTypes(w http.ResponseWriter, r *http.Request, params GetNodeClusterTypesParams) {
	var request GetNodeClusterTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterTypes(ctx, request.(GetNodeClusterTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypesResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterType operation middleware
func (sh *strictHandler) GetNodeClusterType(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId) {
	var request GetNodeClusterTypeRequestObject

	request.NodeClusterTypeId = nodeClusterTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterType(ctx, request.(GetNodeClusterTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypeResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterTypeAlarmDictionary operation middleware
func (sh *strictHandler) GetNodeClusterTypeAlarmDictionary(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId) {
	var request GetNodeClusterTypeAlarmDictionaryRequestObject

	request.NodeClusterTypeId = nodeClusterTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterTypeAlarmDictionary(ctx, request.(GetNodeClusterTypeAlarmDictionaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterTypeAlarmDictionary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypeAlarmDictionaryResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypeAlarmDictionaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusters operation middleware
func (sh *strictHandler) GetNodeClusters(w http.ResponseWriter, r *http.Request, params GetNodeClustersParams) {
	var request GetNodeClustersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusters(ctx, request.(GetNodeClustersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClustersResponseObject); ok {
		if err := validResponse.VisitGetNodeClustersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeCluster operation middleware
func (sh *strictHandler) GetNodeCluster(w http.ResponseWriter, r *http.Request, nodeClusterId NodeClusterId) {
	var request GetNodeClusterRequestObject

	request.NodeClusterId = nodeClusterId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeCluster(ctx, request.(GetNodeClusterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeCluster")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	var request DeleteSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	var request GetSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
