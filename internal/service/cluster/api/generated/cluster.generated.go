//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for ClusterChangeNotificationNotificationEventType.
const (
	N0 ClusterChangeNotificationNotificationEventType = 0
	N1 ClusterChangeNotificationNotificationEventType = 1
	N2 ClusterChangeNotificationNotificationEventType = 2
)

// ClusterChangeNotification Information about an inventory change notification
type ClusterChangeNotification struct {
	// ConsumerSubscriptionId The value provided by the consumer in the subscription
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// NotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
	NotificationEventType ClusterChangeNotificationNotificationEventType `json:"notificationEventType"`

	// NotificationId A unique identifier to represent this notification event
	NotificationId openapi_types.UUID `json:"notificationId"`

	// ObjectRef The URL to the object. This is not required if the notificationEventType is 2 (DELETE). It will point to
	// one of the following data types defined in clause 3.2.6 and the reference will match the type of objects
	// supplied in priorObjectState and/or postObjectState.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PostObjectState This is required if the notificationEventType is 0 (CREATE) or 1 (MODIFY) and is one of the following data
	// types defined in clause 3.2.6 and will match the type of object in priorObjectState and/or the type
	// referred to in objectRef.
	PostObjectState *string `json:"postObjectState,omitempty"`

	// PriorObjectState This is required if the notificationEventType is 1 (MODIFY) or 2 (DELETE) and is one of the following
	// data types defined in clause 3.2.6 and will match the type of object in postObjectState and/or the type
	// referred to in objectRef.
	PriorObjectState *string `json:"priorObjectState,omitempty"`
}

// ClusterChangeNotificationNotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
type ClusterChangeNotificationNotificationEventType int

// ClusterResource Information about a Cluster Resource
type ClusterResource struct {
	// ArtifactResourceIds Identifiers for the artifact(s) which this resource is based on.
	ArtifactResourceIds *[]openapi_types.UUID `json:"artifactResourceIds,omitempty"`

	// ClusterResourceId Unique identifier for the ClusterResource instance
	ClusterResourceId openapi_types.UUID `json:"clusterResourceId"`

	// ClusterResourceTypeId Identifier for the ClusterResourceType for this resource.
	ClusterResourceTypeId openapi_types.UUID `json:"clusterResourceTypeId"`

	// Description Human readable description of the cluster resource.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Cluster Resource.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// MemberOf list of other ClusterResources which are linked together.
	MemberOf *[]string `json:"memberOf,omitempty"`

	// Name Name of the cluster resource
	Name string `json:"name"`

	// ResourceId Identifier for the inventory resource which this resource is mapped to
	ResourceId openapi_types.UUID `json:"resourceId"`
}

// ClusterResourceType Information about a Cluster Resource Type
type ClusterResourceType struct {
	// ClusterResourceTypeId Unique identifier for the ClusterResourceType instance
	ClusterResourceTypeId openapi_types.UUID `json:"clusterResourceTypeId"`

	// Description Human readable description of the Cluster Resource Type.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Cluster Resource Type.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the Cluster Resource Type
	Name string `json:"name"`
}

// NodeCluster Information about a Node Cluster
type NodeCluster struct {
	// ArtifactResourceId Identifier for the template artifact which this NodeCluster is based on.
	ArtifactResourceId openapi_types.UUID `json:"artifactResourceId"`

	// ClientNodeClusterId Unique identifier for the NodeCluster instance assigned by the consumer who requested its creation
	ClientNodeClusterId openapi_types.UUID `json:"clientNodeClusterId"`

	// ClusterDistributionDescription Human readable text identifying the method of distribution of ClusterResources over OCloud Sites.
	ClusterDistributionDescription string `json:"clusterDistributionDescription"`

	// ClusterResourceGroups Optional list node groups that comprise the cluster resources which compose the NodeCluster
	ClusterResourceGroups *[]openapi_types.UUID `json:"clusterResourceGroups,omitempty"`

	// ClusterResourceIds The list of cluster resource identifiers that are used to construct this NodeCluster.
	ClusterResourceIds []openapi_types.UUID `json:"clusterResourceIds"`

	// Description Human readable description of the NodeCluster.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the NodeCluster.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the NodeCluster.
	Name string `json:"name"`

	// NodeClusterId Unique identifier for the NodeClusterType instance
	NodeClusterId openapi_types.UUID `json:"nodeClusterId"`

	// NodeClusterTypeId Identifier for the NodeClusterType that this NodeCluster is.
	NodeClusterTypeId openapi_types.UUID `json:"nodeClusterTypeId"`
}

// NodeClusterType Information about a Node Cluster Type
type NodeClusterType struct {
	// Description Human readable description of the Node Cluster Type.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored extend the information
	// provided about the Node Cluster Type.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Name of the Node Cluster Type
	Name string `json:"name"`

	// NodeClusterTypeId Unique identifier for the NodeClusterType instance
	NodeClusterTypeId openapi_types.UUID `json:"nodeClusterTypeId"`
}

// Subscription Information about an inventory subscription.
type Subscription struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the
	// InventoryEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionId Identifier for the Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionId *openapi_types.UUID `json:"subscriptionId,omitempty"`
}

// ClusterResourceId defines model for clusterResourceId.
type ClusterResourceId = openapi_types.UUID

// ClusterResourceTypeId defines model for clusterResourceTypeId.
type ClusterResourceTypeId = openapi_types.UUID

// NodeClusterId defines model for nodeClusterId.
type NodeClusterId = openapi_types.UUID

// NodeClusterTypeId defines model for nodeClusterTypeId.
type NodeClusterTypeId = openapi_types.UUID

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = openapi_types.UUID

// GetClusterResourceTypesParams defines parameters for GetClusterResourceTypes.
type GetClusterResourceTypesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetClusterResourcesParams defines parameters for GetClusterResources.
type GetClusterResourcesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetNodeClusterTypesParams defines parameters for GetNodeClusterTypes.
type GetNodeClusterTypesParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetNodeClustersParams defines parameters for GetNodeClusters.
type GetNodeClustersParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetSubscriptionParams defines parameters for GetSubscription.
type GetSubscriptionParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureCluster/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /o2ims-infrastructureCluster/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get cluster resource types
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes)
	GetClusterResourceTypes(w http.ResponseWriter, r *http.Request, params GetClusterResourceTypesParams)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId})
	GetClusterResourceType(w http.ResponseWriter, r *http.Request, clusterResourceTypeId ClusterResourceTypeId)
	// Get cluster resources
	// (GET /o2ims-infrastructureCluster/v1/clusterResources)
	GetClusterResources(w http.ResponseWriter, r *http.Request, params GetClusterResourcesParams)
	// Get a cluster resource
	// (GET /o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId})
	GetClusterResource(w http.ResponseWriter, r *http.Request, clusterResourceId ClusterResourceId)
	// Get node cluster types
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes)
	GetNodeClusterTypes(w http.ResponseWriter, r *http.Request, params GetNodeClusterTypesParams)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId})
	GetNodeClusterType(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId)
	// Get node clusters
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters)
	GetNodeClusters(w http.ResponseWriter, r *http.Request, params GetNodeClustersParams)
	// Get a node cluster
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId})
	GetNodeCluster(w http.ResponseWriter, r *http.Request, nodeClusterId NodeClusterId)
	// Get subscriptions
	// (GET /o2ims-infrastructureCluster/v1/subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create subscriptions
	// (POST /o2ims-infrastructureCluster/v1/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete subscription
	// (DELETE /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
	// Get subscription
	// (GET /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId, params GetSubscriptionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResourceTypes operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterResourceTypesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResourceType operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "clusterResourceTypeId" -------------
	var clusterResourceTypeId ClusterResourceTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterResourceTypeId", r.PathValue("clusterResourceTypeId"), &clusterResourceTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterResourceTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceType(w, r, clusterResourceTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResources operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClusterResourcesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResources(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClusterResource operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "clusterResourceId" -------------
	var clusterResourceId ClusterResourceId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterResourceId", r.PathValue("clusterResourceId"), &clusterResourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterResourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResource(w, r, clusterResourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterTypes operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeClusterTypesParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusterType operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusterType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterTypeId" -------------
	var nodeClusterTypeId NodeClusterTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterTypeId", r.PathValue("nodeClusterTypeId"), &nodeClusterTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusterType(w, r, nodeClusterTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeClusters operation middleware
func (siw *ServerInterfaceWrapper) GetNodeClusters(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeClustersParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeClusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeCluster operation middleware
func (siw *ServerInterfaceWrapper) GetNodeCluster(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeClusterId" -------------
	var nodeClusterId NodeClusterId

	err = runtime.BindStyledParameterWithOptions("simple", "nodeClusterId", r.PathValue("nodeClusterId"), &nodeClusterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeClusterId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeCluster(w, r, nodeClusterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResourceTypes", wrapper.GetClusterResourceTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId}", wrapper.GetClusterResourceType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResources", wrapper.GetClusterResources)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId}", wrapper.GetClusterResource)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes", wrapper.GetNodeClusterTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId}", wrapper.GetNodeClusterType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusters", wrapper.GetNodeClusters)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId}", wrapper.GetNodeCluster)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId}", wrapper.GetSubscription)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypesRequestObject struct {
	Params GetClusterResourceTypesParams
}

type GetClusterResourceTypesResponseObject interface {
	VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error
}

type GetClusterResourceTypes200JSONResponse []ClusterResourceType

func (response GetClusterResourceTypes200JSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceTypes400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceTypes500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceTypeRequestObject struct {
	ClusterResourceTypeId ClusterResourceTypeId `json:"clusterResourceTypeId"`
}

type GetClusterResourceTypeResponseObject interface {
	VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error
}

type GetClusterResourceType200JSONResponse ClusterResourceType

func (response GetClusterResourceType200JSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType404ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResourceType500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourcesRequestObject struct {
	Params GetClusterResourcesParams
}

type GetClusterResourcesResponseObject interface {
	VisitGetClusterResourcesResponse(w http.ResponseWriter) error
}

type GetClusterResources200JSONResponse []ClusterResource

func (response GetClusterResources200JSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResources400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResources400ApplicationProblemPlusJSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResources500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResources500ApplicationProblemPlusJSONResponse) VisitGetClusterResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceRequestObject struct {
	ClusterResourceId ClusterResourceId `json:"clusterResourceId"`
}

type GetClusterResourceResponseObject interface {
	VisitGetClusterResourceResponse(w http.ResponseWriter) error
}

type GetClusterResource200JSONResponse ClusterResource

func (response GetClusterResource200JSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource400ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource404ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResource500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetClusterResource500ApplicationProblemPlusJSONResponse) VisitGetClusterResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypesRequestObject struct {
	Params GetNodeClusterTypesParams
}

type GetNodeClusterTypesResponseObject interface {
	VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error
}

type GetNodeClusterTypes200JSONResponse []NodeClusterType

func (response GetNodeClusterTypes200JSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypes400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterTypes500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterTypeRequestObject struct {
	NodeClusterTypeId NodeClusterTypeId `json:"nodeClusterTypeId"`
}

type GetNodeClusterTypeResponseObject interface {
	VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error
}

type GetNodeClusterType200JSONResponse NodeClusterType

func (response GetNodeClusterType200JSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusterType500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClustersRequestObject struct {
	Params GetNodeClustersParams
}

type GetNodeClustersResponseObject interface {
	VisitGetNodeClustersResponse(w http.ResponseWriter) error
}

type GetNodeClusters200JSONResponse []NodeCluster

func (response GetNodeClusters200JSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusters400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusters400ApplicationProblemPlusJSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusters500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeClusters500ApplicationProblemPlusJSONResponse) VisitGetNodeClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeClusterRequestObject struct {
	NodeClusterId NodeClusterId `json:"nodeClusterId"`
}

type GetNodeClusterResponseObject interface {
	VisitGetNodeClusterResponse(w http.ResponseWriter) error
}

type GetNodeCluster200JSONResponse NodeCluster

func (response GetNodeCluster200JSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster400ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster404ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeCluster500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetNodeCluster500ApplicationProblemPlusJSONResponse) VisitGetNodeClusterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse Subscription

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
	Params         GetSubscriptionParams
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse Subscription

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureCluster/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureCluster/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get cluster resource types
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes)
	GetClusterResourceTypes(ctx context.Context, request GetClusterResourceTypesRequestObject) (GetClusterResourceTypesResponseObject, error)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/clusterResourceTypes/{clusterResourceTypeId})
	GetClusterResourceType(ctx context.Context, request GetClusterResourceTypeRequestObject) (GetClusterResourceTypeResponseObject, error)
	// Get cluster resources
	// (GET /o2ims-infrastructureCluster/v1/clusterResources)
	GetClusterResources(ctx context.Context, request GetClusterResourcesRequestObject) (GetClusterResourcesResponseObject, error)
	// Get a cluster resource
	// (GET /o2ims-infrastructureCluster/v1/clusterResources/{clusterResourceId})
	GetClusterResource(ctx context.Context, request GetClusterResourceRequestObject) (GetClusterResourceResponseObject, error)
	// Get node cluster types
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes)
	GetNodeClusterTypes(ctx context.Context, request GetNodeClusterTypesRequestObject) (GetNodeClusterTypesResponseObject, error)
	// Get a node cluster type
	// (GET /o2ims-infrastructureCluster/v1/nodeClusterTypes/{nodeClusterTypeId})
	GetNodeClusterType(ctx context.Context, request GetNodeClusterTypeRequestObject) (GetNodeClusterTypeResponseObject, error)
	// Get node clusters
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters)
	GetNodeClusters(ctx context.Context, request GetNodeClustersRequestObject) (GetNodeClustersResponseObject, error)
	// Get a node cluster
	// (GET /o2ims-infrastructureCluster/v1/nodeClusters/{nodeClusterId})
	GetNodeCluster(ctx context.Context, request GetNodeClusterRequestObject) (GetNodeClusterResponseObject, error)
	// Get subscriptions
	// (GET /o2ims-infrastructureCluster/v1/subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create subscriptions
	// (POST /o2ims-infrastructureCluster/v1/subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete subscription
	// (DELETE /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Get subscription
	// (GET /o2ims-infrastructureCluster/v1/subscriptions/{subscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceTypes operation middleware
func (sh *strictHandler) GetClusterResourceTypes(w http.ResponseWriter, r *http.Request, params GetClusterResourceTypesParams) {
	var request GetClusterResourceTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceTypes(ctx, request.(GetClusterResourceTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceTypesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceType operation middleware
func (sh *strictHandler) GetClusterResourceType(w http.ResponseWriter, r *http.Request, clusterResourceTypeId ClusterResourceTypeId) {
	var request GetClusterResourceTypeRequestObject

	request.ClusterResourceTypeId = clusterResourceTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceType(ctx, request.(GetClusterResourceTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceTypeResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResources operation middleware
func (sh *strictHandler) GetClusterResources(w http.ResponseWriter, r *http.Request, params GetClusterResourcesParams) {
	var request GetClusterResourcesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResources(ctx, request.(GetClusterResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourcesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResource operation middleware
func (sh *strictHandler) GetClusterResource(w http.ResponseWriter, r *http.Request, clusterResourceId ClusterResourceId) {
	var request GetClusterResourceRequestObject

	request.ClusterResourceId = clusterResourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResource(ctx, request.(GetClusterResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterTypes operation middleware
func (sh *strictHandler) GetNodeClusterTypes(w http.ResponseWriter, r *http.Request, params GetNodeClusterTypesParams) {
	var request GetNodeClusterTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterTypes(ctx, request.(GetNodeClusterTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypesResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusterType operation middleware
func (sh *strictHandler) GetNodeClusterType(w http.ResponseWriter, r *http.Request, nodeClusterTypeId NodeClusterTypeId) {
	var request GetNodeClusterTypeRequestObject

	request.NodeClusterTypeId = nodeClusterTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusterType(ctx, request.(GetNodeClusterTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusterType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterTypeResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeClusters operation middleware
func (sh *strictHandler) GetNodeClusters(w http.ResponseWriter, r *http.Request, params GetNodeClustersParams) {
	var request GetNodeClustersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeClusters(ctx, request.(GetNodeClustersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeClusters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClustersResponseObject); ok {
		if err := validResponse.VisitGetNodeClustersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeCluster operation middleware
func (sh *strictHandler) GetNodeCluster(w http.ResponseWriter, r *http.Request, nodeClusterId NodeClusterId) {
	var request GetNodeClusterRequestObject

	request.NodeClusterId = nodeClusterId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeCluster(ctx, request.(GetNodeClusterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeCluster")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeClusterResponseObject); ok {
		if err := validResponse.VisitGetNodeClusterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	var request DeleteSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId, params GetSubscriptionParams) {
	var request GetSubscriptionRequestObject

	request.SubscriptionId = subscriptionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+f8DAAD///e3tc6iaAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
