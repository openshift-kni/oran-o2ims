// Code generated by MockGen. DO NOT EDIT.
// Source: object_handler.go
//
// Generated by this command:
//
//	mockgen -source=object_handler.go -package=service -destination=object_handler_mock.go
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockObjectHandler is a mock of ObjectHandler interface.
type MockObjectHandler struct {
	ctrl     *gomock.Controller
	recorder *MockObjectHandlerMockRecorder
}

// MockObjectHandlerMockRecorder is the mock recorder for MockObjectHandler.
type MockObjectHandlerMockRecorder struct {
	mock *MockObjectHandler
}

// NewMockObjectHandler creates a new mock instance.
func NewMockObjectHandler(ctrl *gomock.Controller) *MockObjectHandler {
	mock := &MockObjectHandler{ctrl: ctrl}
	mock.recorder = &MockObjectHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectHandler) EXPECT() *MockObjectHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockObjectHandler) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockObjectHandlerMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockObjectHandler)(nil).Get), ctx, request)
}
