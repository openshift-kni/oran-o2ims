//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for InventoryChangeNotificationNotificationEventType.
const (
	N0 InventoryChangeNotificationNotificationEventType = 0
	N1 InventoryChangeNotificationNotificationEventType = 1
	N2 InventoryChangeNotificationNotificationEventType = 2
)

// Defines values for ResourceTypeResourceClass.
const (
	ResourceTypeResourceClassCOMPUTE    ResourceTypeResourceClass = "COMPUTE"
	ResourceTypeResourceClassNETWORKING ResourceTypeResourceClass = "NETWORKING"
	ResourceTypeResourceClassSTORAGE    ResourceTypeResourceClass = "STORAGE"
	ResourceTypeResourceClassUNDEFINED  ResourceTypeResourceClass = "UNDEFINED"
)

// Defines values for ResourceTypeResourceKind.
const (
	ResourceTypeResourceKindLOGICAL   ResourceTypeResourceKind = "LOGICAL"
	ResourceTypeResourceKindPHYSICAL  ResourceTypeResourceKind = "PHYSICAL"
	ResourceTypeResourceKindUNDEFINED ResourceTypeResourceKind = "UNDEFINED"
)

// DeploymentManager Information about a deployment manager.
type DeploymentManager struct {
	// Capabilities Information about the capabilities supported by the Deployment Manager and its set of deployment management
	// services based on the resources allocated to the Deployment Manager.
	Capabilities map[string]string `json:"capabilities"`

	// Capacity Information about the available, allocated and reserved capacity of O-Cloud Resources allocated to the
	// Deployment Manager.
	Capacity map[string]string `json:"capacity"`

	// DeploymentManagerId Identifier for the Deployment Manager. This identifier is allocated by the O-Cloud.
	DeploymentManagerId openapi_types.UUID `json:"deploymentManagerId"`

	// Description Human readable description of the deployment manager
	Description string `json:"description"`

	// Extensions List of metadata key-value pairs used to associate meaningful metadata to the related Deployment Manager.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Human readable description of the deployment manager
	Name string `json:"name"`

	// OCloudId Identifier for the containing O-Cloud.
	OCloudId openapi_types.UUID `json:"oCloudId"`

	// ServiceUri The fully qualified URI to a Deployment Management server for O2dms services. Since the O2dms provides
	// multiple services, this entry is for the {apiRoot} only.
	ServiceUri string `json:"serviceUri"`

	// SupportedLocations List of globalLocationIDs that were assigned to the OCloud Site(s) which this Deployment Manager supports.
	SupportedLocations []string `json:"supportedLocations"`
}

// InventoryChangeNotification Information about an inventory change notification
type InventoryChangeNotification struct {
	// ConsumerSubscriptionId The value provided by the consumer in the subscription
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// NotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
	NotificationEventType InventoryChangeNotificationNotificationEventType `json:"notificationEventType"`

	// NotificationId A unique identifier to represent this notification event
	NotificationId openapi_types.UUID `json:"notificationId"`

	// ObjectRef The URL to the object. This is not required if the notificationEventType is 2 (DELETE). It will point to
	// one of the following data types defined in clause 3.2.6 and the reference will match the type of objects
	// supplied in priorObjectState and/or postObjectState.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PostObjectState This is required if the notificationEventType is 0 (CREATE) or 1 (MODIFY) and is one of the following data
	// types defined in clause 3.2.6 and will match the type of object in priorObjectState and/or the type
	// referred to in objectRef.
	PostObjectState *map[string]interface{} `json:"postObjectState,omitempty"`

	// PriorObjectState This is required if the notificationEventType is 1 (MODIFY) or 2 (DELETE) and is one of the following
	// data types defined in clause 3.2.6 and will match the type of object in postObjectState and/or the type
	// referred to in objectRef.
	PriorObjectState *map[string]interface{} `json:"priorObjectState,omitempty"`
}

// InventoryChangeNotificationNotificationEventType One of the following values: 0 - create, 1 - modify, 2 - delete
type InventoryChangeNotificationNotificationEventType int

// OCloudInfo defines model for OCloudInfo.
type OCloudInfo struct {
	// Description Human readable description of the O-Cloud as provided by the SMO at cloud genesis.
	Description string                  `json:"description"`
	Extensions  *map[string]interface{} `json:"extensions,omitempty"`

	// GlobalcloudId Identifier of the O-Cloud instance assigned by the SMO. This identifier is globally unique across O-Cloud
	// instances known to the SMO. This value was provided by the SMO at cloud genesis and is stored in the O-Cloud
	// IMS Inventory.
	GlobalcloudId openapi_types.UUID `json:"globalcloudId"`

	// Name Human readable name of the O-Cloud as identified by the SMO at cloud genesis.
	Name string `json:"name"`

	// OCloudId Identifier of the O-Cloud instance. Internally generated within an O-Cloud instance.
	OCloudId openapi_types.UUID `json:"oCloudId"`

	// ServiceUri The URI root to all services provided by the O2ims interface. Inventory is one of these services.
	ServiceUri string `json:"serviceUri"`
}

// Resource Information about a resource.
type Resource struct {
	// Description Human readable description of the resource.
	Description string `json:"description"`

	// Elements The resource might be composed of smaller resources or other resource instances of a different type
	Elements []Resource `json:"elements"`

	// Extensions List of metadata key-value pairs used to associate meaningful metadata to the related resource.
	Extensions map[string]interface{} `json:"extensions"`

	// GlobalAssetId Identifier or serial number of the resource, if available. It is required only if the resource has been
	// identified during its addition to the cloud as a reportable asset in the SMO inventory.
	GlobalAssetId string `json:"globalAssetId"`

	// Groups Keywords denoting groups a resource belongs to.
	Groups []string `json:"groups"`

	// ResourceId Identifier for the Resource. This identifier is allocated by the O-Cloud.
	ResourceId     openapi_types.UUID `json:"resourceId"`
	ResourcePoolId openapi_types.UUID `json:"resourcePoolId"`

	// ResourceTypeId Identifier for the Resource Type of this resource.
	ResourceTypeId openapi_types.UUID `json:"resourceTypeId"`

	// Tags Keywords describing or classifying the resource instance
	Tags []string `json:"tags"`
}

// ResourcePool Information about a resource pool.
type ResourcePool struct {
	// Description Human readable description of the resource pool.
	Description string `json:"description"`

	// Extensions List of metadata key-value pairs used to associate meaningful metadata to the related resource pool.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// GlobalLocationId This identifier is copied from the O-Cloud Id assigned by the SMO during the O-Cloud deployment
	GlobalLocationId openapi_types.UUID `json:"globalLocationId"`

	// Location Information about the geographical location of the resource pool as detected by the O-Cloud.
	Location *string `json:"location,omitempty"`

	// Name Human readable name of the resource pool.
	Name string `json:"name"`

	// OCloudId Identifier for the containing O-Cloud.
	OCloudId openapi_types.UUID `json:"oCloudId"`

	// ResourcePoolId Identifier for the Resource Pool in the O-Cloud instance. This identifier is allocated by the O-Cloud.
	ResourcePoolId openapi_types.UUID `json:"resourcePoolId"`
}

// ResourceType Information about a resource type.
type ResourceType struct {
	// AlarmDictionary Information about an alarm dictionary.
	AlarmDictionary *externalRef0.AlarmDictionary `json:"alarmDictionary,omitempty"`

	// Description Human readable description of the resource type.
	Description string `json:"description"`

	// Extensions List of metadata key-value pairs used to associate meaningful metadata to the related resource type.
	Extensions map[string]interface{} `json:"extensions"`

	// Model Information about the model of the resource as defined by its provider.
	Model string `json:"model"`

	// Name Human readable name of the resource type.
	Name string `json:"name"`

	// ResourceClass Functional role of the resource type within the cloud.
	ResourceClass ResourceTypeResourceClass `json:"resourceClass"`

	// ResourceKind Value describing “physicality” of the resource type.
	ResourceKind ResourceTypeResourceKind `json:"resourceKind"`

	// ResourceTypeId Identifier for the Resource Type. This identifier is allocated by the O-Cloud.
	ResourceTypeId openapi_types.UUID `json:"resourceTypeId"`

	// Vendor Provider of the Resource.
	Vendor string `json:"vendor"`

	// Version Version or generation of the resource as defined by its provider.
	Version string `json:"version"`
}

// ResourceTypeResourceClass Functional role of the resource type within the cloud.
type ResourceTypeResourceClass string

// ResourceTypeResourceKind Value describing “physicality” of the resource type.
type ResourceTypeResourceKind string

// Subscription Information about an inventory subscription.
type Subscription struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the
	// InventoryEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionId Identifier for the Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionId *openapi_types.UUID `json:"subscriptionId,omitempty"`
}

// DeploymentManagerId defines model for deploymentManagerId.
type DeploymentManagerId = openapi_types.UUID

// ResourceId defines model for resourceId.
type ResourceId = openapi_types.UUID

// ResourcePoolId defines model for resourcePoolId.
type ResourcePoolId = openapi_types.UUID

// ResourceTypeId defines model for resourceTypeId.
type ResourceTypeId = openapi_types.UUID

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = openapi_types.UUID

// GetCloudInfoParams defines parameters for GetCloudInfo.
type GetCloudInfoParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetDeploymentManagersParams defines parameters for GetDeploymentManagers.
type GetDeploymentManagersParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetResourcePoolsParams defines parameters for GetResourcePools.
type GetResourcePoolsParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetResourcesParams defines parameters for GetResources.
type GetResourcesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetResourceTypesParams defines parameters for GetResourceTypes.
type GetResourceTypesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureInventory/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get O-Cloud info
	// (GET /o2ims-infrastructureInventory/v1)
	GetCloudInfo(w http.ResponseWriter, r *http.Request, params GetCloudInfoParams)
	// Get minor API versions
	// (GET /o2ims-infrastructureInventory/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get deployment managers
	// (GET /o2ims-infrastructureInventory/v1/deploymentManagers)
	GetDeploymentManagers(w http.ResponseWriter, r *http.Request, params GetDeploymentManagersParams)
	// Get deployment manager
	// (GET /o2ims-infrastructureInventory/v1/deploymentManagers/{deploymentManagerId})
	GetDeploymentManager(w http.ResponseWriter, r *http.Request, deploymentManagerId DeploymentManagerId)
	// Get resource pools
	// (GET /o2ims-infrastructureInventory/v1/resourcePools)
	GetResourcePools(w http.ResponseWriter, r *http.Request, params GetResourcePoolsParams)
	// Get a resource pool
	// (GET /o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId})
	GetResourcePool(w http.ResponseWriter, r *http.Request, resourcePoolId ResourcePoolId)
	// Get resources in a resource pool
	// (GET /o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}/resources)
	GetResources(w http.ResponseWriter, r *http.Request, resourcePoolId ResourcePoolId, params GetResourcesParams)
	// Get a resource in a resource pool
	// (GET /o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}/resources/{resourceId})
	GetResource(w http.ResponseWriter, r *http.Request, resourcePoolId ResourcePoolId, resourceId ResourceId)
	// Get resource types
	// (GET /o2ims-infrastructureInventory/v1/resourceTypes)
	GetResourceTypes(w http.ResponseWriter, r *http.Request, params GetResourceTypesParams)
	// Get a resource type
	// (GET /o2ims-infrastructureInventory/v1/resourceTypes/{resourceTypeId})
	GetResourceType(w http.ResponseWriter, r *http.Request, resourceTypeId ResourceTypeId)
	// Get subscriptions
	// (GET /o2ims-infrastructureInventory/v1/subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create subscriptions
	// (POST /o2ims-infrastructureInventory/v1/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete subscription
	// (DELETE /o2ims-infrastructureInventory/v1/subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
	// Get subscription
	// (GET /o2ims-infrastructureInventory/v1/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCloudInfo operation middleware
func (siw *ServerInterfaceWrapper) GetCloudInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCloudInfoParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCloudInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDeploymentManagers operation middleware
func (siw *ServerInterfaceWrapper) GetDeploymentManagers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeploymentManagersParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeploymentManagers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDeploymentManager operation middleware
func (siw *ServerInterfaceWrapper) GetDeploymentManager(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "deploymentManagerId" -------------
	var deploymentManagerId DeploymentManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentManagerId", r.PathValue("deploymentManagerId"), &deploymentManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deploymentManagerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeploymentManager(w, r, deploymentManagerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePools operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePools(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcePoolsParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePools(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePool operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId ResourcePoolId

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePool(w, r, resourcePoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResources operation middleware
func (siw *ServerInterfaceWrapper) GetResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId ResourcePoolId

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResources(w, r, resourcePoolId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResource operation middleware
func (siw *ServerInterfaceWrapper) GetResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId ResourcePoolId

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceId ResourceId

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", r.PathValue("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResource(w, r, resourcePoolId, resourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceTypes operation middleware
func (siw *ServerInterfaceWrapper) GetResourceTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceTypesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceType operation middleware
func (siw *ServerInterfaceWrapper) GetResourceType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "resourceTypeId" -------------
	var resourceTypeId ResourceTypeId

	err = runtime.BindStyledParameterWithOptions("simple", "resourceTypeId", r.PathValue("resourceTypeId"), &resourceTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceTypeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceType(w, r, resourceTypeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1", wrapper.GetCloudInfo)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/deploymentManagers", wrapper.GetDeploymentManagers)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/deploymentManagers/{deploymentManagerId}", wrapper.GetDeploymentManager)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/resourcePools", wrapper.GetResourcePools)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}", wrapper.GetResourcePool)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}/resources", wrapper.GetResources)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}/resources/{resourceId}", wrapper.GetResource)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/resourceTypes", wrapper.GetResourceTypes)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/resourceTypes/{resourceTypeId}", wrapper.GetResourceType)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/subscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureInventory/v1/subscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureInventory/v1/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureInventory/v1/subscriptions/{subscriptionId}", wrapper.GetSubscription)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudInfoRequestObject struct {
	Params GetCloudInfoParams
}

type GetCloudInfoResponseObject interface {
	VisitGetCloudInfoResponse(w http.ResponseWriter) error
}

type GetCloudInfo200JSONResponse OCloudInfo

func (response GetCloudInfo200JSONResponse) VisitGetCloudInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudInfo400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetCloudInfo400ApplicationProblemPlusJSONResponse) VisitGetCloudInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCloudInfo500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetCloudInfo500ApplicationProblemPlusJSONResponse) VisitGetCloudInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManagersRequestObject struct {
	Params GetDeploymentManagersParams
}

type GetDeploymentManagersResponseObject interface {
	VisitGetDeploymentManagersResponse(w http.ResponseWriter) error
}

type GetDeploymentManagers200JSONResponse []DeploymentManager

func (response GetDeploymentManagers200JSONResponse) VisitGetDeploymentManagersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManagers400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetDeploymentManagers400ApplicationProblemPlusJSONResponse) VisitGetDeploymentManagersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManagers500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetDeploymentManagers500ApplicationProblemPlusJSONResponse) VisitGetDeploymentManagersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManagerRequestObject struct {
	DeploymentManagerId DeploymentManagerId `json:"deploymentManagerId"`
}

type GetDeploymentManagerResponseObject interface {
	VisitGetDeploymentManagerResponse(w http.ResponseWriter) error
}

type GetDeploymentManager200JSONResponse DeploymentManager

func (response GetDeploymentManager200JSONResponse) VisitGetDeploymentManagerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManager400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetDeploymentManager400ApplicationProblemPlusJSONResponse) VisitGetDeploymentManagerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManager404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetDeploymentManager404ApplicationProblemPlusJSONResponse) VisitGetDeploymentManagerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDeploymentManager500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetDeploymentManager500ApplicationProblemPlusJSONResponse) VisitGetDeploymentManagerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolsRequestObject struct {
	Params GetResourcePoolsParams
}

type GetResourcePoolsResponseObject interface {
	VisitGetResourcePoolsResponse(w http.ResponseWriter) error
}

type GetResourcePools200JSONResponse []ResourcePool

func (response GetResourcePools200JSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourcePools400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourcePools500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolRequestObject struct {
	ResourcePoolId ResourcePoolId `json:"resourcePoolId"`
}

type GetResourcePoolResponseObject interface {
	VisitGetResourcePoolResponse(w http.ResponseWriter) error
}

type GetResourcePool200JSONResponse ResourcePool

func (response GetResourcePool200JSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourcePool400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourcePool404ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourcePool500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcesRequestObject struct {
	ResourcePoolId ResourcePoolId `json:"resourcePoolId"`
	Params         GetResourcesParams
}

type GetResourcesResponseObject interface {
	VisitGetResourcesResponse(w http.ResponseWriter) error
}

type GetResources200JSONResponse []Resource

func (response GetResources200JSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResources400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResources400ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResources404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResources404ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResources500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResources500ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceRequestObject struct {
	ResourcePoolId ResourcePoolId `json:"resourcePoolId"`
	ResourceId     ResourceId     `json:"resourceId"`
}

type GetResourceResponseObject interface {
	VisitGetResourceResponse(w http.ResponseWriter) error
}

type GetResource200JSONResponse Resource

func (response GetResource200JSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResource400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResource400ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResource404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResource404ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResource500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResource500ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceTypesRequestObject struct {
	Params GetResourceTypesParams
}

type GetResourceTypesResponseObject interface {
	VisitGetResourceTypesResponse(w http.ResponseWriter) error
}

type GetResourceTypes200JSONResponse []ResourceType

func (response GetResourceTypes200JSONResponse) VisitGetResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceTypes400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourceTypes400ApplicationProblemPlusJSONResponse) VisitGetResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceTypes500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourceTypes500ApplicationProblemPlusJSONResponse) VisitGetResourceTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceTypeRequestObject struct {
	ResourceTypeId ResourceTypeId `json:"resourceTypeId"`
}

type GetResourceTypeResponseObject interface {
	VisitGetResourceTypeResponse(w http.ResponseWriter) error
}

type GetResourceType200JSONResponse ResourceType

func (response GetResourceType200JSONResponse) VisitGetResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceType400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourceType400ApplicationProblemPlusJSONResponse) VisitGetResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceType404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourceType404ApplicationProblemPlusJSONResponse) VisitGetResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceType500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetResourceType500ApplicationProblemPlusJSONResponse) VisitGetResourceTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse Subscription

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse Subscription

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureInventory/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get O-Cloud info
	// (GET /o2ims-infrastructureInventory/v1)
	GetCloudInfo(ctx context.Context, request GetCloudInfoRequestObject) (GetCloudInfoResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureInventory/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get deployment managers
	// (GET /o2ims-infrastructureInventory/v1/deploymentManagers)
	GetDeploymentManagers(ctx context.Context, request GetDeploymentManagersRequestObject) (GetDeploymentManagersResponseObject, error)
	// Get deployment manager
	// (GET /o2ims-infrastructureInventory/v1/deploymentManagers/{deploymentManagerId})
	GetDeploymentManager(ctx context.Context, request GetDeploymentManagerRequestObject) (GetDeploymentManagerResponseObject, error)
	// Get resource pools
	// (GET /o2ims-infrastructureInventory/v1/resourcePools)
	GetResourcePools(ctx context.Context, request GetResourcePoolsRequestObject) (GetResourcePoolsResponseObject, error)
	// Get a resource pool
	// (GET /o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId})
	GetResourcePool(ctx context.Context, request GetResourcePoolRequestObject) (GetResourcePoolResponseObject, error)
	// Get resources in a resource pool
	// (GET /o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}/resources)
	GetResources(ctx context.Context, request GetResourcesRequestObject) (GetResourcesResponseObject, error)
	// Get a resource in a resource pool
	// (GET /o2ims-infrastructureInventory/v1/resourcePools/{resourcePoolId}/resources/{resourceId})
	GetResource(ctx context.Context, request GetResourceRequestObject) (GetResourceResponseObject, error)
	// Get resource types
	// (GET /o2ims-infrastructureInventory/v1/resourceTypes)
	GetResourceTypes(ctx context.Context, request GetResourceTypesRequestObject) (GetResourceTypesResponseObject, error)
	// Get a resource type
	// (GET /o2ims-infrastructureInventory/v1/resourceTypes/{resourceTypeId})
	GetResourceType(ctx context.Context, request GetResourceTypeRequestObject) (GetResourceTypeResponseObject, error)
	// Get subscriptions
	// (GET /o2ims-infrastructureInventory/v1/subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create subscriptions
	// (POST /o2ims-infrastructureInventory/v1/subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete subscription
	// (DELETE /o2ims-infrastructureInventory/v1/subscriptions/{subscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Get subscription
	// (GET /o2ims-infrastructureInventory/v1/subscriptions/{subscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCloudInfo operation middleware
func (sh *strictHandler) GetCloudInfo(w http.ResponseWriter, r *http.Request, params GetCloudInfoParams) {
	var request GetCloudInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCloudInfo(ctx, request.(GetCloudInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCloudInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCloudInfoResponseObject); ok {
		if err := validResponse.VisitGetCloudInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeploymentManagers operation middleware
func (sh *strictHandler) GetDeploymentManagers(w http.ResponseWriter, r *http.Request, params GetDeploymentManagersParams) {
	var request GetDeploymentManagersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeploymentManagers(ctx, request.(GetDeploymentManagersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeploymentManagers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDeploymentManagersResponseObject); ok {
		if err := validResponse.VisitGetDeploymentManagersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeploymentManager operation middleware
func (sh *strictHandler) GetDeploymentManager(w http.ResponseWriter, r *http.Request, deploymentManagerId DeploymentManagerId) {
	var request GetDeploymentManagerRequestObject

	request.DeploymentManagerId = deploymentManagerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeploymentManager(ctx, request.(GetDeploymentManagerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeploymentManager")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDeploymentManagerResponseObject); ok {
		if err := validResponse.VisitGetDeploymentManagerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePools operation middleware
func (sh *strictHandler) GetResourcePools(w http.ResponseWriter, r *http.Request, params GetResourcePoolsParams) {
	var request GetResourcePoolsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePools(ctx, request.(GetResourcePoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePools")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolsResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePool operation middleware
func (sh *strictHandler) GetResourcePool(w http.ResponseWriter, r *http.Request, resourcePoolId ResourcePoolId) {
	var request GetResourcePoolRequestObject

	request.ResourcePoolId = resourcePoolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePool(ctx, request.(GetResourcePoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResources operation middleware
func (sh *strictHandler) GetResources(w http.ResponseWriter, r *http.Request, resourcePoolId ResourcePoolId, params GetResourcesParams) {
	var request GetResourcesRequestObject

	request.ResourcePoolId = resourcePoolId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResources(ctx, request.(GetResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcesResponseObject); ok {
		if err := validResponse.VisitGetResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResource operation middleware
func (sh *strictHandler) GetResource(w http.ResponseWriter, r *http.Request, resourcePoolId ResourcePoolId, resourceId ResourceId) {
	var request GetResourceRequestObject

	request.ResourcePoolId = resourcePoolId
	request.ResourceId = resourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResource(ctx, request.(GetResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourceResponseObject); ok {
		if err := validResponse.VisitGetResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourceTypes operation middleware
func (sh *strictHandler) GetResourceTypes(w http.ResponseWriter, r *http.Request, params GetResourceTypesParams) {
	var request GetResourceTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourceTypes(ctx, request.(GetResourceTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourceTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourceTypesResponseObject); ok {
		if err := validResponse.VisitGetResourceTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourceType operation middleware
func (sh *strictHandler) GetResourceType(w http.ResponseWriter, r *http.Request, resourceTypeId ResourceTypeId) {
	var request GetResourceTypeRequestObject

	request.ResourceTypeId = resourceTypeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourceType(ctx, request.(GetResourceTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourceType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourceTypeResponseObject); ok {
		if err := validResponse.VisitGetResourceTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	var request DeleteSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	var request GetSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8Pi/AQAA//8mekafX4sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
