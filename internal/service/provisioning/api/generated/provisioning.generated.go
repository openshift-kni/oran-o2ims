//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for ProvisioningStatusProvisioningPhase.
const (
	Deleting    ProvisioningStatusProvisioningPhase = "deleting"
	Failed      ProvisioningStatusProvisioningPhase = "failed"
	Fulfilled   ProvisioningStatusProvisioningPhase = "fulfilled"
	Pending     ProvisioningStatusProvisioningPhase = "pending"
	Progressing ProvisioningStatusProvisioningPhase = "progressing"
)

// ProvisionedResourceSets The resources that have been successfully provisioned as part of the provisioning process.
type ProvisionedResourceSets struct {
	// NodeClusterId Identifier of the NodeCluster that has been provisioned.
	NodeClusterId *openapi_types.UUID `json:"nodeClusterId,omitempty"`
}

// ProvisioningRequestData Input parameters for a provisioning request.
type ProvisioningRequestData struct {
	// Description Human readable description of the provisioning request.
	Description string `json:"description"`

	// Name Human readable name of the provisioning request.
	Name string `json:"name"`

	// ProvisioningRequestId Identifier for the provisioning request. This identifier is assigned by the SMO.
	ProvisioningRequestId openapi_types.UUID `json:"provisioningRequestId"`

	// TemplateName Name of the template used for the provisioning request.
	TemplateName string `json:"templateName"`

	// TemplateParameters Input Parameters that conform to the OpenAPI V3 schema defined in the template.
	TemplateParameters map[string]interface{} `json:"templateParameters"`

	// TemplateVersion Version of the template used for the provisioning request.
	TemplateVersion string `json:"templateVersion"`
}

// ProvisioningRequestInfo Information about a provisioning request.
type ProvisioningRequestInfo struct {
	// ProvisionedResourceSets The resources that have been successfully provisioned as part of the provisioning process.
	ProvisionedResourceSets ProvisionedResourceSets `json:"provisionedResourceSets"`

	// ProvisioningRequestData Input parameters for a provisioning request.
	ProvisioningRequestData ProvisioningRequestData `json:"provisioningRequestData"`

	// ProvisioningRequestReference Unique reference of the provisioning request assigned by O-Cloud.
	ProvisioningRequestReference *openapi_types.UUID `json:"provisioningRequestReference,omitempty"`

	// Status Details about the status of the provisioning request.
	Status ProvisioningStatus `json:"status"`
}

// ProvisioningStatus Details about the status of the provisioning request.
type ProvisioningStatus struct {
	// Message Message describing the status of the provisioning request.
	Message *string `json:"message,omitempty"`

	// ProvisioningPhase Current state of the provisioning request.
	ProvisioningPhase *ProvisioningStatusProvisioningPhase `json:"provisioningPhase,omitempty"`

	// UpdateTime Timestamp indicating the last time the status of the provisioning request was updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// ProvisioningStatusProvisioningPhase Current state of the provisioning request.
type ProvisioningStatusProvisioningPhase string

// ProvisioningRequestId defines model for provisioningRequestId.
type ProvisioningRequestId = openapi_types.UUID

// GetProvisioningRequestsParams defines parameters for GetProvisioningRequests.
type GetProvisioningRequestsParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateProvisioningRequestJSONRequestBody defines body for CreateProvisioningRequest for application/json ContentType.
type CreateProvisioningRequestJSONRequestBody = ProvisioningRequestData

// UpdateProvisioningRequestJSONRequestBody defines body for UpdateProvisioningRequest for application/json ContentType.
type UpdateProvisioningRequestJSONRequestBody = ProvisioningRequestData

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureProvisioning/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /o2ims-infrastructureProvisioning/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get provisioning requests
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	GetProvisioningRequests(w http.ResponseWriter, r *http.Request, params GetProvisioningRequestsParams)
	// Create a provisioning request
	// (POST /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	CreateProvisioningRequest(w http.ResponseWriter, r *http.Request)
	// Delete a provisioning request
	// (DELETE /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
	// Get the provisioning request
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	GetProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
	// Update a provisioning request
	// (PUT /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProvisioningRequests operation middleware
func (siw *ServerInterfaceWrapper) GetProvisioningRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvisioningRequestsParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvisioningRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProvisioningRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) GetProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests", wrapper.GetProvisioningRequests)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests", wrapper.CreateProvisioningRequest)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.DeleteProvisioningRequest)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.GetProvisioningRequest)
	m.HandleFunc("PUT "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.UpdateProvisioningRequest)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions401ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions403ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions401ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions403ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequestsRequestObject struct {
	Params GetProvisioningRequestsParams
}

type GetProvisioningRequestsResponseObject interface {
	VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error
}

type GetProvisioningRequests200JSONResponse []ProvisioningRequestInfo

func (response GetProvisioningRequests200JSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests400ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests401ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests403ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests500ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequestRequestObject struct {
	Body *CreateProvisioningRequestJSONRequestBody
}

type CreateProvisioningRequestResponseObject interface {
	VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error
}

type CreateProvisioningRequest201JSONResponse ProvisioningRequestInfo

func (response CreateProvisioningRequest201JSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest401ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest403ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest409ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
}

type DeleteProvisioningRequestResponseObject interface {
	VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error
}

type DeleteProvisioningRequest200Response struct {
}

func (response DeleteProvisioningRequest200Response) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteProvisioningRequest401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest401ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequest403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest403ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
}

type GetProvisioningRequestResponseObject interface {
	VisitGetProvisioningRequestResponse(w http.ResponseWriter) error
}

type GetProvisioningRequest200JSONResponse ProvisioningRequestInfo

func (response GetProvisioningRequest200JSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest401ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest403ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
	Body                  *UpdateProvisioningRequestJSONRequestBody
}

type UpdateProvisioningRequestResponseObject interface {
	VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error
}

type UpdateProvisioningRequest200JSONResponse ProvisioningRequestInfo

func (response UpdateProvisioningRequest200JSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest401ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest403ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest412ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest422ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest422ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureProvisioning/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureProvisioning/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get provisioning requests
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	GetProvisioningRequests(ctx context.Context, request GetProvisioningRequestsRequestObject) (GetProvisioningRequestsResponseObject, error)
	// Create a provisioning request
	// (POST /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	CreateProvisioningRequest(ctx context.Context, request CreateProvisioningRequestRequestObject) (CreateProvisioningRequestResponseObject, error)
	// Delete a provisioning request
	// (DELETE /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	DeleteProvisioningRequest(ctx context.Context, request DeleteProvisioningRequestRequestObject) (DeleteProvisioningRequestResponseObject, error)
	// Get the provisioning request
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	GetProvisioningRequest(ctx context.Context, request GetProvisioningRequestRequestObject) (GetProvisioningRequestResponseObject, error)
	// Update a provisioning request
	// (PUT /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	UpdateProvisioningRequest(ctx context.Context, request UpdateProvisioningRequestRequestObject) (UpdateProvisioningRequestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvisioningRequests operation middleware
func (sh *strictHandler) GetProvisioningRequests(w http.ResponseWriter, r *http.Request, params GetProvisioningRequestsParams) {
	var request GetProvisioningRequestsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvisioningRequests(ctx, request.(GetProvisioningRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvisioningRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProvisioningRequestsResponseObject); ok {
		if err := validResponse.VisitGetProvisioningRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProvisioningRequest operation middleware
func (sh *strictHandler) CreateProvisioningRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateProvisioningRequestRequestObject

	var body CreateProvisioningRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProvisioningRequest(ctx, request.(CreateProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitCreateProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProvisioningRequest operation middleware
func (sh *strictHandler) DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request DeleteProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProvisioningRequest(ctx, request.(DeleteProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitDeleteProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvisioningRequest operation middleware
func (sh *strictHandler) GetProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request GetProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvisioningRequest(ctx, request.(GetProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitGetProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProvisioningRequest operation middleware
func (sh *strictHandler) UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request UpdateProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	var body UpdateProvisioningRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProvisioningRequest(ctx, request.(UpdateProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitUpdateProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
