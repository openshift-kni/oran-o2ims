//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for ProvisioningStatusProvisioningPhase.
const (
	Deleting    ProvisioningStatusProvisioningPhase = "deleting"
	Failed      ProvisioningStatusProvisioningPhase = "failed"
	Fulfilled   ProvisioningStatusProvisioningPhase = "fulfilled"
	Pending     ProvisioningStatusProvisioningPhase = "pending"
	Progressing ProvisioningStatusProvisioningPhase = "progressing"
)

// ProvisionedResourceSets The resources that have been successfully provisioned as part of the provisioning process.
type ProvisionedResourceSets struct {
	// NodeClusterId Identifier of the NodeCluster that has been provisioned.
	NodeClusterId *openapi_types.UUID `json:"nodeClusterId,omitempty"`
}

// ProvisioningRequest Information about a provisioning request.
type ProvisioningRequest struct {
	// Description Human readable description of the provisioning request.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Provisioning Request.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Human readable name of the provisioning request.
	Name string `json:"name"`

	// ProvisioningRequestId Identifier for the provisioning request. This identifier is assigned by the SMO.
	ProvisioningRequestId openapi_types.UUID `json:"provisioningRequestId"`

	// Status Status of the provisioning request.
	Status *ProvisioningRequestStatus `json:"status,omitempty"`

	// TemplateName Name of the template used for the provisioning request.
	TemplateName string `json:"templateName"`

	// TemplateParameters Input Parameters that conform to the OpenAPI V3 schema defined in the template.
	TemplateParameters map[string]interface{} `json:"templateParameters"`

	// TemplateVersion Version of the template used for the provisioning request.
	TemplateVersion string `json:"templateVersion"`
}

// ProvisioningRequestStatus Status of the provisioning request.
type ProvisioningRequestStatus struct {
	// ProvisionedResourceSets The resources that have been successfully provisioned as part of the provisioning process.
	ProvisionedResourceSets *ProvisionedResourceSets `json:"provisionedResourceSets,omitempty"`

	// ProvisioningStatus Details about the status of the provisioning request.
	ProvisioningStatus ProvisioningStatus `json:"provisioningStatus"`
}

// ProvisioningStatus Details about the status of the provisioning request.
type ProvisioningStatus struct {
	// Message Message describing the status of the provisioning request.
	Message *string `json:"message,omitempty"`

	// ProvisioningPhase Current state of the provisioning request.
	ProvisioningPhase *ProvisioningStatusProvisioningPhase `json:"provisioningPhase,omitempty"`

	// UpdateTime Timestamp indicating the last time the status of the provisioning request was updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// ProvisioningStatusProvisioningPhase Current state of the provisioning request.
type ProvisioningStatusProvisioningPhase string

// ProvisioningRequestId defines model for provisioningRequestId.
type ProvisioningRequestId = openapi_types.UUID

// GetProvisioningRequestsParams defines parameters for GetProvisioningRequests.
type GetProvisioningRequestsParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateProvisioningRequestJSONRequestBody defines body for CreateProvisioningRequest for application/json ContentType.
type CreateProvisioningRequestJSONRequestBody = ProvisioningRequest

// UpdateProvisioningRequestJSONRequestBody defines body for UpdateProvisioningRequest for application/json ContentType.
type UpdateProvisioningRequestJSONRequestBody = ProvisioningRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureProvisioning/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /o2ims-infrastructureProvisioning/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get provisioning requests
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	GetProvisioningRequests(w http.ResponseWriter, r *http.Request, params GetProvisioningRequestsParams)
	// Create a provisioning request
	// (POST /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	CreateProvisioningRequest(w http.ResponseWriter, r *http.Request)
	// Delete a provisioning request
	// (DELETE /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
	// Get the provisioning request
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	GetProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
	// Update a provisioning request
	// (PUT /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProvisioningRequests operation middleware
func (siw *ServerInterfaceWrapper) GetProvisioningRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvisioningRequestsParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvisioningRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProvisioningRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) GetProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests", wrapper.GetProvisioningRequests)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests", wrapper.CreateProvisioningRequest)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.DeleteProvisioningRequest)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.GetProvisioningRequest)
	m.HandleFunc("PUT "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.UpdateProvisioningRequest)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequestsRequestObject struct {
	Params GetProvisioningRequestsParams
}

type GetProvisioningRequestsResponseObject interface {
	VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error
}

type GetProvisioningRequests200JSONResponse []ProvisioningRequest

func (response GetProvisioningRequests200JSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests400ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests500ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequestRequestObject struct {
	Body *CreateProvisioningRequestJSONRequestBody
}

type CreateProvisioningRequestResponseObject interface {
	VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error
}

type CreateProvisioningRequest201JSONResponse ProvisioningRequest

func (response CreateProvisioningRequest201JSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest409ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
}

type DeleteProvisioningRequestResponseObject interface {
	VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error
}

type DeleteProvisioningRequest200Response struct {
}

func (response DeleteProvisioningRequest200Response) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
}

type GetProvisioningRequestResponseObject interface {
	VisitGetProvisioningRequestResponse(w http.ResponseWriter) error
}

type GetProvisioningRequest200JSONResponse ProvisioningRequest

func (response GetProvisioningRequest200JSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
	Body                  *UpdateProvisioningRequestJSONRequestBody
}

type UpdateProvisioningRequestResponseObject interface {
	VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error
}

type UpdateProvisioningRequest200JSONResponse ProvisioningRequest

func (response UpdateProvisioningRequest200JSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest412ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureProvisioning/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureProvisioning/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get provisioning requests
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	GetProvisioningRequests(ctx context.Context, request GetProvisioningRequestsRequestObject) (GetProvisioningRequestsResponseObject, error)
	// Create a provisioning request
	// (POST /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	CreateProvisioningRequest(ctx context.Context, request CreateProvisioningRequestRequestObject) (CreateProvisioningRequestResponseObject, error)
	// Delete a provisioning request
	// (DELETE /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	DeleteProvisioningRequest(ctx context.Context, request DeleteProvisioningRequestRequestObject) (DeleteProvisioningRequestResponseObject, error)
	// Get the provisioning request
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	GetProvisioningRequest(ctx context.Context, request GetProvisioningRequestRequestObject) (GetProvisioningRequestResponseObject, error)
	// Update a provisioning request
	// (PUT /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	UpdateProvisioningRequest(ctx context.Context, request UpdateProvisioningRequestRequestObject) (UpdateProvisioningRequestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvisioningRequests operation middleware
func (sh *strictHandler) GetProvisioningRequests(w http.ResponseWriter, r *http.Request, params GetProvisioningRequestsParams) {
	var request GetProvisioningRequestsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvisioningRequests(ctx, request.(GetProvisioningRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvisioningRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProvisioningRequestsResponseObject); ok {
		if err := validResponse.VisitGetProvisioningRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProvisioningRequest operation middleware
func (sh *strictHandler) CreateProvisioningRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateProvisioningRequestRequestObject

	var body CreateProvisioningRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProvisioningRequest(ctx, request.(CreateProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitCreateProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProvisioningRequest operation middleware
func (sh *strictHandler) DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request DeleteProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProvisioningRequest(ctx, request.(DeleteProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitDeleteProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvisioningRequest operation middleware
func (sh *strictHandler) GetProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request GetProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvisioningRequest(ctx, request.(GetProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitGetProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProvisioningRequest operation middleware
func (sh *strictHandler) UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request UpdateProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	var body UpdateProvisioningRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProvisioningRequest(ctx, request.(UpdateProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitUpdateProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
