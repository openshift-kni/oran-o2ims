// Code generated by MockGen. DO NOT EDIT.
// Source: alarms_repository_interface.go
//
// Generated by this command:
//
//	mockgen -source=alarms_repository_interface.go -destination=generated/mock_repo.generated.go -package=generated
//
// Package generated is a generated GoMock package.
package generated

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	generated "github.com/openshift-kni/oran-o2ims/internal/service/alarms/api/generated"
	models "github.com/openshift-kni/oran-o2ims/internal/service/alarms/internal/db/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAlarmRepositoryInterface is a mock of AlarmRepositoryInterface interface.
type MockAlarmRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmRepositoryInterfaceMockRecorder
}

// MockAlarmRepositoryInterfaceMockRecorder is the mock recorder for MockAlarmRepositoryInterface.
type MockAlarmRepositoryInterfaceMockRecorder struct {
	mock *MockAlarmRepositoryInterface
}

// NewMockAlarmRepositoryInterface creates a new mock instance.
func NewMockAlarmRepositoryInterface(ctrl *gomock.Controller) *MockAlarmRepositoryInterface {
	mock := &MockAlarmRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAlarmRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlarmRepositoryInterface) EXPECT() *MockAlarmRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateAlarmSubscription mocks base method.
func (m *MockAlarmRepositoryInterface) CreateAlarmSubscription(ctx context.Context, record models.AlarmSubscription) (*models.AlarmSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlarmSubscription", ctx, record)
	ret0, _ := ret[0].(*models.AlarmSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlarmSubscription indicates an expected call of CreateAlarmSubscription.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) CreateAlarmSubscription(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlarmSubscription", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).CreateAlarmSubscription), ctx, record)
}

// CreateServiceConfiguration mocks base method.
func (m *MockAlarmRepositoryInterface) CreateServiceConfiguration(ctx context.Context, defaultRetentionPeriod int) (*models.ServiceConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceConfiguration", ctx, defaultRetentionPeriod)
	ret0, _ := ret[0].(*models.ServiceConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceConfiguration indicates an expected call of CreateServiceConfiguration.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) CreateServiceConfiguration(ctx, defaultRetentionPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceConfiguration", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).CreateServiceConfiguration), ctx, defaultRetentionPeriod)
}

// DeleteAlarmDefinitionsNotIn mocks base method.
func (m *MockAlarmRepositoryInterface) DeleteAlarmDefinitionsNotIn(ctx context.Context, ids []any, objectTypeID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlarmDefinitionsNotIn", ctx, ids, objectTypeID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlarmDefinitionsNotIn indicates an expected call of DeleteAlarmDefinitionsNotIn.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) DeleteAlarmDefinitionsNotIn(ctx, ids, objectTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmDefinitionsNotIn", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).DeleteAlarmDefinitionsNotIn), ctx, ids, objectTypeID)
}

// DeleteAlarmDictionariesNotIn mocks base method.
func (m *MockAlarmRepositoryInterface) DeleteAlarmDictionariesNotIn(ctx context.Context, ids []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlarmDictionariesNotIn", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlarmDictionariesNotIn indicates an expected call of DeleteAlarmDictionariesNotIn.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) DeleteAlarmDictionariesNotIn(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmDictionariesNotIn", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).DeleteAlarmDictionariesNotIn), ctx, ids)
}

// DeleteAlarmSubscription mocks base method.
func (m *MockAlarmRepositoryInterface) DeleteAlarmSubscription(ctx context.Context, id uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlarmSubscription", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlarmSubscription indicates an expected call of DeleteAlarmSubscription.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) DeleteAlarmSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmSubscription", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).DeleteAlarmSubscription), ctx, id)
}

// GetAlarmDefinition mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmDefinition(ctx context.Context, id uuid.UUID) (*models.AlarmDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmDefinition", ctx, id)
	ret0, _ := ret[0].(*models.AlarmDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmDefinition indicates an expected call of GetAlarmDefinition.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmDefinition", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmDefinition), ctx, id)
}

// GetAlarmDefinitions mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmDefinitions(ctx context.Context, am *generated.AlertmanagerNotification, clusterMap map[uuid.UUID]uuid.UUID) ([]models.AlarmDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmDefinitions", ctx, am, clusterMap)
	ret0, _ := ret[0].([]models.AlarmDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmDefinitions indicates an expected call of GetAlarmDefinitions.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmDefinitions(ctx, am, clusterMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmDefinitions", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmDefinitions), ctx, am, clusterMap)
}

// GetAlarmEventRecord mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmEventRecord(ctx context.Context, id uuid.UUID) (*models.AlarmEventRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventRecord", ctx, id)
	ret0, _ := ret[0].(*models.AlarmEventRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventRecord indicates an expected call of GetAlarmEventRecord.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmEventRecord(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventRecord", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmEventRecord), ctx, id)
}

// GetAlarmEventRecords mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmEventRecords(ctx context.Context) ([]models.AlarmEventRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventRecords", ctx)
	ret0, _ := ret[0].([]models.AlarmEventRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventRecords indicates an expected call of GetAlarmEventRecords.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmEventRecords(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventRecords", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmEventRecords), ctx)
}

// GetAlarmSubscription mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmSubscription(ctx context.Context, id uuid.UUID) (*models.AlarmSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmSubscription", ctx, id)
	ret0, _ := ret[0].(*models.AlarmSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmSubscription indicates an expected call of GetAlarmSubscription.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmSubscription", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmSubscription), ctx, id)
}

// GetAlarmSubscriptions mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmSubscriptions(ctx context.Context) ([]models.AlarmSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmSubscriptions", ctx)
	ret0, _ := ret[0].([]models.AlarmSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmSubscriptions indicates an expected call of GetAlarmSubscriptions.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmSubscriptions", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmSubscriptions), ctx)
}

// GetAlarmsForSubscription mocks base method.
func (m *MockAlarmRepositoryInterface) GetAlarmsForSubscription(ctx context.Context, subscription models.AlarmSubscription) ([]models.AlarmEventRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForSubscription", ctx, subscription)
	ret0, _ := ret[0].([]models.AlarmEventRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForSubscription indicates an expected call of GetAlarmsForSubscription.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetAlarmsForSubscription(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForSubscription", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetAlarmsForSubscription), ctx, subscription)
}

// GetMaxAlarmSeq mocks base method.
func (m *MockAlarmRepositoryInterface) GetMaxAlarmSeq(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxAlarmSeq", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxAlarmSeq indicates an expected call of GetMaxAlarmSeq.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetMaxAlarmSeq(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxAlarmSeq", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetMaxAlarmSeq), ctx)
}

// GetServiceConfigurations mocks base method.
func (m *MockAlarmRepositoryInterface) GetServiceConfigurations(ctx context.Context) ([]models.ServiceConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceConfigurations", ctx)
	ret0, _ := ret[0].([]models.ServiceConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceConfigurations indicates an expected call of GetServiceConfigurations.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) GetServiceConfigurations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceConfigurations", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).GetServiceConfigurations), ctx)
}

// PatchAlarmEventRecordACK mocks base method.
func (m *MockAlarmRepositoryInterface) PatchAlarmEventRecordACK(ctx context.Context, id uuid.UUID, record *models.AlarmEventRecord) (*models.AlarmEventRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchAlarmEventRecordACK", ctx, id, record)
	ret0, _ := ret[0].(*models.AlarmEventRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchAlarmEventRecordACK indicates an expected call of PatchAlarmEventRecordACK.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) PatchAlarmEventRecordACK(ctx, id, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAlarmEventRecordACK", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).PatchAlarmEventRecordACK), ctx, id, record)
}

// ResolveNotificationIfNotInCurrent mocks base method.
func (m *MockAlarmRepositoryInterface) ResolveNotificationIfNotInCurrent(ctx context.Context, am *generated.AlertmanagerNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNotificationIfNotInCurrent", ctx, am)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveNotificationIfNotInCurrent indicates an expected call of ResolveNotificationIfNotInCurrent.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) ResolveNotificationIfNotInCurrent(ctx, am any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNotificationIfNotInCurrent", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).ResolveNotificationIfNotInCurrent), ctx, am)
}

// UpdateServiceConfiguration mocks base method.
func (m *MockAlarmRepositoryInterface) UpdateServiceConfiguration(ctx context.Context, id uuid.UUID, record *models.ServiceConfiguration) (*models.ServiceConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceConfiguration", ctx, id, record)
	ret0, _ := ret[0].(*models.ServiceConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceConfiguration indicates an expected call of UpdateServiceConfiguration.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) UpdateServiceConfiguration(ctx, id, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceConfiguration", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).UpdateServiceConfiguration), ctx, id, record)
}

// UpdateSubscriptionEventCursor mocks base method.
func (m *MockAlarmRepositoryInterface) UpdateSubscriptionEventCursor(ctx context.Context, subscription models.AlarmSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionEventCursor", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscriptionEventCursor indicates an expected call of UpdateSubscriptionEventCursor.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) UpdateSubscriptionEventCursor(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionEventCursor", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).UpdateSubscriptionEventCursor), ctx, subscription)
}

// UpsertAlarmDefinitions mocks base method.
func (m *MockAlarmRepositoryInterface) UpsertAlarmDefinitions(ctx context.Context, records []models.AlarmDefinition) ([]models.AlarmDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAlarmDefinitions", ctx, records)
	ret0, _ := ret[0].([]models.AlarmDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAlarmDefinitions indicates an expected call of UpsertAlarmDefinitions.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) UpsertAlarmDefinitions(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlarmDefinitions", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).UpsertAlarmDefinitions), ctx, records)
}

// UpsertAlarmDictionary mocks base method.
func (m *MockAlarmRepositoryInterface) UpsertAlarmDictionary(ctx context.Context, record models.AlarmDictionary) ([]models.AlarmDictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAlarmDictionary", ctx, record)
	ret0, _ := ret[0].([]models.AlarmDictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAlarmDictionary indicates an expected call of UpsertAlarmDictionary.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) UpsertAlarmDictionary(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlarmDictionary", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).UpsertAlarmDictionary), ctx, record)
}

// UpsertAlarmEventRecord mocks base method.
func (m *MockAlarmRepositoryInterface) UpsertAlarmEventRecord(ctx context.Context, records []models.AlarmEventRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAlarmEventRecord", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAlarmEventRecord indicates an expected call of UpsertAlarmEventRecord.
func (mr *MockAlarmRepositoryInterfaceMockRecorder) UpsertAlarmEventRecord(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlarmEventRecord", reflect.TypeOf((*MockAlarmRepositoryInterface)(nil).UpsertAlarmEventRecord), ctx, records)
}
