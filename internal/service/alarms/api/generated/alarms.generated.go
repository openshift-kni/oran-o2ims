//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for AlarmEventNotificationNotificationEventType.
const (
	ACKNOWLEDGE AlarmEventNotificationNotificationEventType = 3
	CHANGE      AlarmEventNotificationNotificationEventType = 1
	CLEAR       AlarmEventNotificationNotificationEventType = 2
	NEW         AlarmEventNotificationNotificationEventType = 0
)

// Defines values for AlertmanagerNotificationStatus.
const (
	Firing   AlertmanagerNotificationStatus = "firing"
	Resolved AlertmanagerNotificationStatus = "resolved"
)

// Defines values for PerceivedSeverity.
const (
	CLEARED       PerceivedSeverity = 5
	CRITICAL      PerceivedSeverity = 0
	INDETERMINATE PerceivedSeverity = 4
	MAJOR         PerceivedSeverity = 1
	MINOR         PerceivedSeverity = 2
	WARNING       PerceivedSeverity = 3
)

// AlarmEventNotification Alarm Event Notification sent to subscribers
type AlarmEventNotification struct {
	// AlarmAcknowledgeTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmAcknowledgeTime *time.Time `json:"alarmAcknowledgeTime,omitempty"`

	// AlarmAcknowledged Boolean value indicating of a management system has acknowledged the alarm.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmChangedTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmChangedTime time.Time `json:"alarmChangedTime"`

	// AlarmDefinitionID A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced ResourceType.
	AlarmDefinitionID openapi_types.UUID `json:"alarmDefinitionID"`

	// AlarmEventRecordId The URL to the AlarmEventRecord object.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime Date/Time stamp value when the AlarmEventRecord has been created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// ConsumerSubscriptionId The value provided by the consumer in the subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// GlobalCloudID The global cloud identifier assigned by the SMO.e
	GlobalCloudID openapi_types.UUID `json:"globalCloudID"`

	// NotificationEventType Notification event type values
	NotificationEventType AlarmEventNotificationNotificationEventType `json:"notificationEventType"`

	// ObjectRef The URL to the AlarmEventRecord object.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseID A reference to the ProbableCause of the Alarm.
	ProbableCauseID openapi_types.UUID `json:"probableCauseID"`

	// ResourceID A reference to the resource instance which caused the alarm.
	ResourceID openapi_types.UUID `json:"resourceID"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventNotificationNotificationEventType Notification event type values
type AlarmEventNotificationNotificationEventType int

// AlarmEventRecord defines model for AlarmEventRecord.
type AlarmEventRecord struct {
	// AlarmAcknowledged When a system acknowledges an alarm, it is then set to TRUE.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmAcknowledgedTime This field is populated with a Date/Time stamp value when the alarm condition is acknowledged.
	AlarmAcknowledgedTime *time.Time `json:"alarmAcknowledgedTime,omitempty"`

	// AlarmChangedTime This field is populated with a Date/Time stamp value when any value
	// of the AlarmEventRecord is modified.
	AlarmChangedTime *time.Time `json:"alarmChangedTime,omitempty"`

	// AlarmClearedTime This field is populated with a Date/Time stamp value when the alarm condition is cleared.
	AlarmClearedTime *time.Time `json:"alarmClearedTime,omitempty"`

	// AlarmDefinitionId A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced Resource Type.
	AlarmDefinitionId openapi_types.UUID `json:"alarmDefinitionId"`

	// AlarmEventRecordId Identifier of an entry in the AlarmEventRecord.
	// Locally unique within the scope of an O-Cloud instance.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime This field is populated with a Date/Time stamp value when the AlarmEventRecord is created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseId A reference to the ProbableCause of the Alarm.
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventRecordModifications defines model for AlarmEventRecordModifications.
type AlarmEventRecordModifications struct {
	// AlarmAcknowledged Acknowledge an alarm.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`
}

// AlarmSubscriptionInfo defines model for AlarmSubscriptionInfo.
type AlarmSubscriptionInfo struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the AlarmEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	// Only the attributes in AlarmEventRecord are filterable.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionID Identifier for the Alarm Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionID *openapi_types.UUID `json:"subscriptionID,omitempty"`
}

// AlertmanagerNotification Alertmanager notification payload as described here https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
type AlertmanagerNotification struct {
	Alerts []struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		EndsAt      *time.Time         `json:"endsAt,omitempty"`

		// Fingerprint Fingerprint to identify the alert
		Fingerprint *string `json:"fingerprint,omitempty"`

		// GeneratorURL Identifies the entity that caused the alert
		GeneratorURL *string            `json:"generatorURL,omitempty"`
		Labels       *map[string]string `json:"labels,omitempty"`
		StartsAt     *time.Time         `json:"startsAt,omitempty"`

		// Status Alertmanager notification status
		Status *AlertmanagerNotificationStatus `json:"status,omitempty"`
	} `json:"alerts"`
	CommonAnnotations *map[string]string `json:"commonAnnotations,omitempty"`
	CommonLabels      *map[string]string `json:"commonLabels,omitempty"`

	// ExternalURL Backlink to the Alertmanager
	ExternalURL *string `json:"externalURL,omitempty"`

	// GroupKey Key identifying the group of alerts (e.g. to deduplicate)
	GroupKey    string             `json:"groupKey"`
	GroupLabels *map[string]string `json:"groupLabels,omitempty"`
	Receiver    string             `json:"receiver"`

	// Status Alertmanager notification status
	Status AlertmanagerNotificationStatus `json:"status"`

	// Subscriber Optional subscriber information, if a subscriber is found
	Subscriber *struct {
		// CallbackUrl URL to call for notifying the subscriber
		CallbackUrl *string `json:"callbackUrl,omitempty"`
	} `json:"subscriber,omitempty"`

	// TruncatedAlerts How many alerts have been truncated due to "max_alerts"
	TruncatedAlerts *int   `json:"truncatedAlerts,omitempty"`
	Version         string `json:"version"`
}

// AlertmanagerNotificationStatus Alertmanager notification status
type AlertmanagerNotificationStatus string

// HardwareAlert Placeholder for hardware alert schema
type HardwareAlert = map[string]interface{}

// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
type PerceivedSeverity int

// ProbableCause defines model for ProbableCause.
type ProbableCause struct {
	// Description Any additional information beyond the name to describe the probableCause derived from corresponding AlarmDefinition.
	Description string `json:"description"`

	// Name Human readable text of the probable cause derived from corresponding AlarmDefinition.
	Name string `json:"name"`

	// ProbableCauseId Identifier of the ProbableCause.
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = AlarmSubscriptionInfo

// AckAlarmJSONRequestBody defines body for AckAlarm for application/json ContentType.
type AckAlarmJSONRequestBody = AlarmEventRecordModifications

// AmNotificationJSONRequestBody defines body for AmNotification for application/json ContentType.
type AmNotificationJSONRequestBody = AlertmanagerNotification

// HwNotificationJSONRequestBody defines body for HwNotification for application/json ContentType.
type HwNotificationJSONRequestBody = HardwareAlert

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the list of alarm subscriptions
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create a new alarm subscription
	// (POST /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete exactly one subscription
	// (DELETE /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve exactly one subscription
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve the list of alarms
	// (GET /O2ims_infrastructureMonitoring/v1/alarms)
	GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams)
	// Retrieve exactly one alarm
	// (GET /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Modify exactly one alarm to acknowledge
	// (PATCH /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	AckAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Retrieve all probable causes
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses)
	GetProbableCauses(w http.ResponseWriter, r *http.Request)
	// Retrieve exactly one probable cause
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses/{probableCauseId})
	GetProbableCause(w http.ResponseWriter, r *http.Request, probableCauseId openapi_types.UUID)
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(w http.ResponseWriter, r *http.Request)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarms operation middleware
func (siw *ServerInterfaceWrapper) GetAlarms(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarms(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarm operation middleware
func (siw *ServerInterfaceWrapper) GetAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AckAlarm operation middleware
func (siw *ServerInterfaceWrapper) AckAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AckAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbableCauses operation middleware
func (siw *ServerInterfaceWrapper) GetProbableCauses(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbableCauses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbableCause operation middleware
func (siw *ServerInterfaceWrapper) GetProbableCause(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "probableCauseId" -------------
	var probableCauseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "probableCauseId", r.PathValue("probableCauseId"), &probableCauseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "probableCauseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbableCause(w, r, probableCauseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AmNotification operation middleware
func (siw *ServerInterfaceWrapper) AmNotification(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AmNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HwNotification operation middleware
func (siw *ServerInterfaceWrapper) HwNotification(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwVendorName" -------------
	var hwVendorName string

	err = runtime.BindStyledParameterWithOptions("simple", "hwVendorName", r.PathValue("hwVendorName"), &hwVendorName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwVendorName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HwNotification(w, r, hwVendorName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.GetSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarms", wrapper.GetAlarms)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.GetAlarm)
	m.HandleFunc("PATCH "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.AckAlarm)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/probableCauses", wrapper.GetProbableCauses)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/probableCauses/{probableCauseId}", wrapper.GetProbableCause)
	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/caas-alerts/alertmanager", wrapper.AmNotification)
	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/hardware-alerts/{hwVendorName}", wrapper.HwNotification)

	return m
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []AlarmSubscriptionInfo

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse AlarmSubscriptionInfo

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription204Response struct {
}

func (response DeleteSubscription204Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse AlarmSubscriptionInfo

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmsRequestObject struct {
	Params GetAlarmsParams
}

type GetAlarmsResponseObject interface {
	VisitGetAlarmsResponse(w http.ResponseWriter) error
}

type GetAlarms200JSONResponse []AlarmEventRecord

func (response GetAlarms200JSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms400ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms403ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms500ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
}

type GetAlarmResponseObject interface {
	VisitGetAlarmResponse(w http.ResponseWriter) error
}

type GetAlarm200JSONResponse AlarmEventRecord

func (response GetAlarm200JSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm400ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm404ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm500ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
	Body               *AckAlarmJSONRequestBody
}

type AckAlarmResponseObject interface {
	VisitAckAlarmResponse(w http.ResponseWriter) error
}

type AckAlarm200JSONResponse AlarmEventRecordModifications

func (response AckAlarm200JSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AckAlarm400ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AckAlarm404ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AckAlarm409ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AckAlarm412ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AckAlarm500ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCausesRequestObject struct {
}

type GetProbableCausesResponseObject interface {
	VisitGetProbableCausesResponse(w http.ResponseWriter) error
}

type GetProbableCauses200JSONResponse []ProbableCause

func (response GetProbableCauses200JSONResponse) VisitGetProbableCausesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCauses500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCauses500ApplicationProblemPlusJSONResponse) VisitGetProbableCausesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCauseRequestObject struct {
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`
}

type GetProbableCauseResponseObject interface {
	VisitGetProbableCauseResponse(w http.ResponseWriter) error
}

type GetProbableCause200JSONResponse ProbableCause

func (response GetProbableCause200JSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCause400ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCause404ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCause500ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AmNotificationRequestObject struct {
	Body *AmNotificationJSONRequestBody
}

type AmNotificationResponseObject interface {
	VisitAmNotificationResponse(w http.ResponseWriter) error
}

type AmNotification200Response struct {
}

func (response AmNotification200Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AmNotification400Response struct {
}

func (response AmNotification400Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AmNotification500Response struct {
}

func (response AmNotification500Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HwNotificationRequestObject struct {
	HwVendorName string `json:"hwVendorName"`
	Body         *HwNotificationJSONRequestBody
}

type HwNotificationResponseObject interface {
	VisitHwNotificationResponse(w http.ResponseWriter) error
}

type HwNotification200Response struct {
}

func (response HwNotification200Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HwNotification400Response struct {
}

func (response HwNotification400Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HwNotification500Response struct {
}

func (response HwNotification500Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve the list of alarm subscriptions
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create a new alarm subscription
	// (POST /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete exactly one subscription
	// (DELETE /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Retrieve exactly one subscription
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
	// Retrieve the list of alarms
	// (GET /O2ims_infrastructureMonitoring/v1/alarms)
	GetAlarms(ctx context.Context, request GetAlarmsRequestObject) (GetAlarmsResponseObject, error)
	// Retrieve exactly one alarm
	// (GET /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(ctx context.Context, request GetAlarmRequestObject) (GetAlarmResponseObject, error)
	// Modify exactly one alarm to acknowledge
	// (PATCH /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	AckAlarm(ctx context.Context, request AckAlarmRequestObject) (AckAlarmResponseObject, error)
	// Retrieve all probable causes
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses)
	GetProbableCauses(ctx context.Context, request GetProbableCausesRequestObject) (GetProbableCausesResponseObject, error)
	// Retrieve exactly one probable cause
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses/{probableCauseId})
	GetProbableCause(ctx context.Context, request GetProbableCauseRequestObject) (GetProbableCauseResponseObject, error)
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(ctx context.Context, request AmNotificationRequestObject) (AmNotificationResponseObject, error)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(ctx context.Context, request HwNotificationRequestObject) (HwNotificationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request DeleteSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request GetSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarms operation middleware
func (sh *strictHandler) GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams) {
	var request GetAlarmsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarms(ctx, request.(GetAlarmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarms")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmsResponseObject); ok {
		if err := validResponse.VisitGetAlarmsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarm operation middleware
func (sh *strictHandler) GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request GetAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarm(ctx, request.(GetAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmResponseObject); ok {
		if err := validResponse.VisitGetAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AckAlarm operation middleware
func (sh *strictHandler) AckAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request AckAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	var body AckAlarmJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AckAlarm(ctx, request.(AckAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AckAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AckAlarmResponseObject); ok {
		if err := validResponse.VisitAckAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbableCauses operation middleware
func (sh *strictHandler) GetProbableCauses(w http.ResponseWriter, r *http.Request) {
	var request GetProbableCausesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbableCauses(ctx, request.(GetProbableCausesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbableCauses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbableCausesResponseObject); ok {
		if err := validResponse.VisitGetProbableCausesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbableCause operation middleware
func (sh *strictHandler) GetProbableCause(w http.ResponseWriter, r *http.Request, probableCauseId openapi_types.UUID) {
	var request GetProbableCauseRequestObject

	request.ProbableCauseId = probableCauseId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbableCause(ctx, request.(GetProbableCauseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbableCause")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbableCauseResponseObject); ok {
		if err := validResponse.VisitGetProbableCauseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AmNotification operation middleware
func (sh *strictHandler) AmNotification(w http.ResponseWriter, r *http.Request) {
	var request AmNotificationRequestObject

	var body AmNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AmNotification(ctx, request.(AmNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AmNotificationResponseObject); ok {
		if err := validResponse.VisitAmNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HwNotification operation middleware
func (sh *strictHandler) HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string) {
	var request HwNotificationRequestObject

	request.HwVendorName = hwVendorName

	var body HwNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HwNotification(ctx, request.(HwNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HwNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HwNotificationResponseObject); ok {
		if err := validResponse.VisitHwNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
