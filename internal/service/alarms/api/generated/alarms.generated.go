//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for AlarmEventNotificationNotificationEventType.
const (
	AlarmEventNotificationNotificationEventTypeACKNOWLEDGE AlarmEventNotificationNotificationEventType = 3
	AlarmEventNotificationNotificationEventTypeCHANGE      AlarmEventNotificationNotificationEventType = 1
	AlarmEventNotificationNotificationEventTypeCLEAR       AlarmEventNotificationNotificationEventType = 2
	AlarmEventNotificationNotificationEventTypeNEW         AlarmEventNotificationNotificationEventType = 0
)

// Defines values for AlarmSubscriptionInfoFilter.
const (
	AlarmSubscriptionInfoFilterACKNOWLEDGE AlarmSubscriptionInfoFilter = "ACKNOWLEDGE"
	AlarmSubscriptionInfoFilterCHANGE      AlarmSubscriptionInfoFilter = "CHANGE"
	AlarmSubscriptionInfoFilterCLEAR       AlarmSubscriptionInfoFilter = "CLEAR"
	AlarmSubscriptionInfoFilterNEW         AlarmSubscriptionInfoFilter = "NEW"
)

// Defines values for AlertmanagerNotificationStatus.
const (
	Firing   AlertmanagerNotificationStatus = "firing"
	Resolved AlertmanagerNotificationStatus = "resolved"
)

// Defines values for PerceivedSeverity.
const (
	CLEARED       PerceivedSeverity = 5
	CRITICAL      PerceivedSeverity = 0
	INDETERMINATE PerceivedSeverity = 4
	MAJOR         PerceivedSeverity = 1
	MINOR         PerceivedSeverity = 2
	WARNING       PerceivedSeverity = 3
)

// AlarmEventNotification Alarm Event Notification sent to subscribers
type AlarmEventNotification struct {
	// AlarmAcknowledgeTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmAcknowledgeTime *time.Time `json:"alarmAcknowledgeTime,omitempty"`

	// AlarmAcknowledged Boolean value indicating of a management system has acknowledged the alarm.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmChangedTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmChangedTime time.Time `json:"alarmChangedTime"`

	// AlarmDefinitionID A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced ResourceType.
	AlarmDefinitionID openapi_types.UUID `json:"alarmDefinitionID"`

	// AlarmEventRecordId The URL to the AlarmEventRecord object.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime Date/Time stamp value when the AlarmEventRecord has been created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// ConsumerSubscriptionId The value provided by the consumer in the subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// GlobalCloudID The global cloud identifier assigned by the SMO.e
	GlobalCloudID openapi_types.UUID `json:"globalCloudID"`

	// NotificationEventType Notification event type values
	NotificationEventType AlarmEventNotificationNotificationEventType `json:"notificationEventType"`

	// ObjectRef The URL to the AlarmEventRecord object.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseID A reference to the ProbableCause of the Alarm.
	ProbableCauseID openapi_types.UUID `json:"probableCauseID"`

	// ResourceID A reference to the resource instance which caused the alarm.
	ResourceID openapi_types.UUID `json:"resourceID"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventNotificationNotificationEventType Notification event type values
type AlarmEventNotificationNotificationEventType int

// AlarmEventRecord defines model for AlarmEventRecord.
type AlarmEventRecord struct {
	// AlarmAcknowledged When a system acknowledges an alarm, it is then set to TRUE.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmAcknowledgedTime This field is populated with a Date/Time stamp value when the alarm condition is acknowledged.
	AlarmAcknowledgedTime *time.Time `json:"alarmAcknowledgedTime,omitempty"`

	// AlarmChangedTime This field is populated with a Date/Time stamp value when any value
	// of the AlarmEventRecord is modified.
	AlarmChangedTime *time.Time `json:"alarmChangedTime,omitempty"`

	// AlarmClearedTime This field is populated with a Date/Time stamp value when the alarm condition is cleared.
	AlarmClearedTime *time.Time `json:"alarmClearedTime,omitempty"`

	// AlarmDefinitionID A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced Resource Type.
	AlarmDefinitionID openapi_types.UUID `json:"alarmDefinitionID"`

	// AlarmEventRecordId Identifier of an entry in the AlarmEventRecord.
	// Locally unique within the scope of an O-Cloud instance.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime This field is populated with a Date/Time stamp value when the AlarmEventRecord is created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseID A reference to the ProbableCause of the Alarm.
	ProbableCauseID openapi_types.UUID `json:"probableCauseID"`

	// ResourceID A reference to the resource which caused the alarm.
	ResourceID openapi_types.UUID `json:"resourceID"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventRecordModifications defines model for AlarmEventRecordModifications.
type AlarmEventRecordModifications struct {
	// AlarmAcknowledged Acknowledge an alarm.
	AlarmAcknowledged *bool `json:"alarmAcknowledged,omitempty"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity *PerceivedSeverity `json:"perceivedSeverity,omitempty"`
}

// AlarmServiceConfiguration defines model for AlarmServiceConfiguration.
type AlarmServiceConfiguration struct {
	// Extensions List of metadata key-value pairs used to associate meaningful metadata to the related alarm service
	Extensions *map[string]string `json:"extensions,omitempty"`

	// RetentionPeriod Number of days for alarm history to be retained.
	// This value has cannot be set lower than 1 (day).
	RetentionPeriod int `json:"retentionPeriod"`
}

// AlarmSubscriptionInfo defines model for AlarmSubscriptionInfo.
type AlarmSubscriptionInfo struct {
	// AlarmSubscriptionId Identifier for the Alarm Subscription. This identifier is allocated by the O-Cloud.
	AlarmSubscriptionId *openapi_types.UUID `json:"alarmSubscriptionId,omitempty"`

	// Callback The fully qualified URI to a consumer procedure which can process a Post of the AlarmEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	// It can be filtered by criteria based on the type of notification of fields of the
	// AlarmEventRecord.
	Filter *AlarmSubscriptionInfoFilter `json:"filter,omitempty"`
}

// AlarmSubscriptionInfoFilter Criteria for events which do not need to be reported or will be filtered by the subscription
// notification service. Therefore, if a filter is not provided then all events are reported.
// It can be filtered by criteria based on the type of notification of fields of the
// AlarmEventRecord.
type AlarmSubscriptionInfoFilter string

// Alert defines model for Alert.
type Alert struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	EndsAt      *time.Time         `json:"endsAt,omitempty"`

	// Fingerprint Fingerprint to identify the alert
	Fingerprint *string `json:"fingerprint,omitempty"`

	// GeneratorURL Identifies the entity that caused the alert
	GeneratorURL *string            `json:"generatorURL,omitempty"`
	Labels       *map[string]string `json:"labels,omitempty"`
	StartsAt     *time.Time         `json:"startsAt,omitempty"`

	// Status Alertmanager notification status
	Status *AlertmanagerNotificationStatus `json:"status,omitempty"`
}

// AlertmanagerNotification Alertmanager notification payload as described here https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
type AlertmanagerNotification struct {
	Alerts            []Alert            `json:"alerts"`
	CommonAnnotations *map[string]string `json:"commonAnnotations,omitempty"`
	CommonLabels      *map[string]string `json:"commonLabels,omitempty"`

	// ExternalURL Backlink to the Alertmanager
	ExternalURL *string `json:"externalURL,omitempty"`

	// GroupKey Key identifying the group of alerts (e.g. to deduplicate)
	GroupKey    string             `json:"groupKey"`
	GroupLabels *map[string]string `json:"groupLabels,omitempty"`
	Receiver    string             `json:"receiver"`

	// Status Alertmanager notification status
	Status AlertmanagerNotificationStatus `json:"status"`

	// Subscriber Optional subscriber information, if a subscriber is found
	Subscriber *struct {
		// CallbackUrl URL to call for notifying the subscriber
		CallbackUrl *string `json:"callbackUrl,omitempty"`
	} `json:"subscriber,omitempty"`

	// TruncatedAlerts How many alerts have been truncated due to "max_alerts"
	TruncatedAlerts *int   `json:"truncatedAlerts,omitempty"`
	Version         string `json:"version"`
}

// AlertmanagerNotificationStatus Alertmanager notification status
type AlertmanagerNotificationStatus string

// HardwareAlert Placeholder for hardware alert schema
type HardwareAlert = map[string]interface{}

// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
type PerceivedSeverity int

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// AmNotificationJSONRequestBody defines body for AmNotification for application/json ContentType.
type AmNotificationJSONRequestBody = AlertmanagerNotification

// HwNotificationJSONRequestBody defines body for HwNotification for application/json ContentType.
type HwNotificationJSONRequestBody = HardwareAlert

// PatchAlarmServiceConfigurationApplicationMergePatchPlusJSONRequestBody defines body for PatchAlarmServiceConfiguration for application/merge-patch+json ContentType.
type PatchAlarmServiceConfigurationApplicationMergePatchPlusJSONRequestBody = AlarmServiceConfiguration

// UpdateAlarmServiceConfigurationJSONRequestBody defines body for UpdateAlarmServiceConfiguration for application/json ContentType.
type UpdateAlarmServiceConfigurationJSONRequestBody = AlarmServiceConfiguration

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = AlarmSubscriptionInfo

// PatchAlarmApplicationMergePatchPlusJSONRequestBody defines body for PatchAlarm for application/merge-patch+json ContentType.
type PatchAlarmApplicationMergePatchPlusJSONRequestBody = AlarmEventRecordModifications

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(w http.ResponseWriter, r *http.Request)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string)
	// Get API versions
	// (GET /o2ims-infrastructureMonitoring/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Retrieve the alarm service configuration
	// (GET /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	GetServiceConfiguration(w http.ResponseWriter, r *http.Request)
	// Modify individual fields of the Alarm Service Configuration.
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	PatchAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request)
	// Modify all fields of the Alarm Service Configuration.
	// (PUT /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	UpdateAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request)
	// Retrieve the list of alarm subscriptions
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create a new alarm subscription
	// (POST /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete exactly one subscription
	// (DELETE /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve exactly one subscription
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve the list of alarms
	// (GET /o2ims-infrastructureMonitoring/v1/alarms)
	GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams)
	// Retrieve exactly one alarm
	// (GET /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Modify an individual alarm record
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	PatchAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Get minor API versions
	// (GET /o2ims-infrastructureMonitoring/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AmNotification operation middleware
func (siw *ServerInterfaceWrapper) AmNotification(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AmNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HwNotification operation middleware
func (siw *ServerInterfaceWrapper) HwNotification(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwVendorName" -------------
	var hwVendorName string

	err = runtime.BindStyledParameterWithOptions("simple", "hwVendorName", r.PathValue("hwVendorName"), &hwVendorName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwVendorName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HwNotification(w, r, hwVendorName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServiceConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetServiceConfiguration(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader", "role:o2ims-maintainer"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAlarmServiceConfiguration operation middleware
func (siw *ServerInterfaceWrapper) PatchAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-maintainer"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAlarmServiceConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAlarmServiceConfiguration operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-maintainer"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAlarmServiceConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-subscriber"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-subscriber"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarms operation middleware
func (siw *ServerInterfaceWrapper) GetAlarms(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarms(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarm operation middleware
func (siw *ServerInterfaceWrapper) GetAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAlarm operation middleware
func (siw *ServerInterfaceWrapper) PatchAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-maintainer"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/caas-alerts/alertmanager", wrapper.AmNotification)
	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/hardware-alerts/{hwVendorName}", wrapper.HwNotification)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration", wrapper.GetServiceConfiguration)
	m.HandleFunc("PATCH "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration", wrapper.PatchAlarmServiceConfiguration)
	m.HandleFunc("PUT "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration", wrapper.UpdateAlarmServiceConfiguration)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.GetSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarms", wrapper.GetAlarms)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.GetAlarm)
	m.HandleFunc("PATCH "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.PatchAlarm)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/api_versions", wrapper.GetMinorVersions)

	return m
}

type AmNotificationRequestObject struct {
	Body *AmNotificationJSONRequestBody
}

type AmNotificationResponseObject interface {
	VisitAmNotificationResponse(w http.ResponseWriter) error
}

type AmNotification200Response struct {
}

func (response AmNotification200Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AmNotification400Response struct {
}

func (response AmNotification400Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AmNotification500Response struct {
}

func (response AmNotification500Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HwNotificationRequestObject struct {
	HwVendorName string `json:"hwVendorName"`
	Body         *HwNotificationJSONRequestBody
}

type HwNotificationResponseObject interface {
	VisitHwNotificationResponse(w http.ResponseWriter) error
}

type HwNotification200Response struct {
}

func (response HwNotification200Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HwNotification400Response struct {
}

func (response HwNotification400Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HwNotification500Response struct {
}

func (response HwNotification500Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions401ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions403ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfigurationRequestObject struct {
}

type GetServiceConfigurationResponseObject interface {
	VisitGetServiceConfigurationResponse(w http.ResponseWriter) error
}

type GetServiceConfiguration200JSONResponse AlarmServiceConfiguration

func (response GetServiceConfiguration200JSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfiguration400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetServiceConfiguration400ApplicationProblemPlusJSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfiguration401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetServiceConfiguration401ApplicationProblemPlusJSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfiguration403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetServiceConfiguration403ApplicationProblemPlusJSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfiguration500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetServiceConfiguration500ApplicationProblemPlusJSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfigurationRequestObject struct {
	Body *PatchAlarmServiceConfigurationApplicationMergePatchPlusJSONRequestBody
}

type PatchAlarmServiceConfigurationResponseObject interface {
	VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error
}

type PatchAlarmServiceConfiguration200JSONResponse AlarmServiceConfiguration

func (response PatchAlarmServiceConfiguration200JSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration401ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration403ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfigurationRequestObject struct {
	Body *UpdateAlarmServiceConfigurationJSONRequestBody
}

type UpdateAlarmServiceConfigurationResponseObject interface {
	VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error
}

type UpdateAlarmServiceConfiguration200JSONResponse AlarmServiceConfiguration

func (response UpdateAlarmServiceConfiguration200JSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration401ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration403ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []AlarmSubscriptionInfo

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions401ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions403ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse AlarmSubscriptionInfo

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription401ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription403ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription409ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse AlarmSubscriptionInfo

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription401ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription403ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmsRequestObject struct {
	Params GetAlarmsParams
}

type GetAlarmsResponseObject interface {
	VisitGetAlarmsResponse(w http.ResponseWriter) error
}

type GetAlarms200JSONResponse []AlarmEventRecord

func (response GetAlarms200JSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms400ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms401ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms403ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms500ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
}

type GetAlarmResponseObject interface {
	VisitGetAlarmResponse(w http.ResponseWriter) error
}

type GetAlarm200JSONResponse AlarmEventRecord

func (response GetAlarm200JSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm400ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm401ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm403ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm404ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm500ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
	Body               *PatchAlarmApplicationMergePatchPlusJSONRequestBody
}

type PatchAlarmResponseObject interface {
	VisitPatchAlarmResponse(w http.ResponseWriter) error
}

type PatchAlarm200JSONResponse AlarmEventRecordModifications

func (response PatchAlarm200JSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm400ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm401ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm403ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm404ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm409ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm412ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm500ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions401ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions403ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(ctx context.Context, request AmNotificationRequestObject) (AmNotificationResponseObject, error)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(ctx context.Context, request HwNotificationRequestObject) (HwNotificationResponseObject, error)
	// Get API versions
	// (GET /o2ims-infrastructureMonitoring/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Retrieve the alarm service configuration
	// (GET /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	GetServiceConfiguration(ctx context.Context, request GetServiceConfigurationRequestObject) (GetServiceConfigurationResponseObject, error)
	// Modify individual fields of the Alarm Service Configuration.
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	PatchAlarmServiceConfiguration(ctx context.Context, request PatchAlarmServiceConfigurationRequestObject) (PatchAlarmServiceConfigurationResponseObject, error)
	// Modify all fields of the Alarm Service Configuration.
	// (PUT /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	UpdateAlarmServiceConfiguration(ctx context.Context, request UpdateAlarmServiceConfigurationRequestObject) (UpdateAlarmServiceConfigurationResponseObject, error)
	// Retrieve the list of alarm subscriptions
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create a new alarm subscription
	// (POST /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete exactly one subscription
	// (DELETE /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Retrieve exactly one subscription
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
	// Retrieve the list of alarms
	// (GET /o2ims-infrastructureMonitoring/v1/alarms)
	GetAlarms(ctx context.Context, request GetAlarmsRequestObject) (GetAlarmsResponseObject, error)
	// Retrieve exactly one alarm
	// (GET /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(ctx context.Context, request GetAlarmRequestObject) (GetAlarmResponseObject, error)
	// Modify an individual alarm record
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	PatchAlarm(ctx context.Context, request PatchAlarmRequestObject) (PatchAlarmResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureMonitoring/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AmNotification operation middleware
func (sh *strictHandler) AmNotification(w http.ResponseWriter, r *http.Request) {
	var request AmNotificationRequestObject

	var body AmNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AmNotification(ctx, request.(AmNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AmNotificationResponseObject); ok {
		if err := validResponse.VisitAmNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HwNotification operation middleware
func (sh *strictHandler) HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string) {
	var request HwNotificationRequestObject

	request.HwVendorName = hwVendorName

	var body HwNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HwNotification(ctx, request.(HwNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HwNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HwNotificationResponseObject); ok {
		if err := validResponse.VisitHwNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceConfiguration operation middleware
func (sh *strictHandler) GetServiceConfiguration(w http.ResponseWriter, r *http.Request) {
	var request GetServiceConfigurationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceConfiguration(ctx, request.(GetServiceConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetServiceConfigurationResponseObject); ok {
		if err := validResponse.VisitGetServiceConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchAlarmServiceConfiguration operation middleware
func (sh *strictHandler) PatchAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {
	var request PatchAlarmServiceConfigurationRequestObject

	var body PatchAlarmServiceConfigurationApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAlarmServiceConfiguration(ctx, request.(PatchAlarmServiceConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAlarmServiceConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchAlarmServiceConfigurationResponseObject); ok {
		if err := validResponse.VisitPatchAlarmServiceConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAlarmServiceConfiguration operation middleware
func (sh *strictHandler) UpdateAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {
	var request UpdateAlarmServiceConfigurationRequestObject

	var body UpdateAlarmServiceConfigurationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAlarmServiceConfiguration(ctx, request.(UpdateAlarmServiceConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAlarmServiceConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAlarmServiceConfigurationResponseObject); ok {
		if err := validResponse.VisitUpdateAlarmServiceConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request DeleteSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request GetSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarms operation middleware
func (sh *strictHandler) GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams) {
	var request GetAlarmsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarms(ctx, request.(GetAlarmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarms")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmsResponseObject); ok {
		if err := validResponse.VisitGetAlarmsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarm operation middleware
func (sh *strictHandler) GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request GetAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarm(ctx, request.(GetAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmResponseObject); ok {
		if err := validResponse.VisitGetAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchAlarm operation middleware
func (sh *strictHandler) PatchAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request PatchAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	var body PatchAlarmApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAlarm(ctx, request.(PatchAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchAlarmResponseObject); ok {
		if err := validResponse.VisitPatchAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xfAPgQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
