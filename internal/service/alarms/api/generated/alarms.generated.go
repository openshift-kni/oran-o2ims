//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AlarmEventNotificationNotificationEventType.
const (
	ACKNOWLEDGE AlarmEventNotificationNotificationEventType = 3
	CHANGE      AlarmEventNotificationNotificationEventType = 1
	CLEAR       AlarmEventNotificationNotificationEventType = 2
	NEW         AlarmEventNotificationNotificationEventType = 0
)

// Defines values for AlertmanagerNotificationStatus.
const (
	Firing   AlertmanagerNotificationStatus = "firing"
	Resolved AlertmanagerNotificationStatus = "resolved"
)

// Defines values for PerceivedSeverity.
const (
	CLEARED       PerceivedSeverity = 5
	CRITICAL      PerceivedSeverity = 0
	INDETERMINATE PerceivedSeverity = 4
	MAJOR         PerceivedSeverity = 1
	MINOR         PerceivedSeverity = 2
	WARNING       PerceivedSeverity = 3
)

// AlarmEventNotification Alarm Event Notification sent to subscribers
type AlarmEventNotification struct {
	// AlarmAcknowledgeTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmAcknowledgeTime *time.Time `json:"alarmAcknowledgeTime,omitempty"`

	// AlarmAcknowledged Boolean value indicating of a management system has acknowledged the alarm.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmChangedTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmChangedTime time.Time `json:"alarmChangedTime"`

	// AlarmDefinitionID A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced ResourceType.
	AlarmDefinitionID openapi_types.UUID `json:"alarmDefinitionID"`

	// AlarmEventRecordId The URL to the AlarmEventRecord object.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime Date/Time stamp value when the AlarmEventRecord has been created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// ConsumerSubscriptionId The value provided by the consumer in the subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// GlobalCloudID The global cloud identifier assigned by the SMO.e
	GlobalCloudID openapi_types.UUID `json:"globalCloudID"`

	// NotificationEventType Notification event type values
	NotificationEventType AlarmEventNotificationNotificationEventType `json:"notificationEventType"`

	// ObjectRef The URL to the AlarmEventRecord object.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseID A reference to the ProbableCause of the Alarm.
	ProbableCauseID openapi_types.UUID `json:"probableCauseID"`

	// ResourceID A reference to the resource instance which caused the alarm.
	ResourceID openapi_types.UUID `json:"resourceID"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventNotificationNotificationEventType Notification event type values
type AlarmEventNotificationNotificationEventType int

// AlarmEventRecord defines model for AlarmEventRecord.
type AlarmEventRecord struct {
	// AlarmAcknowledged When a system acknowledges an alarm, it is then set to TRUE.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmAcknowledgedTime This field is populated with a Date/Time stamp value when the alarm condition is acknowledged.
	AlarmAcknowledgedTime *time.Time `json:"alarmAcknowledgedTime,omitempty"`

	// AlarmChangedTime This field is populated with a Date/Time stamp value when any value
	// of the AlarmEventRecord is modified.
	AlarmChangedTime *time.Time `json:"alarmChangedTime,omitempty"`

	// AlarmClearedTime This field is populated with a Date/Time stamp value when the alarm condition is cleared.
	AlarmClearedTime *time.Time `json:"alarmClearedTime,omitempty"`

	// AlarmDefinitionId A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced Resource Type.
	AlarmDefinitionId openapi_types.UUID `json:"alarmDefinitionId"`

	// AlarmEventRecordId Identifier of an entry in the AlarmEventRecord.
	// Locally unique within the scope of an O-Cloud instance.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime This field is populated with a Date/Time stamp value when the AlarmEventRecord is created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseId A reference to the ProbableCause of the Alarm.
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventRecordModifications defines model for AlarmEventRecordModifications.
type AlarmEventRecordModifications struct {
	// AlarmAcknowledged Acknowledge an alarm.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`
}

// AlarmSubscriptionInfo defines model for AlarmSubscriptionInfo.
type AlarmSubscriptionInfo struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the AlarmEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	// Only the attributes in AlarmEventRecord are filterable.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionID Identifier for the Alarm Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionID *openapi_types.UUID `json:"subscriptionID,omitempty"`
}

// AlertmanagerNotification Alertmanager notification payload as described here https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
type AlertmanagerNotification struct {
	Alerts []struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		EndsAt      *time.Time         `json:"endsAt,omitempty"`

		// Fingerprint Fingerprint to identify the alert
		Fingerprint *string `json:"fingerprint,omitempty"`

		// GeneratorURL Identifies the entity that caused the alert
		GeneratorURL *string            `json:"generatorURL,omitempty"`
		Labels       *map[string]string `json:"labels,omitempty"`
		StartsAt     *time.Time         `json:"startsAt,omitempty"`

		// Status Alertmanager notification status
		Status *AlertmanagerNotificationStatus `json:"status,omitempty"`
	} `json:"alerts"`
	CommonAnnotations *map[string]string `json:"commonAnnotations,omitempty"`
	CommonLabels      *map[string]string `json:"commonLabels,omitempty"`

	// ExternalURL Backlink to the Alertmanager
	ExternalURL *string `json:"externalURL,omitempty"`

	// GroupKey Key identifying the group of alerts (e.g. to deduplicate)
	GroupKey    string             `json:"groupKey"`
	GroupLabels *map[string]string `json:"groupLabels,omitempty"`
	Receiver    string             `json:"receiver"`

	// Status Alertmanager notification status
	Status AlertmanagerNotificationStatus `json:"status"`

	// Subscriber Optional subscriber information, if a subscriber is found
	Subscriber *struct {
		// CallbackUrl URL to call for notifying the subscriber
		CallbackUrl *string `json:"callbackUrl,omitempty"`
	} `json:"subscriber,omitempty"`

	// TruncatedAlerts How many alerts have been truncated due to "max_alerts"
	TruncatedAlerts *int   `json:"truncatedAlerts,omitempty"`
	Version         string `json:"version"`
}

// AlertmanagerNotificationStatus Alertmanager notification status
type AlertmanagerNotificationStatus string

// HardwareAlert Placeholder for hardware alert schema
type HardwareAlert = map[string]interface{}

// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
type PerceivedSeverity int

// ProbableCause defines model for ProbableCause.
type ProbableCause struct {
	// Description Any additional information beyond the name to describe the probableCause derived from corresponding AlarmDefinition.
	Description string `json:"description"`

	// Name Human readable text of the probable cause derived from corresponding AlarmDefinition.
	Name string `json:"name"`

	// ProbableCauseId Identifier of the ProbableCause.
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// Filter Optional filter parameter. Only the attributes in AlarmSubscriptionInfo are filterable.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	// Filter Optional filter parameter. Only the attributes in AlarmEventRecord are filterable.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = AlarmSubscriptionInfo

// AckAlarmJSONRequestBody defines body for AckAlarm for application/json ContentType.
type AckAlarmJSONRequestBody = AlarmEventRecordModifications

// AmNotificationJSONRequestBody defines body for AmNotification for application/json ContentType.
type AmNotificationJSONRequestBody = AlertmanagerNotification

// HwNotificationJSONRequestBody defines body for HwNotification for application/json ContentType.
type HwNotificationJSONRequestBody = HardwareAlert

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the list of alarm subscriptions
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create a new alarm subscription
	// (POST /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete exactly one subscription
	// (DELETE /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve exactly one subscription
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve the list of alarms
	// (GET /O2ims_infrastructureMonitoring/v1/alarms)
	GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams)
	// Retrieve exactly one alarm
	// (GET /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Modify exactly one alarm to acknowledge
	// (PATCH /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	AckAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Retrieve all probable causes
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses)
	GetProbableCauses(w http.ResponseWriter, r *http.Request)
	// Retrieve exactly one probable cause
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses/{probableCauseId})
	GetProbableCause(w http.ResponseWriter, r *http.Request, probableCauseId openapi_types.UUID)
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(w http.ResponseWriter, r *http.Request)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarms operation middleware
func (siw *ServerInterfaceWrapper) GetAlarms(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarms(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarm operation middleware
func (siw *ServerInterfaceWrapper) GetAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AckAlarm operation middleware
func (siw *ServerInterfaceWrapper) AckAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AckAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbableCauses operation middleware
func (siw *ServerInterfaceWrapper) GetProbableCauses(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbableCauses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbableCause operation middleware
func (siw *ServerInterfaceWrapper) GetProbableCause(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "probableCauseId" -------------
	var probableCauseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "probableCauseId", r.PathValue("probableCauseId"), &probableCauseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "probableCauseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbableCause(w, r, probableCauseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AmNotification operation middleware
func (siw *ServerInterfaceWrapper) AmNotification(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AmNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HwNotification operation middleware
func (siw *ServerInterfaceWrapper) HwNotification(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwVendorName" -------------
	var hwVendorName string

	err = runtime.BindStyledParameterWithOptions("simple", "hwVendorName", r.PathValue("hwVendorName"), &hwVendorName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwVendorName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HwNotification(w, r, hwVendorName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.GetSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarms", wrapper.GetAlarms)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.GetAlarm)
	m.HandleFunc("PATCH "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.AckAlarm)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/probableCauses", wrapper.GetProbableCauses)
	m.HandleFunc("GET "+options.BaseURL+"/O2ims_infrastructureMonitoring/v1/probableCauses/{probableCauseId}", wrapper.GetProbableCause)
	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/caas-alerts/alertmanager", wrapper.AmNotification)
	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/hardware-alerts/{hwVendorName}", wrapper.HwNotification)

	return m
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []AlarmSubscriptionInfo

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse AlarmSubscriptionInfo

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription204Response struct {
}

func (response DeleteSubscription204Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSubscription400ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse AlarmSubscriptionInfo

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmsRequestObject struct {
	Params GetAlarmsParams
}

type GetAlarmsResponseObject interface {
	VisitGetAlarmsResponse(w http.ResponseWriter) error
}

type GetAlarms200JSONResponse []AlarmEventRecord

func (response GetAlarms200JSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAlarms400ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAlarms403ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAlarms500ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
}

type GetAlarmResponseObject interface {
	VisitGetAlarmResponse(w http.ResponseWriter) error
}

type GetAlarm200JSONResponse AlarmEventRecord

func (response GetAlarm200JSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAlarm400ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAlarm404ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAlarm500ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
	Body               *AckAlarmJSONRequestBody
}

type AckAlarmResponseObject interface {
	VisitAckAlarmResponse(w http.ResponseWriter) error
}

type AckAlarm200JSONResponse AlarmEventRecordModifications

func (response AckAlarm200JSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm400ApplicationProblemPlusJSONResponse ProblemDetails

func (response AckAlarm400ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm404ApplicationProblemPlusJSONResponse ProblemDetails

func (response AckAlarm404ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm409ApplicationProblemPlusJSONResponse ProblemDetails

func (response AckAlarm409ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm412ApplicationProblemPlusJSONResponse ProblemDetails

func (response AckAlarm412ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AckAlarm500ApplicationProblemPlusJSONResponse ProblemDetails

func (response AckAlarm500ApplicationProblemPlusJSONResponse) VisitAckAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCausesRequestObject struct {
}

type GetProbableCausesResponseObject interface {
	VisitGetProbableCausesResponse(w http.ResponseWriter) error
}

type GetProbableCauses200JSONResponse []ProbableCause

func (response GetProbableCauses200JSONResponse) VisitGetProbableCausesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCauses500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetProbableCauses500ApplicationProblemPlusJSONResponse) VisitGetProbableCausesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCauseRequestObject struct {
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`
}

type GetProbableCauseResponseObject interface {
	VisitGetProbableCauseResponse(w http.ResponseWriter) error
}

type GetProbableCause200JSONResponse ProbableCause

func (response GetProbableCause200JSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetProbableCause400ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetProbableCause404ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetProbableCause500ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AmNotificationRequestObject struct {
	Body *AmNotificationJSONRequestBody
}

type AmNotificationResponseObject interface {
	VisitAmNotificationResponse(w http.ResponseWriter) error
}

type AmNotification200Response struct {
}

func (response AmNotification200Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AmNotification400Response struct {
}

func (response AmNotification400Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AmNotification500Response struct {
}

func (response AmNotification500Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HwNotificationRequestObject struct {
	HwVendorName string `json:"hwVendorName"`
	Body         *HwNotificationJSONRequestBody
}

type HwNotificationResponseObject interface {
	VisitHwNotificationResponse(w http.ResponseWriter) error
}

type HwNotification200Response struct {
}

func (response HwNotification200Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HwNotification400Response struct {
}

func (response HwNotification400Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HwNotification500Response struct {
}

func (response HwNotification500Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve the list of alarm subscriptions
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create a new alarm subscription
	// (POST /O2ims_infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete exactly one subscription
	// (DELETE /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Retrieve exactly one subscription
	// (GET /O2ims_infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
	// Retrieve the list of alarms
	// (GET /O2ims_infrastructureMonitoring/v1/alarms)
	GetAlarms(ctx context.Context, request GetAlarmsRequestObject) (GetAlarmsResponseObject, error)
	// Retrieve exactly one alarm
	// (GET /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(ctx context.Context, request GetAlarmRequestObject) (GetAlarmResponseObject, error)
	// Modify exactly one alarm to acknowledge
	// (PATCH /O2ims_infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	AckAlarm(ctx context.Context, request AckAlarmRequestObject) (AckAlarmResponseObject, error)
	// Retrieve all probable causes
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses)
	GetProbableCauses(ctx context.Context, request GetProbableCausesRequestObject) (GetProbableCausesResponseObject, error)
	// Retrieve exactly one probable cause
	// (GET /O2ims_infrastructureMonitoring/v1/probableCauses/{probableCauseId})
	GetProbableCause(ctx context.Context, request GetProbableCauseRequestObject) (GetProbableCauseResponseObject, error)
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(ctx context.Context, request AmNotificationRequestObject) (AmNotificationResponseObject, error)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(ctx context.Context, request HwNotificationRequestObject) (HwNotificationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request DeleteSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request GetSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarms operation middleware
func (sh *strictHandler) GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams) {
	var request GetAlarmsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarms(ctx, request.(GetAlarmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarms")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmsResponseObject); ok {
		if err := validResponse.VisitGetAlarmsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarm operation middleware
func (sh *strictHandler) GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request GetAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarm(ctx, request.(GetAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmResponseObject); ok {
		if err := validResponse.VisitGetAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AckAlarm operation middleware
func (sh *strictHandler) AckAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request AckAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	var body AckAlarmJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AckAlarm(ctx, request.(AckAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AckAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AckAlarmResponseObject); ok {
		if err := validResponse.VisitAckAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbableCauses operation middleware
func (sh *strictHandler) GetProbableCauses(w http.ResponseWriter, r *http.Request) {
	var request GetProbableCausesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbableCauses(ctx, request.(GetProbableCausesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbableCauses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbableCausesResponseObject); ok {
		if err := validResponse.VisitGetProbableCausesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbableCause operation middleware
func (sh *strictHandler) GetProbableCause(w http.ResponseWriter, r *http.Request, probableCauseId openapi_types.UUID) {
	var request GetProbableCauseRequestObject

	request.ProbableCauseId = probableCauseId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbableCause(ctx, request.(GetProbableCauseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbableCause")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbableCauseResponseObject); ok {
		if err := validResponse.VisitGetProbableCauseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AmNotification operation middleware
func (sh *strictHandler) AmNotification(w http.ResponseWriter, r *http.Request) {
	var request AmNotificationRequestObject

	var body AmNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AmNotification(ctx, request.(AmNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AmNotificationResponseObject); ok {
		if err := validResponse.VisitAmNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HwNotification operation middleware
func (sh *strictHandler) HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string) {
	var request HwNotificationRequestObject

	request.HwVendorName = hwVendorName

	var body HwNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HwNotification(ctx, request.(HwNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HwNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HwNotificationResponseObject); ok {
		if err := validResponse.VisitHwNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
