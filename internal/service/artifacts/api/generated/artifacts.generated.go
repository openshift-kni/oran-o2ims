//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// ManagedInfrastructureTemplate Information about a managed infrastructure template.
type ManagedInfrastructureTemplate struct {
	// ArtifactResourceId Identifier for the managed infrastructure template. This identifier is allocated by the O-Cloud.
	ArtifactResourceId openapi_types.UUID `json:"artifactResourceId"`

	// Description Details about the current managed infrastructure template.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the Artifact Resource.
	Extensions *map[string]string `json:"extensions,omitempty"`

	// Name Human readable description of managed infrastructure template
	Name string `json:"name"`

	// ParameterSchema Defines the parameters required for ClusterTemplate. The parameter definitions should follow the OpenAPI V3 schema and explicitly define required fields.
	ParameterSchema map[string]interface{} `json:"parameterSchema"`
	Version         string                 `json:"version"`
}

// ManagedInfrastructureTemplateDefaults Default values used for cluster provisioning by a ManagedInfrastructureTemplate
type ManagedInfrastructureTemplateDefaults struct {
	// ClusterInstanceDefaults Defines the default values used for cluster installation
	ClusterInstanceDefaults *map[string]interface{} `json:"clusterInstanceDefaults,omitempty"`

	// PolicyTemplateDefaults Defines the default values used for cluster configuration
	PolicyTemplateDefaults *map[string]interface{} `json:"policyTemplateDefaults,omitempty"`
}

// ManagedInfrastructureTemplateId defines model for managedInfrastructureTemplateId.
type ManagedInfrastructureTemplateId = string

// GetManagedInfrastructureTemplatesParams defines parameters for GetManagedInfrastructureTemplates.
type GetManagedInfrastructureTemplatesParams struct {
	// AllFields This URI query parameter requests that all complex attributes are included in the response.
	//
	// ```
	// all_fields
	// ```
	AllFields *externalRef0.AllFields `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureArtifacts/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /o2ims-infrastructureArtifacts/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get managed infrastructure templates
	// (GET /o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates)
	GetManagedInfrastructureTemplates(w http.ResponseWriter, r *http.Request, params GetManagedInfrastructureTemplatesParams)
	// Get managed infrastructure templates
	// (GET /o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates/{managedInfrastructureTemplateId})
	GetManagedInfrastructureTemplate(w http.ResponseWriter, r *http.Request, managedInfrastructureTemplateId ManagedInfrastructureTemplateId)
	// Get managed infrastructure template defaults
	// (GET /o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates/{managedInfrastructureTemplateId}/defaults)
	GetManagedInfrastructureTemplateDefaults(w http.ResponseWriter, r *http.Request, managedInfrastructureTemplateId ManagedInfrastructureTemplateId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetManagedInfrastructureTemplates operation middleware
func (siw *ServerInterfaceWrapper) GetManagedInfrastructureTemplates(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetManagedInfrastructureTemplatesParams

	// ------------- Optional query parameter "all_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "all_fields", r.URL.Query(), &params.AllFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetManagedInfrastructureTemplates(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetManagedInfrastructureTemplate operation middleware
func (siw *ServerInterfaceWrapper) GetManagedInfrastructureTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "managedInfrastructureTemplateId" -------------
	var managedInfrastructureTemplateId ManagedInfrastructureTemplateId

	err = runtime.BindStyledParameterWithOptions("simple", "managedInfrastructureTemplateId", r.PathValue("managedInfrastructureTemplateId"), &managedInfrastructureTemplateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "managedInfrastructureTemplateId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetManagedInfrastructureTemplate(w, r, managedInfrastructureTemplateId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetManagedInfrastructureTemplateDefaults operation middleware
func (siw *ServerInterfaceWrapper) GetManagedInfrastructureTemplateDefaults(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "managedInfrastructureTemplateId" -------------
	var managedInfrastructureTemplateId ManagedInfrastructureTemplateId

	err = runtime.BindStyledParameterWithOptions("simple", "managedInfrastructureTemplateId", r.PathValue("managedInfrastructureTemplateId"), &managedInfrastructureTemplateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "managedInfrastructureTemplateId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"role:o2ims-admin", "role:o2ims-reader", "role:o2ims-provisioner"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetManagedInfrastructureTemplateDefaults(w, r, managedInfrastructureTemplateId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureArtifacts/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureArtifacts/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates", wrapper.GetManagedInfrastructureTemplates)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates/{managedInfrastructureTemplateId}", wrapper.GetManagedInfrastructureTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates/{managedInfrastructureTemplateId}/defaults", wrapper.GetManagedInfrastructureTemplateDefaults)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions401ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions403ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions401ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions403ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplatesRequestObject struct {
	Params GetManagedInfrastructureTemplatesParams
}

type GetManagedInfrastructureTemplatesResponseObject interface {
	VisitGetManagedInfrastructureTemplatesResponse(w http.ResponseWriter) error
}

type GetManagedInfrastructureTemplates200JSONResponse []ManagedInfrastructureTemplate

func (response GetManagedInfrastructureTemplates200JSONResponse) VisitGetManagedInfrastructureTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplates400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplates400ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplates401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplates401ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplates403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplates403ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplates500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplates500ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateRequestObject struct {
	ManagedInfrastructureTemplateId ManagedInfrastructureTemplateId `json:"managedInfrastructureTemplateId"`
}

type GetManagedInfrastructureTemplateResponseObject interface {
	VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error
}

type GetManagedInfrastructureTemplate200JSONResponse ManagedInfrastructureTemplate

func (response GetManagedInfrastructureTemplate200JSONResponse) VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplate400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplate400ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplate401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplate401ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplate403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplate403ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplate404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplate404ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplate500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplate500ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateDefaultsRequestObject struct {
	ManagedInfrastructureTemplateId ManagedInfrastructureTemplateId `json:"managedInfrastructureTemplateId"`
}

type GetManagedInfrastructureTemplateDefaultsResponseObject interface {
	VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error
}

type GetManagedInfrastructureTemplateDefaults200JSONResponse ManagedInfrastructureTemplateDefaults

func (response GetManagedInfrastructureTemplateDefaults200JSONResponse) VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateDefaults400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplateDefaults400ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateDefaults401ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplateDefaults401ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateDefaults403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplateDefaults403ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateDefaults404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplateDefaults404ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetManagedInfrastructureTemplateDefaults500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetManagedInfrastructureTemplateDefaults500ApplicationProblemPlusJSONResponse) VisitGetManagedInfrastructureTemplateDefaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureArtifacts/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureArtifacts/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get managed infrastructure templates
	// (GET /o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates)
	GetManagedInfrastructureTemplates(ctx context.Context, request GetManagedInfrastructureTemplatesRequestObject) (GetManagedInfrastructureTemplatesResponseObject, error)
	// Get managed infrastructure templates
	// (GET /o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates/{managedInfrastructureTemplateId})
	GetManagedInfrastructureTemplate(ctx context.Context, request GetManagedInfrastructureTemplateRequestObject) (GetManagedInfrastructureTemplateResponseObject, error)
	// Get managed infrastructure template defaults
	// (GET /o2ims-infrastructureArtifacts/v1/managedInfrastructureTemplates/{managedInfrastructureTemplateId}/defaults)
	GetManagedInfrastructureTemplateDefaults(ctx context.Context, request GetManagedInfrastructureTemplateDefaultsRequestObject) (GetManagedInfrastructureTemplateDefaultsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetManagedInfrastructureTemplates operation middleware
func (sh *strictHandler) GetManagedInfrastructureTemplates(w http.ResponseWriter, r *http.Request, params GetManagedInfrastructureTemplatesParams) {
	var request GetManagedInfrastructureTemplatesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetManagedInfrastructureTemplates(ctx, request.(GetManagedInfrastructureTemplatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetManagedInfrastructureTemplates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetManagedInfrastructureTemplatesResponseObject); ok {
		if err := validResponse.VisitGetManagedInfrastructureTemplatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetManagedInfrastructureTemplate operation middleware
func (sh *strictHandler) GetManagedInfrastructureTemplate(w http.ResponseWriter, r *http.Request, managedInfrastructureTemplateId ManagedInfrastructureTemplateId) {
	var request GetManagedInfrastructureTemplateRequestObject

	request.ManagedInfrastructureTemplateId = managedInfrastructureTemplateId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetManagedInfrastructureTemplate(ctx, request.(GetManagedInfrastructureTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetManagedInfrastructureTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetManagedInfrastructureTemplateResponseObject); ok {
		if err := validResponse.VisitGetManagedInfrastructureTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetManagedInfrastructureTemplateDefaults operation middleware
func (sh *strictHandler) GetManagedInfrastructureTemplateDefaults(w http.ResponseWriter, r *http.Request, managedInfrastructureTemplateId ManagedInfrastructureTemplateId) {
	var request GetManagedInfrastructureTemplateDefaultsRequestObject

	request.ManagedInfrastructureTemplateId = managedInfrastructureTemplateId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetManagedInfrastructureTemplateDefaults(ctx, request.(GetManagedInfrastructureTemplateDefaultsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetManagedInfrastructureTemplateDefaults")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetManagedInfrastructureTemplateDefaultsResponseObject); ok {
		if err := validResponse.VisitGetManagedInfrastructureTemplateDefaultsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//82v+QmEPQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
