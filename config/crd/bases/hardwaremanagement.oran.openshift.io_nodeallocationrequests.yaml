---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: nodeallocationrequests.hardwaremanagement.oran.openshift.io
spec:
  group: hardwaremanagement.oran.openshift.io
  names:
    kind: NodeAllocationRequest
    listKind: NodeAllocationRequestList
    plural: nodeallocationrequests
    shortNames:
    - nar
    singular: nodeallocationrequest
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NodeAllocationRequest is the schema for a node allocation request.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              NodeAllocationRequestSpec describes a request to allocate and prepare a node that will
              eventually be part of a deployment manager.
            properties:
              cloudID:
                description: |-
                  CloudID is the identifier of the O-Cloud that generated this request. The hardware
                  manager may want to use this to tag the nodes in its database, and to generate
                  statistics.
                type: string
              extensions:
                additionalProperties:
                  type: string
                description: "Extensions contains additional information that is associated
                  to the request.\n\n\nThis will be populated from the extensions
                  that are defined in the top level of the\ndeployment manager template,
                  in the node profile, and in the node set. For example,\nif the deployment
                  manager template contains this:\n\n\n\textensions:\n\t  \"oran.openshift.io/release\":
                  \"4.16.1\"\n\t  \"oran.acme.com/cores\": \"16\"\n\tnodeProfiles:\n\t-
                  name: high-performance\n\t  extensions:\n\t    \"oran.acme.com/cores\":
                  \"32\"\n\t    \"oran.acme.com/memory\": \"128GiB\"\n\tnodeSets:\n\t-
                  name: control-plane\n       size: 3\n       profile: high-performance\n\t
                  \ extensions:\n\t    \"oran.acme.com/memory\": \"256GiB\"\n\n\nThen
                  three node orders will be generated, and each will contain the following:\n\n\n\textensions:\n\t
                  \ \"oran.acme.com/cores\": \"32\"\n\t  \"oran.acme.com/memory\":
                  \"256GiB\"\n\n\nNote how the extensions not related to the hardware
                  like `oran.openshift.io/release`\naren't copied to the request,
                  and how the `oran.acme.com/memory` extension in the node\nset overrides
                  the same extesions from the node profile."
                type: object
              location:
                description: Location is the geographical location of the requested
                  node.
                type: string
            required:
            - cloudID
            - location
            type: object
          status:
            description: |-
              NodeAllocationRequestStatus describes the observed state of a request to allocate and prepare
              a node that will eventually be part of a deployment manager.
            properties:
              bmc:
                description: |-
                  BMC contains the details to connect to the baseboard managment controller
                  of the node.
                properties:
                  address:
                    description: Address contains the URL for accessing the BMC over
                      the network.
                    type: string
                  credentialsName:
                    description: |-
                      CredentiasName is a reference to a secret containing the credentials. That secret
                      should contain the keys `username` and `password`.
                    type: string
                  disableCertificateVerification:
                    description: |-
                      DisableCertificateVerification disables verification of server certificates when using
                      HTTPS to connect to the BMC. This is required when the server certificate is
                      self-signed, but is insecure because it allows a man-in-the-middle to intercept the
                      connection.
                    type: boolean
                type: object
              conditions:
                description: |-
                  Conditions represents the observations of the current state of the template. Possible
                  values of the condition type are `Fulfilled` and `Failed`.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              nodeID:
                description: |-
                  NodeID is the identifier of the node used by the hardware manager. This will be used
                  by the IMS implementation to reference the node later when it needs to be updated or
                  decomissioned.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
