//go:build go1.22

// Package provisioning provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package provisioning

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for AuthType.
const (
	Basic          AuthType = "Basic"
	OAuth          AuthType = "OAuth"
	ServiceAccount AuthType = "ServiceAccount"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// AllocatedNode Information about an allocated node resource.
type AllocatedNode struct {
	// Bmc Baseboard Management Controller (BMC) configuration for an AllocatedNode.
	Bmc BMC `json:"bmc"`

	// ConfigTransactionId ConfigTransactionId is the identifier of the configuration transaction.
	ConfigTransactionId int64 `json:"configTransactionId"`

	// GroupName Name of the NodeGroup the allocated node is associated with.
	GroupName string `json:"groupName"`

	// HwProfile Hardware profile of the node.
	HwProfile string `json:"hwProfile"`

	// Id Unique AllocatedNode identifier.
	Id string `json:"id"`

	// Interfaces List of network interfaces associated with the node.
	Interfaces []Interface `json:"interfaces"`

	// Status Current status of an AllocatedNode.
	Status AllocatedNodeStatus `json:"status"`
}

// AllocatedNodeStatus Current status of an AllocatedNode.
type AllocatedNodeStatus struct {
	// Conditions Conditions represent the latest available observations of an AllocatedNode's state.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// ObservedConfigTransactionId ObservedConfigTransactionId is the identifier of the observed configuration transaction.
	ObservedConfigTransactionId *int64 `json:"observedConfigTransactionId,omitempty"`
}

// AuthClientConfig AuthClientConfig defines the configuration for different authentication types.
// This struct encapsulates the settings required for ServiceAccount, Basic, and OAuth authentication mechanisms.
type AuthClientConfig struct {
	// BasicAuthSecret Name of a secret (in the current namespace) containing the username
	// and password for Basic authentication. The secret is expected to contain 'username' and 'password' keys.
	// This field is required when Type is set to "Basic".
	BasicAuthSecret *string `json:"basicAuthSecret,omitempty"`

	// OauthConfig OAuthClientConfig defines the configurable client attributes that represent the authentication mechanism.
	// This is currently expected to be a way to acquire a token from an OAuth2 server.
	OauthConfig *OAuthClientConfig `json:"oauthConfig,omitempty"`

	// TlsConfig TLSConfig defines the configuration for TLS-specific attributes.
	TlsConfig *TLSConfig `json:"tlsConfig,omitempty"`

	// Type AuthType defines the authorization type used for authentication.
	Type AuthType `json:"type"`
}

// AuthType AuthType defines the authorization type used for authentication.
type AuthType string

// BMC Baseboard Management Controller (BMC) configuration for an AllocatedNode.
type BMC struct {
	// Address IP address or hostname of the BMC.
	Address string `json:"address"`

	// CredentialsName Name of the credentials used to access the BMC.
	CredentialsName string `json:"credentialsName"`
}

// Callback Callback configuration for hardware plugin notifications.
type Callback struct {
	// AuthClientConfig AuthClientConfig defines the configuration for different authentication types.
	// This struct encapsulates the settings required for ServiceAccount, Basic, and OAuth authentication mechanisms.
	AuthClientConfig *AuthClientConfig `json:"authClientConfig,omitempty"`

	// CaBundleName References a config map that contains a set of custom CA certificates to be used when communicating
	// with the callback server that has its TLS certificate signed by a non-public CA certificate.
	// The config map is expected to contain a single file called 'ca-bundle.crt' containing all trusted CA certificates
	// in PEM format.
	CaBundleName *string `json:"caBundleName,omitempty"`

	// CallbackURL URL to send callback notifications to when hardware operations complete.
	CallbackURL string `json:"callbackURL"`
}

// Condition Condition represents an observation of an object's state.
type Condition struct {
	// LastTransitionTime LastTransitionTime is the last time the condition transitioned from one status to another
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Message is a human-readable message indicating details about the transition
	Message string `json:"message"`

	// Reason Reason for the condition's last transition
	Reason string `json:"reason"`

	// Status Status of the condition, one of True, False, Unknown
	Status string `json:"status"`

	// Type Type of condition
	Type string `json:"type"`
}

// Interface Network interface configuration for an AllocatedNode.
type Interface struct {
	// Label Label or identifier for the network interface.
	Label string `json:"label"`

	// MacAddress MAC address of the network interface.
	MacAddress string `json:"macAddress"`

	// Name Name of the network interface.
	Name string `json:"name"`
}

// NodeAllocationRequest Information about a NodeAllocationRequest resource.
type NodeAllocationRequest struct {
	// BootInterfaceLabel BootInterfaceLabel is the label of the boot interface.
	BootInterfaceLabel string `json:"bootInterfaceLabel"`

	// Callback Callback configuration for hardware plugin notifications.
	Callback *Callback `json:"callback,omitempty"`

	// ClusterId Cluster identifier associated with the NodeAllocationRequest.
	ClusterId string `json:"clusterId"`

	// ConfigTransactionId ConfigTransactionId is the identifier of the configuration transaction.
	ConfigTransactionId int64 `json:"configTransactionId"`

	// NodeGroup List of node groups which this resource is based on.
	NodeGroup []NodeGroup `json:"nodeGroup"`

	// Site Site identifier associated with the NodeAllocationRequest.
	Site string `json:"site"`
}

// NodeAllocationRequestResponse Information (including observed state) about a NodeAllocationRequest resource.
type NodeAllocationRequestResponse struct {
	// NodeAllocationRequest Information about a NodeAllocationRequest resource.
	NodeAllocationRequest *NodeAllocationRequest `json:"NodeAllocationRequest,omitempty"`

	// Status NodeAllocationRequestStatus describes the observed state of a NodeAllocationRequest resource.
	Status *NodeAllocationRequestStatus `json:"Status,omitempty"`
}

// NodeAllocationRequestStatus NodeAllocationRequestStatus describes the observed state of a NodeAllocationRequest resource.
type NodeAllocationRequestStatus struct {
	// Conditions Conditions represent the latest available observations of a NodeAllocationRequest's state.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// ObservedConfigTransactionId ObservedConfigTransactionId is the identifier of the observed configuration transaction.
	ObservedConfigTransactionId *int64 `json:"observedConfigTransactionId,omitempty"`

	// Properties Properties represent the AllocatedNode properties in the group.
	Properties *Properties `json:"properties,omitempty"`

	// SelectedGroups SelectedGroups is a map of group identifiers to their selected values
	SelectedGroups *map[string]string `json:"selectedGroups,omitempty"`
}

// NodeGroup Information about a node group within a NodeAllocationRequest.
type NodeGroup struct {
	// NodeGroupData Configuration data for a NodeGroup.
	NodeGroupData NodeGroupData `json:"nodeGroupData"`
}

// NodeGroupData Configuration data for a NodeGroup.
type NodeGroupData struct {
	// HwProfile Hardware profile associated with the node group data.
	HwProfile string `json:"hwProfile"`

	// Name Name of the node group data.
	Name string `json:"name"`

	// ResourceGroupId Identifier for the resource group.
	ResourceGroupId string `json:"resourceGroupId"`

	// ResourceSelector Selectors for the resource.
	ResourceSelector map[string]string `json:"resourceSelector"`

	// Role Role of the node group data.
	Role string `json:"role"`

	// Size Size of the node group.
	Size int `json:"size"`
}

// OAuthClientConfig OAuthClientConfig defines the configurable client attributes that represent the authentication mechanism.
// This is currently expected to be a way to acquire a token from an OAuth2 server.
type OAuthClientConfig struct {
	// ClientSecretName Name of a secret (in the current namespace) which contains the client-id and
	// client-secret values used by the OAuth client.
	ClientSecretName string `json:"clientSecretName"`

	// Scopes OAuth scope values to request when acquiring a token. Typically, this should be set to
	// "openid" in addition to any other scopes that the SMO specifically requires (e.g., "roles", "groups", etc...)
	// to authorize our requests.
	Scopes []string `json:"scopes"`

	// TokenEndpoint API endpoint used to acquire a token (e.g., /protocol/openid-connect/token) which
	// will be appended to the base URL to form the full URL.
	TokenEndpoint string `json:"tokenEndpoint"`

	// Url Base URL of the authorization server (e.g., https://keycloak.example.com/realms/oran).
	Url string `json:"url"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// Properties Properties represent the AllocatedNode properties in the group.
type Properties struct {
	// NodeNames List of AllocatedNode names in the group.
	NodeNames *[]string `json:"nodeNames,omitempty"`
}

// TLSConfig TLSConfig defines the configuration for TLS-specific attributes.
type TLSConfig struct {
	// SecretName Name of a secret (in the current namespace) containing an X.509 certificate and
	// private key. The secret must include 'tls.key' and 'tls.crt' keys. If the certificate is signed by
	// intermediate CA(s), the full certificate chain should be included in the certificate file, with the
	// leaf certificate first and the root CA last. The certificate's Common Name (CN) or Subject Alternative
	// Name (SAN) should align with the service's fully qualified domain name to support both ingress and
	// outgoing client certificate use cases.
	SecretName string `json:"secretName"`
}

// CreateNodeAllocationRequestJSONRequestBody defines body for CreateNodeAllocationRequest for application/json ContentType.
type CreateNodeAllocationRequestJSONRequestBody = NodeAllocationRequest

// UpdateNodeAllocationRequestJSONRequestBody defines body for UpdateNodeAllocationRequest for application/json ContentType.
type UpdateNodeAllocationRequestJSONRequestBody = NodeAllocationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/provisioning/api-versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes)
	GetAllocatedNodes(w http.ResponseWriter, r *http.Request)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes/{allocatedNodeId})
	GetAllocatedNode(w http.ResponseWriter, r *http.Request, allocatedNodeId string)
	// Get minor API versions
	// (GET /hardware-manager/provisioning/v1/api-versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get NodeAllocationRequest resources
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests)
	GetNodeAllocationRequests(w http.ResponseWriter, r *http.Request)
	// Create NodeAllocationRequest resource
	// (POST /hardware-manager/provisioning/v1/node-allocation-requests)
	CreateNodeAllocationRequest(w http.ResponseWriter, r *http.Request)
	// Delete NodeAllocationRequest
	// (DELETE /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	DeleteNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
	// Retrieve the NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	GetNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
	// Modify all fields of the NodeAllocationRequest.
	// (PUT /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	UpdateNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
	// Retrieve the AllocatedNode resources associated with a NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}/allocated-nodes)
	GetAllocatedNodesFromNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllocatedNodes operation middleware
func (siw *ServerInterfaceWrapper) GetAllocatedNodes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllocatedNodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllocatedNode operation middleware
func (siw *ServerInterfaceWrapper) GetAllocatedNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "allocatedNodeId" -------------
	var allocatedNodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "allocatedNodeId", r.PathValue("allocatedNodeId"), &allocatedNodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "allocatedNodeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllocatedNode(w, r, allocatedNodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeAllocationRequests operation middleware
func (siw *ServerInterfaceWrapper) GetNodeAllocationRequests(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeAllocationRequests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNodeAllocationRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) GetNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllocatedNodesFromNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) GetAllocatedNodesFromNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllocatedNodesFromNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/api-versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/allocated-nodes", wrapper.GetAllocatedNodes)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/allocated-nodes/{allocatedNodeId}", wrapper.GetAllocatedNode)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/api-versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests", wrapper.GetNodeAllocationRequests)
	m.HandleFunc("POST "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests", wrapper.CreateNodeAllocationRequest)
	m.HandleFunc("DELETE "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}", wrapper.DeleteNodeAllocationRequest)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}", wrapper.GetNodeAllocationRequest)
	m.HandleFunc("PUT "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}", wrapper.UpdateNodeAllocationRequest)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}/allocated-nodes", wrapper.GetAllocatedNodesFromNodeAllocationRequest)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesRequestObject struct {
}

type GetAllocatedNodesResponseObject interface {
	VisitGetAllocatedNodesResponse(w http.ResponseWriter) error
}

type GetAllocatedNodes200JSONResponse []AllocatedNode

func (response GetAllocatedNodes200JSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes400ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes401ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes403ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes500ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodeRequestObject struct {
	AllocatedNodeId string `json:"allocatedNodeId"`
}

type GetAllocatedNodeResponseObject interface {
	VisitGetAllocatedNodeResponse(w http.ResponseWriter) error
}

type GetAllocatedNode200JSONResponse AllocatedNode

func (response GetAllocatedNode200JSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode400ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode401ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode403ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode404ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode500ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequestsRequestObject struct {
}

type GetNodeAllocationRequestsResponseObject interface {
	VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error
}

type GetNodeAllocationRequests200JSONResponse []NodeAllocationRequestResponse

func (response GetNodeAllocationRequests200JSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests400ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests401ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests403ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests500ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequestRequestObject struct {
	Body *CreateNodeAllocationRequestJSONRequestBody
}

type CreateNodeAllocationRequestResponseObject interface {
	VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type CreateNodeAllocationRequest202JSONResponse string

func (response CreateNodeAllocationRequest202JSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
}

type DeleteNodeAllocationRequestResponseObject interface {
	VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type DeleteNodeAllocationRequest202JSONResponse string

func (response DeleteNodeAllocationRequest202JSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest404ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest404ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
}

type GetNodeAllocationRequestResponseObject interface {
	VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type GetNodeAllocationRequest200JSONResponse NodeAllocationRequestResponse

func (response GetNodeAllocationRequest200JSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest404ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
	Body                    *UpdateNodeAllocationRequestJSONRequestBody
}

type UpdateNodeAllocationRequestResponseObject interface {
	VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type UpdateNodeAllocationRequest202JSONResponse string

func (response UpdateNodeAllocationRequest202JSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest404ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest404ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
}

type GetAllocatedNodesFromNodeAllocationRequestResponseObject interface {
	VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type GetAllocatedNodesFromNodeAllocationRequest200JSONResponse []AllocatedNode

func (response GetAllocatedNodesFromNodeAllocationRequest200JSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest404ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/provisioning/api-versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes)
	GetAllocatedNodes(ctx context.Context, request GetAllocatedNodesRequestObject) (GetAllocatedNodesResponseObject, error)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes/{allocatedNodeId})
	GetAllocatedNode(ctx context.Context, request GetAllocatedNodeRequestObject) (GetAllocatedNodeResponseObject, error)
	// Get minor API versions
	// (GET /hardware-manager/provisioning/v1/api-versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get NodeAllocationRequest resources
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests)
	GetNodeAllocationRequests(ctx context.Context, request GetNodeAllocationRequestsRequestObject) (GetNodeAllocationRequestsResponseObject, error)
	// Create NodeAllocationRequest resource
	// (POST /hardware-manager/provisioning/v1/node-allocation-requests)
	CreateNodeAllocationRequest(ctx context.Context, request CreateNodeAllocationRequestRequestObject) (CreateNodeAllocationRequestResponseObject, error)
	// Delete NodeAllocationRequest
	// (DELETE /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	DeleteNodeAllocationRequest(ctx context.Context, request DeleteNodeAllocationRequestRequestObject) (DeleteNodeAllocationRequestResponseObject, error)
	// Retrieve the NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	GetNodeAllocationRequest(ctx context.Context, request GetNodeAllocationRequestRequestObject) (GetNodeAllocationRequestResponseObject, error)
	// Modify all fields of the NodeAllocationRequest.
	// (PUT /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	UpdateNodeAllocationRequest(ctx context.Context, request UpdateNodeAllocationRequestRequestObject) (UpdateNodeAllocationRequestResponseObject, error)
	// Retrieve the AllocatedNode resources associated with a NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}/allocated-nodes)
	GetAllocatedNodesFromNodeAllocationRequest(ctx context.Context, request GetAllocatedNodesFromNodeAllocationRequestRequestObject) (GetAllocatedNodesFromNodeAllocationRequestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllocatedNodes operation middleware
func (sh *strictHandler) GetAllocatedNodes(w http.ResponseWriter, r *http.Request) {
	var request GetAllocatedNodesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllocatedNodes(ctx, request.(GetAllocatedNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllocatedNodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllocatedNodesResponseObject); ok {
		if err := validResponse.VisitGetAllocatedNodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllocatedNode operation middleware
func (sh *strictHandler) GetAllocatedNode(w http.ResponseWriter, r *http.Request, allocatedNodeId string) {
	var request GetAllocatedNodeRequestObject

	request.AllocatedNodeId = allocatedNodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllocatedNode(ctx, request.(GetAllocatedNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllocatedNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllocatedNodeResponseObject); ok {
		if err := validResponse.VisitGetAllocatedNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeAllocationRequests operation middleware
func (sh *strictHandler) GetNodeAllocationRequests(w http.ResponseWriter, r *http.Request) {
	var request GetNodeAllocationRequestsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeAllocationRequests(ctx, request.(GetNodeAllocationRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeAllocationRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeAllocationRequestsResponseObject); ok {
		if err := validResponse.VisitGetNodeAllocationRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNodeAllocationRequest operation middleware
func (sh *strictHandler) CreateNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateNodeAllocationRequestRequestObject

	var body CreateNodeAllocationRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNodeAllocationRequest(ctx, request.(CreateNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitCreateNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteNodeAllocationRequest operation middleware
func (sh *strictHandler) DeleteNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request DeleteNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNodeAllocationRequest(ctx, request.(DeleteNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitDeleteNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeAllocationRequest operation middleware
func (sh *strictHandler) GetNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request GetNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeAllocationRequest(ctx, request.(GetNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitGetNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateNodeAllocationRequest operation middleware
func (sh *strictHandler) UpdateNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request UpdateNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	var body UpdateNodeAllocationRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateNodeAllocationRequest(ctx, request.(UpdateNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitUpdateNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllocatedNodesFromNodeAllocationRequest operation middleware
func (sh *strictHandler) GetAllocatedNodesFromNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request GetAllocatedNodesFromNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllocatedNodesFromNodeAllocationRequest(ctx, request.(GetAllocatedNodesFromNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllocatedNodesFromNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllocatedNodesFromNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
