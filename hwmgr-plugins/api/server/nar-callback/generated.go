//go:build go1.22

// Package narcallback provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package narcallback

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for CallbackPayloadStatus.
const (
	Completed                    CallbackPayloadStatus = "completed"
	ConfigurationApplied         CallbackPayloadStatus = "configurationApplied"
	ConfigurationUpdateRequested CallbackPayloadStatus = "configurationUpdateRequested"
	Failed                       CallbackPayloadStatus = "failed"
	InProgress                   CallbackPayloadStatus = "inProgress"
	InvalidInput                 CallbackPayloadStatus = "invalidInput"
	NotInitialized               CallbackPayloadStatus = "notInitialized"
	Pending                      CallbackPayloadStatus = "pending"
	TimedOut                     CallbackPayloadStatus = "timedOut"
	Unprovisioned                CallbackPayloadStatus = "unprovisioned"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// CallbackPayload Payload structure for hardware plugin callbacks
type CallbackPayload struct {
	// Error Error message (only provided when status is failed).
	Error *string `json:"error,omitempty"`

	// NodeAllocationRequestId The ID of the NodeAllocationRequest this callback relates to.
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`

	// Status The current status of the NodeAllocationRequest operation.
	Status CallbackPayloadStatus `json:"status"`

	// Timestamp The timestamp when this status update occurred.
	Timestamp time.Time `json:"timestamp"`
}

// CallbackPayloadStatus The current status of the NodeAllocationRequest operation.
type CallbackPayloadStatus string

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// ProvisioningRequestCallbackJSONRequestBody defines body for ProvisioningRequestCallback for application/json ContentType.
type ProvisioningRequestCallbackJSONRequestBody = CallbackPayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /nar-callback/api-versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Receive callback for ProvisioningRequest status update
	// (POST /nar-callback/provisioning-requests/{provisioningRequestName})
	ProvisioningRequestCallback(w http.ResponseWriter, r *http.Request, provisioningRequestName string)
	// Get minor API versions
	// (GET /nar-callback/v1/api-versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProvisioningRequestCallback operation middleware
func (siw *ServerInterfaceWrapper) ProvisioningRequestCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestName" -------------
	var provisioningRequestName string

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestName", r.PathValue("provisioningRequestName"), &provisioningRequestName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProvisioningRequestCallback(w, r, provisioningRequestName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/nar-callback/api-versions", wrapper.GetAllVersions)
	m.HandleFunc("POST "+options.BaseURL+"/nar-callback/provisioning-requests/{provisioningRequestName}", wrapper.ProvisioningRequestCallback)
	m.HandleFunc("GET "+options.BaseURL+"/nar-callback/v1/api-versions", wrapper.GetMinorVersions)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProvisioningRequestCallbackRequestObject struct {
	ProvisioningRequestName string `json:"provisioningRequestName"`
	Body                    *ProvisioningRequestCallbackJSONRequestBody
}

type ProvisioningRequestCallbackResponseObject interface {
	VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error
}

type ProvisioningRequestCallback200Response struct {
}

func (response ProvisioningRequestCallback200Response) VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ProvisioningRequestCallback400ApplicationProblemPlusJSONResponse ProblemDetails

func (response ProvisioningRequestCallback400ApplicationProblemPlusJSONResponse) VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProvisioningRequestCallback401ApplicationProblemPlusJSONResponse ProblemDetails

func (response ProvisioningRequestCallback401ApplicationProblemPlusJSONResponse) VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProvisioningRequestCallback403ApplicationProblemPlusJSONResponse ProblemDetails

func (response ProvisioningRequestCallback403ApplicationProblemPlusJSONResponse) VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProvisioningRequestCallback404ApplicationProblemPlusJSONResponse ProblemDetails

func (response ProvisioningRequestCallback404ApplicationProblemPlusJSONResponse) VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProvisioningRequestCallback500ApplicationProblemPlusJSONResponse ProblemDetails

func (response ProvisioningRequestCallback500ApplicationProblemPlusJSONResponse) VisitProvisioningRequestCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /nar-callback/api-versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Receive callback for ProvisioningRequest status update
	// (POST /nar-callback/provisioning-requests/{provisioningRequestName})
	ProvisioningRequestCallback(ctx context.Context, request ProvisioningRequestCallbackRequestObject) (ProvisioningRequestCallbackResponseObject, error)
	// Get minor API versions
	// (GET /nar-callback/v1/api-versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProvisioningRequestCallback operation middleware
func (sh *strictHandler) ProvisioningRequestCallback(w http.ResponseWriter, r *http.Request, provisioningRequestName string) {
	var request ProvisioningRequestCallbackRequestObject

	request.ProvisioningRequestName = provisioningRequestName

	var body ProvisioningRequestCallbackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProvisioningRequestCallback(ctx, request.(ProvisioningRequestCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProvisioningRequestCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProvisioningRequestCallbackResponseObject); ok {
		if err := validResponse.VisitProvisioningRequestCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//hKjoLUFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
