// Package narcallback provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package narcallback

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CallbackPayloadStatus.
const (
	Completed                    CallbackPayloadStatus = "completed"
	ConfigurationApplied         CallbackPayloadStatus = "configurationApplied"
	ConfigurationUpdateRequested CallbackPayloadStatus = "configurationUpdateRequested"
	Failed                       CallbackPayloadStatus = "failed"
	InProgress                   CallbackPayloadStatus = "inProgress"
	InvalidInput                 CallbackPayloadStatus = "invalidInput"
	NotInitialized               CallbackPayloadStatus = "notInitialized"
	Pending                      CallbackPayloadStatus = "pending"
	TimedOut                     CallbackPayloadStatus = "timedOut"
	Unprovisioned                CallbackPayloadStatus = "unprovisioned"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// CallbackPayload Payload structure for hardware plugin callbacks
type CallbackPayload struct {
	// Error Error message (only provided when status is failed).
	Error *string `json:"error,omitempty"`

	// NodeAllocationRequestId The ID of the NodeAllocationRequest this callback relates to.
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`

	// Status The current status of the NodeAllocationRequest operation.
	Status CallbackPayloadStatus `json:"status"`

	// Timestamp The timestamp when this status update occurred.
	Timestamp time.Time `json:"timestamp"`
}

// CallbackPayloadStatus The current status of the NodeAllocationRequest operation.
type CallbackPayloadStatus string

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// ProvisioningRequestCallbackJSONRequestBody defines body for ProvisioningRequestCallback for application/json ContentType.
type ProvisioningRequestCallbackJSONRequestBody = CallbackPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllVersions request
	GetAllVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProvisioningRequestCallbackWithBody request with any body
	ProvisioningRequestCallbackWithBody(ctx context.Context, provisioningRequestName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProvisioningRequestCallback(ctx context.Context, provisioningRequestName string, body ProvisioningRequestCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMinorVersions request
	GetMinorVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProvisioningRequestCallbackWithBody(ctx context.Context, provisioningRequestName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvisioningRequestCallbackRequestWithBody(c.Server, provisioningRequestName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProvisioningRequestCallback(ctx context.Context, provisioningRequestName string, body ProvisioningRequestCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvisioningRequestCallbackRequest(c.Server, provisioningRequestName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMinorVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMinorVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllVersionsRequest generates requests for GetAllVersions
func NewGetAllVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nar-callback/api-versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProvisioningRequestCallbackRequest calls the generic ProvisioningRequestCallback builder with application/json body
func NewProvisioningRequestCallbackRequest(server string, provisioningRequestName string, body ProvisioningRequestCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProvisioningRequestCallbackRequestWithBody(server, provisioningRequestName, "application/json", bodyReader)
}

// NewProvisioningRequestCallbackRequestWithBody generates requests for ProvisioningRequestCallback with any type of body
func NewProvisioningRequestCallbackRequestWithBody(server string, provisioningRequestName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provisioningRequestName", runtime.ParamLocationPath, provisioningRequestName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nar-callback/provisioning-requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMinorVersionsRequest generates requests for GetMinorVersions
func NewGetMinorVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nar-callback/v1/api-versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllVersionsWithResponse request
	GetAllVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllVersionsResponse, error)

	// ProvisioningRequestCallbackWithBodyWithResponse request with any body
	ProvisioningRequestCallbackWithBodyWithResponse(ctx context.Context, provisioningRequestName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProvisioningRequestCallbackResponse, error)

	ProvisioningRequestCallbackWithResponse(ctx context.Context, provisioningRequestName string, body ProvisioningRequestCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*ProvisioningRequestCallbackResponse, error)

	// GetMinorVersionsWithResponse request
	GetMinorVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinorVersionsResponse, error)
}

type GetAllVersionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *APIVersions
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAllVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProvisioningRequestCallbackResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ProvisioningRequestCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProvisioningRequestCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMinorVersionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *APIVersions
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetMinorVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMinorVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllVersionsWithResponse request returning *GetAllVersionsResponse
func (c *ClientWithResponses) GetAllVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllVersionsResponse, error) {
	rsp, err := c.GetAllVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllVersionsResponse(rsp)
}

// ProvisioningRequestCallbackWithBodyWithResponse request with arbitrary body returning *ProvisioningRequestCallbackResponse
func (c *ClientWithResponses) ProvisioningRequestCallbackWithBodyWithResponse(ctx context.Context, provisioningRequestName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProvisioningRequestCallbackResponse, error) {
	rsp, err := c.ProvisioningRequestCallbackWithBody(ctx, provisioningRequestName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvisioningRequestCallbackResponse(rsp)
}

func (c *ClientWithResponses) ProvisioningRequestCallbackWithResponse(ctx context.Context, provisioningRequestName string, body ProvisioningRequestCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*ProvisioningRequestCallbackResponse, error) {
	rsp, err := c.ProvisioningRequestCallback(ctx, provisioningRequestName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvisioningRequestCallbackResponse(rsp)
}

// GetMinorVersionsWithResponse request returning *GetMinorVersionsResponse
func (c *ClientWithResponses) GetMinorVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinorVersionsResponse, error) {
	rsp, err := c.GetMinorVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMinorVersionsResponse(rsp)
}

// ParseGetAllVersionsResponse parses an HTTP response from a GetAllVersionsWithResponse call
func ParseGetAllVersionsResponse(rsp *http.Response) (*GetAllVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseProvisioningRequestCallbackResponse parses an HTTP response from a ProvisioningRequestCallbackWithResponse call
func ParseProvisioningRequestCallbackResponse(rsp *http.Response) (*ProvisioningRequestCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProvisioningRequestCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetMinorVersionsResponse parses an HTTP response from a GetMinorVersionsWithResponse call
func ParseGetMinorVersionsResponse(rsp *http.Response) (*GetMinorVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMinorVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//hKjoLUFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
