// Package provisioning provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package provisioning

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// AllocatedNode Information about an allocated node resource.
type AllocatedNode struct {
	// Bmc Baseboard Management Controller (BMC) configuration for an AllocatedNode.
	Bmc BMC `json:"bmc"`

	// ConfigTransactionId ConfigTransactionId is the identifier of the configuration transaction.
	ConfigTransactionId int64 `json:"configTransactionId"`

	// GroupName Name of the NodeGroup the allocated node is associated with.
	GroupName string `json:"groupName"`

	// HwProfile Hardware profile of the node.
	HwProfile string `json:"hwProfile"`

	// Id Unique AllocatedNode identifier.
	Id string `json:"id"`

	// Interfaces List of network interfaces associated with the node.
	Interfaces []Interface `json:"interfaces"`

	// Status Current status of an AllocatedNode.
	Status AllocatedNodeStatus `json:"status"`
}

// AllocatedNodeStatus Current status of an AllocatedNode.
type AllocatedNodeStatus struct {
	// Conditions Conditions represent the latest available observations of an AllocatedNode's state.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// ObservedConfigTransactionId ObservedConfigTransactionId is the identifier of the observed configuration transaction.
	ObservedConfigTransactionId *int64 `json:"observedConfigTransactionId,omitempty"`
}

// BMC Baseboard Management Controller (BMC) configuration for an AllocatedNode.
type BMC struct {
	// Address IP address or hostname of the BMC.
	Address string `json:"address"`

	// CredentialsName Name of the credentials used to access the BMC.
	CredentialsName string `json:"credentialsName"`
}

// Condition Condition represents an observation of an object's state.
type Condition struct {
	// LastTransitionTime LastTransitionTime is the last time the condition transitioned from one status to another
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Message is a human-readable message indicating details about the transition
	Message string `json:"message"`

	// Reason Reason for the condition's last transition
	Reason string `json:"reason"`

	// Status Status of the condition, one of True, False, Unknown
	Status string `json:"status"`

	// Type Type of condition
	Type string `json:"type"`
}

// Interface Network interface configuration for an AllocatedNode.
type Interface struct {
	// Label Label or identifier for the network interface.
	Label string `json:"label"`

	// MacAddress MAC address of the network interface.
	MacAddress string `json:"macAddress"`

	// Name Name of the network interface.
	Name string `json:"name"`
}

// NodeAllocationRequest Information about a NodeAllocationRequest resource.
type NodeAllocationRequest struct {
	// BootInterfaceLabel BootInterfaceLabel is the label of the boot interface.
	BootInterfaceLabel string `json:"bootInterfaceLabel"`

	// ClusterId Cluster identifier associated with the NodeAllocationRequest.
	ClusterId string `json:"clusterId"`

	// ConfigTransactionId ConfigTransactionId is the identifier of the configuration transaction.
	ConfigTransactionId int64 `json:"configTransactionId"`

	// NodeGroup List of node groups which this resource is based on.
	NodeGroup []NodeGroup `json:"nodeGroup"`

	// Site Site identifier associated with the NodeAllocationRequest.
	Site string `json:"site"`
}

// NodeAllocationRequestResponse Information (including observed state) about a NodeAllocationRequest resource.
type NodeAllocationRequestResponse struct {
	// NodeAllocationRequest Information about a NodeAllocationRequest resource.
	NodeAllocationRequest *NodeAllocationRequest `json:"NodeAllocationRequest,omitempty"`

	// Status NodeAllocationRequestStatus describes the observed state of a NodeAllocationRequest resource.
	Status *NodeAllocationRequestStatus `json:"Status,omitempty"`
}

// NodeAllocationRequestStatus NodeAllocationRequestStatus describes the observed state of a NodeAllocationRequest resource.
type NodeAllocationRequestStatus struct {
	// Conditions Conditions represent the latest available observations of a NodeAllocationRequest's state.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// ObservedConfigTransactionId ObservedConfigTransactionId is the identifier of the observed configuration transaction.
	ObservedConfigTransactionId *int64 `json:"observedConfigTransactionId,omitempty"`

	// Properties Properties represent the AllocatedNode properties in the group.
	Properties *Properties `json:"properties,omitempty"`

	// SelectedGroups SelectedGroups is a map of group identifiers to their selected values
	SelectedGroups *map[string]string `json:"selectedGroups,omitempty"`
}

// NodeGroup Information about a node group within a NodeAllocationRequest.
type NodeGroup struct {
	// NodeGroupData Configuration data for a NodeGroup.
	NodeGroupData NodeGroupData `json:"nodeGroupData"`
}

// NodeGroupData Configuration data for a NodeGroup.
type NodeGroupData struct {
	// HwProfile Hardware profile associated with the node group data.
	HwProfile string `json:"hwProfile"`

	// Name Name of the node group data.
	Name string `json:"name"`

	// ResourceGroupId Identifier for the resource group.
	ResourceGroupId string `json:"resourceGroupId"`

	// ResourceSelector Selectors for the resource.
	ResourceSelector map[string]string `json:"resourceSelector"`

	// Role Role of the node group data.
	Role string `json:"role"`

	// Size Size of the node group.
	Size int `json:"size"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// Properties Properties represent the AllocatedNode properties in the group.
type Properties struct {
	// NodeNames List of AllocatedNode names in the group.
	NodeNames *[]string `json:"nodeNames,omitempty"`
}

// CreateNodeAllocationRequestJSONRequestBody defines body for CreateNodeAllocationRequest for application/json ContentType.
type CreateNodeAllocationRequestJSONRequestBody = NodeAllocationRequest

// UpdateNodeAllocationRequestJSONRequestBody defines body for UpdateNodeAllocationRequest for application/json ContentType.
type UpdateNodeAllocationRequestJSONRequestBody = NodeAllocationRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllVersions request
	GetAllVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllocatedNodes request
	GetAllocatedNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllocatedNode request
	GetAllocatedNode(ctx context.Context, allocatedNodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMinorVersions request
	GetMinorVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeAllocationRequests request
	GetNodeAllocationRequests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNodeAllocationRequestWithBody request with any body
	CreateNodeAllocationRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNodeAllocationRequest(ctx context.Context, body CreateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNodeAllocationRequest request
	DeleteNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeAllocationRequest request
	GetNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNodeAllocationRequestWithBody request with any body
	UpdateNodeAllocationRequestWithBody(ctx context.Context, nodeAllocationRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, body UpdateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllocatedNodesFromNodeAllocationRequest request
	GetAllocatedNodesFromNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllocatedNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllocatedNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllocatedNode(ctx context.Context, allocatedNodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllocatedNodeRequest(c.Server, allocatedNodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMinorVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMinorVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeAllocationRequests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeAllocationRequestsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNodeAllocationRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNodeAllocationRequestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNodeAllocationRequest(ctx context.Context, body CreateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNodeAllocationRequestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNodeAllocationRequestRequest(c.Server, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeAllocationRequestRequest(c.Server, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAllocationRequestWithBody(ctx context.Context, nodeAllocationRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAllocationRequestRequestWithBody(c.Server, nodeAllocationRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, body UpdateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAllocationRequestRequest(c.Server, nodeAllocationRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllocatedNodesFromNodeAllocationRequest(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllocatedNodesFromNodeAllocationRequestRequest(c.Server, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllVersionsRequest generates requests for GetAllVersions
func NewGetAllVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/api-versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllocatedNodesRequest generates requests for GetAllocatedNodes
func NewGetAllocatedNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/allocated-nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllocatedNodeRequest generates requests for GetAllocatedNode
func NewGetAllocatedNodeRequest(server string, allocatedNodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "allocatedNodeId", runtime.ParamLocationPath, allocatedNodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/allocated-nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMinorVersionsRequest generates requests for GetMinorVersions
func NewGetMinorVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/api-versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeAllocationRequestsRequest generates requests for GetNodeAllocationRequests
func NewGetNodeAllocationRequestsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/node-allocation-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNodeAllocationRequestRequest calls the generic CreateNodeAllocationRequest builder with application/json body
func NewCreateNodeAllocationRequestRequest(server string, body CreateNodeAllocationRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNodeAllocationRequestRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNodeAllocationRequestRequestWithBody generates requests for CreateNodeAllocationRequest with any type of body
func NewCreateNodeAllocationRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/node-allocation-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNodeAllocationRequestRequest generates requests for DeleteNodeAllocationRequest
func NewDeleteNodeAllocationRequestRequest(server string, nodeAllocationRequestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeAllocationRequestId", runtime.ParamLocationPath, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/node-allocation-requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeAllocationRequestRequest generates requests for GetNodeAllocationRequest
func NewGetNodeAllocationRequestRequest(server string, nodeAllocationRequestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeAllocationRequestId", runtime.ParamLocationPath, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/node-allocation-requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNodeAllocationRequestRequest calls the generic UpdateNodeAllocationRequest builder with application/json body
func NewUpdateNodeAllocationRequestRequest(server string, nodeAllocationRequestId string, body UpdateNodeAllocationRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeAllocationRequestRequestWithBody(server, nodeAllocationRequestId, "application/json", bodyReader)
}

// NewUpdateNodeAllocationRequestRequestWithBody generates requests for UpdateNodeAllocationRequest with any type of body
func NewUpdateNodeAllocationRequestRequestWithBody(server string, nodeAllocationRequestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeAllocationRequestId", runtime.ParamLocationPath, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/node-allocation-requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllocatedNodesFromNodeAllocationRequestRequest generates requests for GetAllocatedNodesFromNodeAllocationRequest
func NewGetAllocatedNodesFromNodeAllocationRequestRequest(server string, nodeAllocationRequestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeAllocationRequestId", runtime.ParamLocationPath, nodeAllocationRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware-manager/provisioning/v1/node-allocation-requests/%s/allocated-nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllVersionsWithResponse request
	GetAllVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllVersionsResponse, error)

	// GetAllocatedNodesWithResponse request
	GetAllocatedNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllocatedNodesResponse, error)

	// GetAllocatedNodeWithResponse request
	GetAllocatedNodeWithResponse(ctx context.Context, allocatedNodeId string, reqEditors ...RequestEditorFn) (*GetAllocatedNodeResponse, error)

	// GetMinorVersionsWithResponse request
	GetMinorVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinorVersionsResponse, error)

	// GetNodeAllocationRequestsWithResponse request
	GetNodeAllocationRequestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodeAllocationRequestsResponse, error)

	// CreateNodeAllocationRequestWithBodyWithResponse request with any body
	CreateNodeAllocationRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNodeAllocationRequestResponse, error)

	CreateNodeAllocationRequestWithResponse(ctx context.Context, body CreateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNodeAllocationRequestResponse, error)

	// DeleteNodeAllocationRequestWithResponse request
	DeleteNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*DeleteNodeAllocationRequestResponse, error)

	// GetNodeAllocationRequestWithResponse request
	GetNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*GetNodeAllocationRequestResponse, error)

	// UpdateNodeAllocationRequestWithBodyWithResponse request with any body
	UpdateNodeAllocationRequestWithBodyWithResponse(ctx context.Context, nodeAllocationRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAllocationRequestResponse, error)

	UpdateNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, body UpdateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAllocationRequestResponse, error)

	// GetAllocatedNodesFromNodeAllocationRequestWithResponse request
	GetAllocatedNodesFromNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*GetAllocatedNodesFromNodeAllocationRequestResponse, error)
}

type GetAllVersionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *APIVersions
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAllVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllocatedNodesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]AllocatedNode
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAllocatedNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllocatedNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllocatedNodeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AllocatedNode
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAllocatedNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllocatedNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMinorVersionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *APIVersions
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetMinorVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMinorVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeAllocationRequestsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]NodeAllocationRequestResponse
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetNodeAllocationRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeAllocationRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNodeAllocationRequestResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON202                   *string
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateNodeAllocationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNodeAllocationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNodeAllocationRequestResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON202                   *string
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteNodeAllocationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNodeAllocationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeAllocationRequestResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *NodeAllocationRequestResponse
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetNodeAllocationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeAllocationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNodeAllocationRequestResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON202                   *string
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateNodeAllocationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeAllocationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllocatedNodesFromNodeAllocationRequestResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]AllocatedNode
	ApplicationProblemJSON400 *ProblemDetails
	ApplicationProblemJSON401 *ProblemDetails
	ApplicationProblemJSON403 *ProblemDetails
	ApplicationProblemJSON404 *ProblemDetails
	ApplicationProblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAllocatedNodesFromNodeAllocationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllocatedNodesFromNodeAllocationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllVersionsWithResponse request returning *GetAllVersionsResponse
func (c *ClientWithResponses) GetAllVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllVersionsResponse, error) {
	rsp, err := c.GetAllVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllVersionsResponse(rsp)
}

// GetAllocatedNodesWithResponse request returning *GetAllocatedNodesResponse
func (c *ClientWithResponses) GetAllocatedNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllocatedNodesResponse, error) {
	rsp, err := c.GetAllocatedNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllocatedNodesResponse(rsp)
}

// GetAllocatedNodeWithResponse request returning *GetAllocatedNodeResponse
func (c *ClientWithResponses) GetAllocatedNodeWithResponse(ctx context.Context, allocatedNodeId string, reqEditors ...RequestEditorFn) (*GetAllocatedNodeResponse, error) {
	rsp, err := c.GetAllocatedNode(ctx, allocatedNodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllocatedNodeResponse(rsp)
}

// GetMinorVersionsWithResponse request returning *GetMinorVersionsResponse
func (c *ClientWithResponses) GetMinorVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMinorVersionsResponse, error) {
	rsp, err := c.GetMinorVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMinorVersionsResponse(rsp)
}

// GetNodeAllocationRequestsWithResponse request returning *GetNodeAllocationRequestsResponse
func (c *ClientWithResponses) GetNodeAllocationRequestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodeAllocationRequestsResponse, error) {
	rsp, err := c.GetNodeAllocationRequests(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeAllocationRequestsResponse(rsp)
}

// CreateNodeAllocationRequestWithBodyWithResponse request with arbitrary body returning *CreateNodeAllocationRequestResponse
func (c *ClientWithResponses) CreateNodeAllocationRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNodeAllocationRequestResponse, error) {
	rsp, err := c.CreateNodeAllocationRequestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNodeAllocationRequestResponse(rsp)
}

func (c *ClientWithResponses) CreateNodeAllocationRequestWithResponse(ctx context.Context, body CreateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNodeAllocationRequestResponse, error) {
	rsp, err := c.CreateNodeAllocationRequest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNodeAllocationRequestResponse(rsp)
}

// DeleteNodeAllocationRequestWithResponse request returning *DeleteNodeAllocationRequestResponse
func (c *ClientWithResponses) DeleteNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*DeleteNodeAllocationRequestResponse, error) {
	rsp, err := c.DeleteNodeAllocationRequest(ctx, nodeAllocationRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNodeAllocationRequestResponse(rsp)
}

// GetNodeAllocationRequestWithResponse request returning *GetNodeAllocationRequestResponse
func (c *ClientWithResponses) GetNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*GetNodeAllocationRequestResponse, error) {
	rsp, err := c.GetNodeAllocationRequest(ctx, nodeAllocationRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeAllocationRequestResponse(rsp)
}

// UpdateNodeAllocationRequestWithBodyWithResponse request with arbitrary body returning *UpdateNodeAllocationRequestResponse
func (c *ClientWithResponses) UpdateNodeAllocationRequestWithBodyWithResponse(ctx context.Context, nodeAllocationRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAllocationRequestResponse, error) {
	rsp, err := c.UpdateNodeAllocationRequestWithBody(ctx, nodeAllocationRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAllocationRequestResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, body UpdateNodeAllocationRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAllocationRequestResponse, error) {
	rsp, err := c.UpdateNodeAllocationRequest(ctx, nodeAllocationRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAllocationRequestResponse(rsp)
}

// GetAllocatedNodesFromNodeAllocationRequestWithResponse request returning *GetAllocatedNodesFromNodeAllocationRequestResponse
func (c *ClientWithResponses) GetAllocatedNodesFromNodeAllocationRequestWithResponse(ctx context.Context, nodeAllocationRequestId string, reqEditors ...RequestEditorFn) (*GetAllocatedNodesFromNodeAllocationRequestResponse, error) {
	rsp, err := c.GetAllocatedNodesFromNodeAllocationRequest(ctx, nodeAllocationRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllocatedNodesFromNodeAllocationRequestResponse(rsp)
}

// ParseGetAllVersionsResponse parses an HTTP response from a GetAllVersionsWithResponse call
func ParseGetAllVersionsResponse(rsp *http.Response) (*GetAllVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAllocatedNodesResponse parses an HTTP response from a GetAllocatedNodesWithResponse call
func ParseGetAllocatedNodesResponse(rsp *http.Response) (*GetAllocatedNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllocatedNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AllocatedNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAllocatedNodeResponse parses an HTTP response from a GetAllocatedNodeWithResponse call
func ParseGetAllocatedNodeResponse(rsp *http.Response) (*GetAllocatedNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllocatedNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllocatedNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetMinorVersionsResponse parses an HTTP response from a GetMinorVersionsWithResponse call
func ParseGetMinorVersionsResponse(rsp *http.Response) (*GetMinorVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMinorVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetNodeAllocationRequestsResponse parses an HTTP response from a GetNodeAllocationRequestsWithResponse call
func ParseGetNodeAllocationRequestsResponse(rsp *http.Response) (*GetNodeAllocationRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeAllocationRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NodeAllocationRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateNodeAllocationRequestResponse parses an HTTP response from a CreateNodeAllocationRequestWithResponse call
func ParseCreateNodeAllocationRequestResponse(rsp *http.Response) (*CreateNodeAllocationRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNodeAllocationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteNodeAllocationRequestResponse parses an HTTP response from a DeleteNodeAllocationRequestWithResponse call
func ParseDeleteNodeAllocationRequestResponse(rsp *http.Response) (*DeleteNodeAllocationRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNodeAllocationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetNodeAllocationRequestResponse parses an HTTP response from a GetNodeAllocationRequestWithResponse call
func ParseGetNodeAllocationRequestResponse(rsp *http.Response) (*GetNodeAllocationRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeAllocationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeAllocationRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateNodeAllocationRequestResponse parses an HTTP response from a UpdateNodeAllocationRequestWithResponse call
func ParseUpdateNodeAllocationRequestResponse(rsp *http.Response) (*UpdateNodeAllocationRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeAllocationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAllocatedNodesFromNodeAllocationRequestResponse parses an HTTP response from a GetAllocatedNodesFromNodeAllocationRequestWithResponse call
func ParseGetAllocatedNodesFromNodeAllocationRequestResponse(rsp *http.Response) (*GetAllocatedNodesFromNodeAllocationRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllocatedNodesFromNodeAllocationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AllocatedNode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationProblemJSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ik9bq9vd7f4fAAD//+3u5GcASQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
