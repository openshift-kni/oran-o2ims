//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// AllocatedNode Information about an allocated node resource.
type AllocatedNode struct {
	// Bmc Baseboard Management Controller (BMC) configuration for an AllocatedNode.
	Bmc BMC `json:"bmc"`

	// HwProfile Hardware profile of the node.
	HwProfile string `json:"hwProfile"`

	// Interfaces List of network interfaces associated with the node.
	Interfaces []Interface `json:"interfaces"`

	// Status Current status of an AllocatedNode.
	Status AllocatedNodeStatus `json:"status"`
}

// AllocatedNodeStatus Current status of an AllocatedNode.
type AllocatedNodeStatus struct {
	// Conditions Conditions represent the latest available observations of an AllocatedNode's state.
	Conditions *[]Condition `json:"conditions,omitempty"`
}

// BMC Baseboard Management Controller (BMC) configuration for an AllocatedNode.
type BMC struct {
	// Address IP address or hostname of the BMC.
	Address string `json:"address"`

	// CredentialsName Name of the credentials used to access the BMC.
	CredentialsName string `json:"credentialsName"`
}

// Condition Condition represents an observation of an object's state.
type Condition struct {
	// LastTransitionTime LastTransitionTime is the last time the condition transitioned from one status to another
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Message is a human-readable message indicating details about the transition
	Message string `json:"message"`

	// Reason Reason for the condition's last transition
	Reason string `json:"reason"`

	// Status Status of the condition, one of True, False, Unknown
	Status string `json:"status"`

	// Type Type of condition
	Type string `json:"type"`
}

// Interface Network interface configuration for an AllocatedNode.
type Interface struct {
	// Label Label or identifier for the network interface.
	Label string `json:"label"`

	// MacAddress MAC address of the network interface.
	MacAddress string `json:"macAddress"`

	// Name Name of the network interface.
	Name string `json:"name"`
}

// NodeAllocationRequest Information about a NodeAllocationRequest resource.
type NodeAllocationRequest struct {
	// CloudID Cloud Identifier.
	CloudID string `json:"cloudID"`

	// Extensions Additional key-value pairs for extending the NodeAllocationRequest configuration.
	Extensions map[string]string `json:"extensions"`

	// HwMgrID Hardware Manager Identifier for the plugin.
	HwMgrID string `json:"hwMgrID"`

	// NodeGroup List of node groups which this resource is based on.
	NodeGroup []NodeGroup `json:"nodeGroup"`

	// Site Site identifier associated with the NodeAllocationRequest.
	Site string `json:"site"`
}

// NodeAllocationRequestResponse Information (including observed state) about a NodeAllocationRequest resource.
type NodeAllocationRequestResponse struct {
	// NodeAllocationRequest Information about a NodeAllocationRequest resource.
	NodeAllocationRequest *NodeAllocationRequest `json:"NodeAllocationRequest,omitempty"`

	// Status NodeAllocationRequestStatus describes the observed state of a NodeAllocationRequest resource.
	Status *NodeAllocationRequestStatus `json:"Status,omitempty"`
}

// NodeAllocationRequestStatus NodeAllocationRequestStatus describes the observed state of a NodeAllocationRequest resource.
type NodeAllocationRequestStatus struct {
	// Conditions Conditions represent the latest available observations of a NodeAllocationRequest's state.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// Properties Properties represent the AllocatedNode properties in the group.
	Properties *Properties `json:"properties,omitempty"`

	// SelectedGroups SelectedGroups is a map of group identifiers to their selected values
	SelectedGroups *map[string]string `json:"selectedGroups,omitempty"`
}

// NodeGroup Information about a node group within a NodeAllocationRequest.
type NodeGroup struct {
	// NodeGroupData Configuration data for a NodeGroup.
	NodeGroupData NodeGroupData `json:"nodeGroupData"`

	// Size Size of the node group.
	Size int `json:"size"`
}

// NodeGroupData Configuration data for a NodeGroup.
type NodeGroupData struct {
	// HwProfile Hardware profile associated with the node group data.
	HwProfile string `json:"hwProfile"`

	// Name Name of the node group data.
	Name string `json:"name"`

	// ResourceGroupId Identifier for the resource group.
	ResourceGroupId string `json:"resourceGroupId"`

	// ResourceSelector Selector for the resource.
	ResourceSelector string `json:"resourceSelector"`

	// Role Role of the node group data.
	Role string `json:"role"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// Properties Properties represent the AllocatedNode properties in the group.
type Properties struct {
	// NodeNames List of AllocatedNode names in the group.
	NodeNames *[]string `json:"nodeNames,omitempty"`
}

// CreateNodeAllocationRequestJSONRequestBody defines body for CreateNodeAllocationRequest for application/json ContentType.
type CreateNodeAllocationRequestJSONRequestBody = NodeAllocationRequest

// UpdateNodeAllocationRequestJSONRequestBody defines body for UpdateNodeAllocationRequest for application/json ContentType.
type UpdateNodeAllocationRequestJSONRequestBody = NodeAllocationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/provisioning/api-versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes)
	GetAllocatedNodes(w http.ResponseWriter, r *http.Request)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes/{allocatedNodeId})
	GetAllocatedNode(w http.ResponseWriter, r *http.Request, allocatedNodeId string)
	// Get minor API versions
	// (GET /hardware-manager/provisioning/v1/api-versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get NodeAllocationRequest resources
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests)
	GetNodeAllocationRequests(w http.ResponseWriter, r *http.Request)
	// Create NodeAllocationRequest resource
	// (POST /hardware-manager/provisioning/v1/node-allocation-requests)
	CreateNodeAllocationRequest(w http.ResponseWriter, r *http.Request)
	// Delete NodeAllocationRequest
	// (DELETE /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	DeleteNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
	// Retrieve the NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	GetNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
	// Modify all fields of the NodeAllocationRequest.
	// (PUT /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	UpdateNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
	// Retrieve the AllocatedNode resources associated with a NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}/allocated-nodes)
	GetAllocatedNodesFromNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllocatedNodes operation middleware
func (siw *ServerInterfaceWrapper) GetAllocatedNodes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllocatedNodes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllocatedNode operation middleware
func (siw *ServerInterfaceWrapper) GetAllocatedNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "allocatedNodeId" -------------
	var allocatedNodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "allocatedNodeId", r.PathValue("allocatedNodeId"), &allocatedNodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "allocatedNodeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllocatedNode(w, r, allocatedNodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeAllocationRequests operation middleware
func (siw *ServerInterfaceWrapper) GetNodeAllocationRequests(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeAllocationRequests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNodeAllocationRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) GetNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllocatedNodesFromNodeAllocationRequest operation middleware
func (siw *ServerInterfaceWrapper) GetAllocatedNodesFromNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeAllocationRequestId" -------------
	var nodeAllocationRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeAllocationRequestId", r.PathValue("nodeAllocationRequestId"), &nodeAllocationRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeAllocationRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllocatedNodesFromNodeAllocationRequest(w, r, nodeAllocationRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/api-versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/allocated-nodes", wrapper.GetAllocatedNodes)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/allocated-nodes/{allocatedNodeId}", wrapper.GetAllocatedNode)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/api-versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests", wrapper.GetNodeAllocationRequests)
	m.HandleFunc("POST "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests", wrapper.CreateNodeAllocationRequest)
	m.HandleFunc("DELETE "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}", wrapper.DeleteNodeAllocationRequest)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}", wrapper.GetNodeAllocationRequest)
	m.HandleFunc("PUT "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}", wrapper.UpdateNodeAllocationRequest)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}/allocated-nodes", wrapper.GetAllocatedNodesFromNodeAllocationRequest)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesRequestObject struct {
}

type GetAllocatedNodesResponseObject interface {
	VisitGetAllocatedNodesResponse(w http.ResponseWriter) error
}

type GetAllocatedNodes200JSONResponse []AllocatedNode

func (response GetAllocatedNodes200JSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes400ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes401ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes403ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodes500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodes500ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodeRequestObject struct {
	AllocatedNodeId string `json:"allocatedNodeId"`
}

type GetAllocatedNodeResponseObject interface {
	VisitGetAllocatedNodeResponse(w http.ResponseWriter) error
}

type GetAllocatedNode200JSONResponse AllocatedNode

func (response GetAllocatedNode200JSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode400ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode401ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode403ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode404ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNode500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNode500ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequestsRequestObject struct {
}

type GetNodeAllocationRequestsResponseObject interface {
	VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error
}

type GetNodeAllocationRequests200JSONResponse []NodeAllocationRequestResponse

func (response GetNodeAllocationRequests200JSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests400ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests401ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests403ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequests500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequests500ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequestRequestObject struct {
	Body *CreateNodeAllocationRequestJSONRequestBody
}

type CreateNodeAllocationRequestResponseObject interface {
	VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type CreateNodeAllocationRequest202JSONResponse string

func (response CreateNodeAllocationRequest202JSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitCreateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
}

type DeleteNodeAllocationRequestResponseObject interface {
	VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type DeleteNodeAllocationRequest200JSONResponse NodeAllocationRequestResponse

func (response DeleteNodeAllocationRequest200JSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest404ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest404ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitDeleteNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
}

type GetNodeAllocationRequestResponseObject interface {
	VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type GetNodeAllocationRequest200JSONResponse NodeAllocationRequestResponse

func (response GetNodeAllocationRequest200JSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitGetNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
	Body                    *UpdateNodeAllocationRequestJSONRequestBody
}

type UpdateNodeAllocationRequestResponseObject interface {
	VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type UpdateNodeAllocationRequest200JSONResponse NodeAllocationRequestResponse

func (response UpdateNodeAllocationRequest200JSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest404ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest404ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response UpdateNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitUpdateNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequestRequestObject struct {
	NodeAllocationRequestId string `json:"nodeAllocationRequestId"`
}

type GetAllocatedNodesFromNodeAllocationRequestResponseObject interface {
	VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error
}

type GetAllocatedNodesFromNodeAllocationRequest200JSONResponse []AllocatedNode

func (response GetAllocatedNodesFromNodeAllocationRequest200JSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest400ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest401ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest403ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllocatedNodesFromNodeAllocationRequest500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllocatedNodesFromNodeAllocationRequest500ApplicationProblemPlusJSONResponse) VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/provisioning/api-versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes)
	GetAllocatedNodes(ctx context.Context, request GetAllocatedNodesRequestObject) (GetAllocatedNodesResponseObject, error)
	// Get AllocatedNode resources
	// (GET /hardware-manager/provisioning/v1/allocated-nodes/{allocatedNodeId})
	GetAllocatedNode(ctx context.Context, request GetAllocatedNodeRequestObject) (GetAllocatedNodeResponseObject, error)
	// Get minor API versions
	// (GET /hardware-manager/provisioning/v1/api-versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get NodeAllocationRequest resources
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests)
	GetNodeAllocationRequests(ctx context.Context, request GetNodeAllocationRequestsRequestObject) (GetNodeAllocationRequestsResponseObject, error)
	// Create NodeAllocationRequest resource
	// (POST /hardware-manager/provisioning/v1/node-allocation-requests)
	CreateNodeAllocationRequest(ctx context.Context, request CreateNodeAllocationRequestRequestObject) (CreateNodeAllocationRequestResponseObject, error)
	// Delete NodeAllocationRequest
	// (DELETE /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	DeleteNodeAllocationRequest(ctx context.Context, request DeleteNodeAllocationRequestRequestObject) (DeleteNodeAllocationRequestResponseObject, error)
	// Retrieve the NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	GetNodeAllocationRequest(ctx context.Context, request GetNodeAllocationRequestRequestObject) (GetNodeAllocationRequestResponseObject, error)
	// Modify all fields of the NodeAllocationRequest.
	// (PUT /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId})
	UpdateNodeAllocationRequest(ctx context.Context, request UpdateNodeAllocationRequestRequestObject) (UpdateNodeAllocationRequestResponseObject, error)
	// Retrieve the AllocatedNode resources associated with a NodeAllocationRequest resource.
	// (GET /hardware-manager/provisioning/v1/node-allocation-requests/{nodeAllocationRequestId}/allocated-nodes)
	GetAllocatedNodesFromNodeAllocationRequest(ctx context.Context, request GetAllocatedNodesFromNodeAllocationRequestRequestObject) (GetAllocatedNodesFromNodeAllocationRequestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllocatedNodes operation middleware
func (sh *strictHandler) GetAllocatedNodes(w http.ResponseWriter, r *http.Request) {
	var request GetAllocatedNodesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllocatedNodes(ctx, request.(GetAllocatedNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllocatedNodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllocatedNodesResponseObject); ok {
		if err := validResponse.VisitGetAllocatedNodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllocatedNode operation middleware
func (sh *strictHandler) GetAllocatedNode(w http.ResponseWriter, r *http.Request, allocatedNodeId string) {
	var request GetAllocatedNodeRequestObject

	request.AllocatedNodeId = allocatedNodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllocatedNode(ctx, request.(GetAllocatedNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllocatedNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllocatedNodeResponseObject); ok {
		if err := validResponse.VisitGetAllocatedNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeAllocationRequests operation middleware
func (sh *strictHandler) GetNodeAllocationRequests(w http.ResponseWriter, r *http.Request) {
	var request GetNodeAllocationRequestsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeAllocationRequests(ctx, request.(GetNodeAllocationRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeAllocationRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeAllocationRequestsResponseObject); ok {
		if err := validResponse.VisitGetNodeAllocationRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNodeAllocationRequest operation middleware
func (sh *strictHandler) CreateNodeAllocationRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateNodeAllocationRequestRequestObject

	var body CreateNodeAllocationRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNodeAllocationRequest(ctx, request.(CreateNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitCreateNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteNodeAllocationRequest operation middleware
func (sh *strictHandler) DeleteNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request DeleteNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNodeAllocationRequest(ctx, request.(DeleteNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitDeleteNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeAllocationRequest operation middleware
func (sh *strictHandler) GetNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request GetNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeAllocationRequest(ctx, request.(GetNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitGetNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateNodeAllocationRequest operation middleware
func (sh *strictHandler) UpdateNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request UpdateNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	var body UpdateNodeAllocationRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateNodeAllocationRequest(ctx, request.(UpdateNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitUpdateNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllocatedNodesFromNodeAllocationRequest operation middleware
func (sh *strictHandler) GetAllocatedNodesFromNodeAllocationRequest(w http.ResponseWriter, r *http.Request, nodeAllocationRequestId string) {
	var request GetAllocatedNodesFromNodeAllocationRequestRequestObject

	request.NodeAllocationRequestId = nodeAllocationRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllocatedNodesFromNodeAllocationRequest(ctx, request.(GetAllocatedNodesFromNodeAllocationRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllocatedNodesFromNodeAllocationRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllocatedNodesFromNodeAllocationRequestResponseObject); ok {
		if err := validResponse.VisitGetAllocatedNodesFromNodeAllocationRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcW3PbuhH+KztsZ87JlJack7ST+s12mhPNxKnGdtqH2A8QsZKQgAAPAFpRMvrvHQC8",
	"iqBEx7n26C0iicViL99+C8D5FCUyzaRAYXR08inSyRJT4v55Op38B5VmUthfFHWiWGbcz2gi5lKlxP4C",
	"MpO5AQJ3/mOQczBLhNPpZHQjojjKlMxQGYZO6l0tEj+QNOMYnUSPR8ej4yiOzDqzP7VRTCyizaZ6Imfv",
	"MDHRJm5opYepxZk2VqdiYr1HP5KxpvxKx7cN1Qt9N7dxxAym7sO/KpxHJ9FfxrU9x4Uxxw1L1ksiSpG1",
	"/Z0rNlU4Zx/aNhkviaIrovAoJYIsUI0zJe+YlcLEYnz3eKC9OJcJMUhfS4qDLCaAlGNASIqgUMtcJRgy",
	"1yxN9q3+7OLcKrJcTZWcMx5Q4mWxUsj8F6WL7Ox+0q2FxhETBtWcJBiIgleFxwWalVTvof4WiNYyYW5p",
	"K2aWW7MMcuaklBbypTbE5PvjoemTKz/EOk/hHzlTSKOTt86wrWU2LVhNdLvP41eVQm0bnedKoTDg5Vhr",
	"EQGtkSFvJ1JQZsK5d169A4WZQm3FW/tyYlAbIHeEcTKz3p1pVHfElNm4PfMv2qmFo6EuqabuuiSUEjYg",
	"O+qfEY0zSRSFC5duqVX/XAqjJOeo4Nezi/NHkEgxZ4tc+YSZSzXIbIRShTqEV1Mo3oFUsJTaCJJW4X92",
	"cd4T/YlCisIwwvVrkgYy6nVDTONjyDVSMBJIkthJd82yFY/lGrqTh2Kw9kh/nNRhoq0VG1FRBIUX14yG",
	"tlk50eZaEaGduGsWMsSrzjfAdBGW2oCxD5yRKq1M9TVSmCuZghRY5ok1nZBmiSqKI4+c0UlEicEjKyrk",
	"qxS1JouAahf+hdWHwDJPiThSSKhLkbR8JyhLiGFiARQNYVwXKG11rjUNzauQ6JD9L91zF7uthf+iC5Ps",
	"lKp78OSqwpGW0NgZT87hWuUYwwvCNcbwRrwXchWU7x9sS79eZ05KJXdvuLq3lbpxKFYqE9U+CoVyjffd",
	"LNsuMJ+JD5zMkIdid4bcAgNz+TZnqCq3dWpbD1KkJDntQ5+L0/Mafub3Eiv2os4wSVtec2Ljwh4t5UOe",
	"seYsbMukuMQ/ctRmGCkMDq2JDgBAqPxxmdPJ8wCm2RcwqdzUYzX8YFBU1JJQH8uET1uzdIa15zqthsF7",
	"XB/dEZ4jZIQp7YLDzUEtYFgvhNfZitKWrrVxl6uLhQqttSJrvk6qxrKr6Mx4vmDCmbEyZTeGJMXflcyz",
	"HQzO0s+F/UbDaskSS9iYrvxkoXNGbEkrlzGILryuJg4xOGYCkX3FDDbTMMQjg7YeEvVlWNVGbxqnUKkV",
	"PYOz4RJ1JoXeQ/x/ZSLhuQsaX4WR+pr76IEJ05uh+9zTHbSJo6tB5Do4vEGyhxmujzfv+Bj8lzP0/KJt",
	"SUdp9lnxW/HtsB5fknZvL2SXmAb62fxDjolB6oL/ITh51RLkWVZKMmsAhyiNdHa8ziyRKSinB4eruouM",
	"fRHUg2Sh4lOjmgMPJvo8EuIKFTA8J4YMRjr3sUO3j0F0+9jqub1yLeiyZXyBqluxWzMUE9zuslGpdyea",
	"G8SJEkM8e4JqXMgY99lT6Gv9C0/YKT+f7AySU+a5W86EBoKlW0mrUtd1SVewD3mpAh4u3nTk9kmUIZte",
	"Sn6vJYfZnZPd3s3YtkxgSaGYmio545g+952R1bfTdxfIcWqMYrPc4IOYl1iDyNMZKoeiNQ8jlfQYiK0D",
	"c2abR5fYOsOEzVlSNLYKZmvbE7A0426PwXOwEAPzDV/XC6fbzSJ+yDgRfoJyOo9oTINMErfVk1Sey7zV",
	"Ro5SlLuN51IITHwDLJ1HLbFy/TEFmZvwHpw2RIQao1N4czkBhXP0M5slMTXe+vpYadqv4Y2YGEjJGtYM",
	"OYV5rmznDayBqWwOFKuJqA/DqjHPFbtPE3u9RHh5fT0tu/3ExrjPmH2WrKZkwgRQM44MMzxoKb2UysTb",
	"PtV5mhK13poJrNwRTIwdlXMKQhpIlkQssNiqqHU0sl/j+EbghwQz41aX5SqTGh03sBWIs48+KmEydzPa",
	"4rlgdyiACApu+8O6VMBN5GrayYwT8f4mir2hqnQAvSScA+FawsxNfsdo6aSBrf92KJEkkcr3NxIm/7p+",
	"AZcvzuHJP5/9A94+uQ1GWsd4TAOKROaKLJD6IfY7O1Gho74RWw6hMsmrfK0bnUL0rzhajCDXTCxeXl+8",
	"egSrJYp2ZMJ/7SNnoBQdiDDt/Fdwt/hGMKM973BsRes89bt1M9y2tDdhnb5LYzJ9Mh6XEdmw4SiR6d6c",
	"2ELqatukwKAe8G1AZ9tp9bstbtraCoEarS1W2ve+ygVJj623Ozb725JtqekKrVhtT+z1bxpvHNzNZUHK",
	"DUlcG+OZQXSJFF4Sm/e54g1vrFarkUK6JMY5oVtQphMXSZae24jutNa+j3Ys1MNHt/ueuk/gdDqJ4u4J",
	"VRzJDAXJWHQSPRkdj55Y0xKzdFbYc8JEMnZ01zgKW6AJ7SaaXAld7PrZaDRYHbnZ9VXHblXFQ2proCsB",
	"dt0lB7H+dsllmVH0O5pTzquTOEcIXCfrVPnt+Lj0BArjj+0yXhTZ8bti39Oz4OGHc9r7eYs55W6rfJ5z",
	"vgY5M8SV9uByy6Xa9Wzi6OlOJYtM/dv9lN1iPAF9zwgFVffMf/8uSrg9U8uMXAusAJWSauQSqyhs3sWt",
	"CLFRThba4k+KhlgOEt3aIXtPQsfVgeWRRYph0cqDwFHyTt0flPXXD47LYafHrRPcLlj1hewPFIVPjx9/",
	"ByXeCJKbpVTsI1KvxZPvoMULqWaMUhQ/QzqGc6GRmc3M+8zsHH8izWkmdDMoX8O6DUlTV/MUSdGg0u4m",
	"B7PCbR2Myu4+2tIpahIio3KMG97YJk+3X7M8tbP/kO0/UbY/PX76HVS4rptrpGA7IbOGFfHNxlzmgo7+",
	"vFB0X05bsoSUCan6CW21SZCSd1L1XoXr4NSFFfvjsNwDcR0ant14eAB9tWXxiFS7/0eFGe4XobvPlvr4",
	"bHDUt+G1uw8sDzz3wHO/WvbuyZX+IhNHmQzdMTlXSAzq/Ue8gSz0Y8On3p6FojZnkq6/WDHoOWFv7wJa",
	"0rvp4MBv91JiwNn5hIK70WEBrWdrOExx/N4Y6Ob+DBPM+CO+4uKj363NlEwal5z23WU4AMoBUO4BKD5/",
	"90TVA3lrH0MYfxLhpNr49OMYus303D0v0Qrq4dC6eNCGKT+oD6b2N9g9iv4wjfYeOrJnZ9ibmu64CHbA",
	"lEN7/v/RnnskgD4o6KVORSszrAf5s2MKqEYndMCNAxcZlJqXaBTDOxzCc3d2OXkgVd9klPwQDOCH6ogO",
	"aHFAiwPL+PJQdiEpm6+BcA5zhpzubt9H37zB2nHpYM+tgRdKpj835/mq9xYOcHYgPw8nPz3nh50/AyCf",
	"T5Pc7E4fn6xtlf995P8qsHNj73Q6gSs3rHVh8GQ8dpdvl1Kbk2fHz/z/L1FM/Slwc7A8ZWreh65hojqD",
	"2sSB25nVMlqb3sXQ1jI3t5v/BQAA//9j50f9JEQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
